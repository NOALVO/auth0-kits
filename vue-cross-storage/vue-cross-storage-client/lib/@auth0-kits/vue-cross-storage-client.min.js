exports["@auth0-kits/vue-cross-storage-client"]=function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=201)}([function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t,r){var i=r(4),n=i.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return n(e,t,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=i:(o(i,t),t.Buffer=a),o(n,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return n(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=n(e);return void 0!==t?"string"==typeof r?i.fill(t,r):i.fill(t):i.fill(0),i},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t,r){(function(t){var i;e.exports=(i=i||function(e,i){var n;if("undefined"!=typeof window&&window.crypto&&(n=window.crypto),!n&&"undefined"!=typeof window&&window.msCrypto&&(n=window.msCrypto),!n&&void 0!==t&&t.crypto&&(n=t.crypto),!n)try{n=r(96)}catch(e){}var o=function(){if(n){if("function"==typeof n.getRandomValues)try{return n.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof n.randomBytes)try{return n.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},a=Object.create||function(){function e(){}return function(t){var r;return e.prototype=t,r=new e,e.prototype=null,r}}(),s={},f=s.lib={},c=f.Base={extend:function(e){var t=a(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},h=f.WordArray=c.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,r=e.words,i=this.sigBytes,n=e.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++){var a=r[o>>>2]>>>24-o%4*8&255;t[i+o>>>2]|=a<<24-(i+o)%4*8}else for(o=0;o<n;o+=4)t[i+o>>>2]=r[o>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,r=this.sigBytes;t[r>>>2]&=4294967295<<32-r%4*8,t.length=e.ceil(r/4)},clone:function(){var e=c.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],r=0;r<e;r+=4)t.push(o());return new h.init(t,e)}}),d=s.enc={},u=d.Hex={stringify:function(e){for(var t=e.words,r=e.sigBytes,i=[],n=0;n<r;n++){var o=t[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(e){for(var t=e.length,r=[],i=0;i<t;i+=2)r[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4;return new h.init(r,t/2)}},l=d.Latin1={stringify:function(e){for(var t=e.words,r=e.sigBytes,i=[],n=0;n<r;n++){var o=t[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(e){for(var t=e.length,r=[],i=0;i<t;i++)r[i>>>2]|=(255&e.charCodeAt(i))<<24-i%4*8;return new h.init(r,t)}},p=d.Utf8={stringify:function(e){try{return decodeURIComponent(escape(l.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return l.parse(unescape(encodeURIComponent(e)))}},b=f.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new h.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=p.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var r,i=this._data,n=i.words,o=i.sigBytes,a=this.blockSize,s=o/(4*a),f=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*a,c=e.min(4*f,o);if(f){for(var d=0;d<f;d+=a)this._doProcessBlock(n,d);r=n.splice(0,f),i.sigBytes-=c}return new h.init(r,c)},clone:function(){var e=c.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),y=(f.Hasher=b.extend({cfg:c.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){b.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function(e){return function(t,r){return new y.HMAC.init(e,r).finalize(t)}}}),s.algo={});return s}(Math),i)}).call(this,r(8))},function(e,t,r){(function(e){!function(e,t){"use strict";function i(e,t){if(!e)throw new Error(t||"Assertion failed")}function n(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function o(e,t,r){if(o.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var a;"object"==typeof e?e.exports=o:t.BN=o,o.BN=o,o.wordSize=26;try{a=r(135).Buffer}catch(e){}function s(e,t,r){for(var n=0,o=Math.min(e.length,r),a=0,s=t;s<o;s++){var f,c=e.charCodeAt(s)-48;n<<=4,n|=f=c>=49&&c<=54?c-49+10:c>=17&&c<=22?c-17+10:c,a|=f}return i(!(240&a),"Invalid character in "+e),n}function f(e,t,r,n){for(var o=0,a=0,s=Math.min(e.length,r),f=t;f<s;f++){var c=e.charCodeAt(f)-48;o*=n,a=c>=49?c-49+10:c>=17?c-17+10:c,i(c>=0&&a<n,"Invalid character"),o+=a}return o}function c(e,t){e.words=t.words,e.length=t.length,e.negative=t.negative,e.red=t.red}function h(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}o.isBN=function(e){return e instanceof o||null!==e&&"object"==typeof e&&e.constructor.wordSize===o.wordSize&&Array.isArray(e.words)},o.max=function(e,t){return e.cmp(t)>0?e:t},o.min=function(e,t){return e.cmp(t)<0?e:t},o.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),i(t===(0|t)&&t>=2&&t<=36);var n=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&n++,16===t?this._parseHex(e,n):this._parseBase(e,t,n),"-"===e[0]&&(this.negative=1),this._strip(),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(i(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initArray=function(e,t,r){if(i("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,a,s=0;if("be"===r)for(n=e.length-1,o=0;n>=0;n-=3)a=e[n]|e[n-1]<<8|e[n-2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===r)for(n=0,o=0;n<e.length;n+=3)a=e[n]|e[n+1]<<8|e[n+2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this._strip()},o.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n,o=0;for(r=e.length-6,i=0;r>=t;r-=6)n=s(e,r,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,i++);r+6!==t&&(n=s(e,t,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303),this._strip()},o.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=t)i++;i--,n=n/t|0;for(var o=e.length-r,a=o%i,s=Math.min(o,o-a)+r,c=0,h=r;h<s;h+=i)c=f(e,h,h+i,t),this.imuln(n),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==a){var d=1;for(c=f(e,h,e.length,t),h=0;h<a;h++)d*=t;this.imuln(d),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},o.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},o.prototype._move=function(e){c(e,this)},o.prototype.clone=function(){var e=new o(null);return this.copy(e),e},o.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for?o.prototype[Symbol.for("nodejs.util.inspect.custom")]=h:o.prototype.inspect=h;var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var n=0,o=0,a=0;a<this.length;a++){var s=this.words[a],f=(16777215&(s<<n|o)).toString(16);r=0!==(o=s>>>24-n&16777215)||a!==this.length-1?d[6-f.length]+f+r:f+r,(n+=2)>=26&&(n-=26,a--)}for(0!==o&&(r=o.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var c=u[e],h=l[e];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modrn(h).toString(e);r=(p=p.idivn(h)).isZero()?b+r:d[c-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}i(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},o.prototype.toJSON=function(){return this.toString(16,2)},a&&(o.prototype.toBuffer=function(e,t){return this.toArrayLike(a,e,t)}),o.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)};function p(e,t,r){r.negative=t.negative^e.negative;var i=e.length+t.length|0;r.length=i,i=i-1|0;var n=0|e.words[0],o=0|t.words[0],a=n*o,s=67108863&a,f=a/67108864|0;r.words[0]=s;for(var c=1;c<i;c++){for(var h=f>>>26,d=67108863&f,u=Math.min(c,t.length-1),l=Math.max(0,c-e.length+1);l<=u;l++){var p=c-l|0;h+=(a=(n=0|e.words[p])*(o=0|t.words[l])+d)/67108864|0,d=67108863&a}r.words[c]=0|d,f=0|h}return 0!==f?r.words[c]=0|f:r.length--,r._strip()}o.prototype.toArrayLike=function(e,t,r){this._strip();var n=this.byteLength(),o=r||Math.max(1,n);i(n<=o,"byte array longer than desired length"),i(o>0,"Requested array length <= 0");var a=function(e,t){return e.allocUnsafe?e.allocUnsafe(t):new e(t)}(e,o);return this["_toArrayLike"+("le"===t?"LE":"BE")](a,n),a},o.prototype._toArrayLikeLE=function(e,t){for(var r=0,i=0,n=0,o=0;n<this.length;n++){var a=this.words[n]<<o|i;e[r++]=255&a,r<e.length&&(e[r++]=a>>8&255),r<e.length&&(e[r++]=a>>16&255),6===o?(r<e.length&&(e[r++]=a>>24&255),i=0,o=0):(i=a>>>24,o+=2)}if(r<e.length)for(e[r++]=i;r<e.length;)e[r++]=0},o.prototype._toArrayLikeBE=function(e,t){for(var r=e.length-1,i=0,n=0,o=0;n<this.length;n++){var a=this.words[n]<<o|i;e[r--]=255&a,r>=0&&(e[r--]=a>>8&255),r>=0&&(e[r--]=a>>16&255),6===o?(r>=0&&(e[r--]=a>>24&255),i=0,o=0):(i=a>>>24,o+=2)}if(r>=0)for(e[r--]=i;r>=0;)e[r--]=0},Math.clz32?o.prototype._countBits=function(e){return 32-Math.clz32(e)}:o.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},o.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},o.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},o.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this._strip()},o.prototype.ior=function(e){return i(0==(this.negative|e.negative)),this.iuor(e)},o.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},o.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},o.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this._strip()},o.prototype.iand=function(e){return i(0==(this.negative|e.negative)),this.iuand(e)},o.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},o.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},o.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var i=0;i<r.length;i++)this.words[i]=t.words[i]^r.words[i];if(this!==t)for(;i<t.length;i++)this.words[i]=t.words[i];return this.length=t.length,this._strip()},o.prototype.ixor=function(e){return i(0==(this.negative|e.negative)),this.iuxor(e)},o.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},o.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},o.prototype.inotn=function(e){i("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var n=0;n<t;n++)this.words[n]=67108863&~this.words[n];return r>0&&(this.words[n]=~this.words[n]&67108863>>26-r),this._strip()},o.prototype.notn=function(e){return this.clone().inotn(e)},o.prototype.setn=function(e,t){i("number"==typeof e&&e>=0);var r=e/26|0,n=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<n:this.words[r]&~(1<<n),this._strip()},o.prototype.iadd=function(e){var t,r,i;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,i=e):(r=e,i=this);for(var n=0,o=0;o<i.length;o++)t=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&t,n=t>>>26;for(;0!==n&&o<r.length;o++)t=(0|r.words[o])+n,this.words[o]=67108863&t,n=t>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},o.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,i,n=this.cmp(e);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=e):(r=e,i=this);for(var o=0,a=0;a<i.length;a++)o=(t=(0|r.words[a])-(0|i.words[a])+o)>>26,this.words[a]=67108863&t;for(;0!==o&&a<r.length;a++)o=(t=(0|r.words[a])+o)>>26,this.words[a]=67108863&t;if(0===o&&a<r.length&&r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this.length=Math.max(this.length,a),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(e){return this.clone().isub(e)};var b=function(e,t,r){var i,n,o,a=e.words,s=t.words,f=r.words,c=0,h=0|a[0],d=8191&h,u=h>>>13,l=0|a[1],p=8191&l,b=l>>>13,y=0|a[2],v=8191&y,g=y>>>13,m=0|a[3],_=8191&m,w=m>>>13,S=0|a[4],E=8191&S,M=S>>>13,k=0|a[5],A=8191&k,x=k>>>13,B=0|a[6],I=8191&B,R=B>>>13,C=0|a[7],P=8191&C,T=C>>>13,O=0|a[8],j=8191&O,D=O>>>13,N=0|a[9],z=8191&N,L=N>>>13,U=0|s[0],q=8191&U,H=U>>>13,F=0|s[1],K=8191&F,W=F>>>13,Y=0|s[2],V=8191&Y,X=Y>>>13,J=0|s[3],G=8191&J,Z=J>>>13,$=0|s[4],Q=8191&$,ee=$>>>13,te=0|s[5],re=8191&te,ie=te>>>13,ne=0|s[6],oe=8191&ne,ae=ne>>>13,se=0|s[7],fe=8191&se,ce=se>>>13,he=0|s[8],de=8191&he,ue=he>>>13,le=0|s[9],pe=8191&le,be=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(c+(i=Math.imul(d,q))|0)+((8191&(n=(n=Math.imul(d,H))+Math.imul(u,q)|0))<<13)|0;c=((o=Math.imul(u,H))+(n>>>13)|0)+(ye>>>26)|0,ye&=67108863,i=Math.imul(p,q),n=(n=Math.imul(p,H))+Math.imul(b,q)|0,o=Math.imul(b,H);var ve=(c+(i=i+Math.imul(d,K)|0)|0)+((8191&(n=(n=n+Math.imul(d,W)|0)+Math.imul(u,K)|0))<<13)|0;c=((o=o+Math.imul(u,W)|0)+(n>>>13)|0)+(ve>>>26)|0,ve&=67108863,i=Math.imul(v,q),n=(n=Math.imul(v,H))+Math.imul(g,q)|0,o=Math.imul(g,H),i=i+Math.imul(p,K)|0,n=(n=n+Math.imul(p,W)|0)+Math.imul(b,K)|0,o=o+Math.imul(b,W)|0;var ge=(c+(i=i+Math.imul(d,V)|0)|0)+((8191&(n=(n=n+Math.imul(d,X)|0)+Math.imul(u,V)|0))<<13)|0;c=((o=o+Math.imul(u,X)|0)+(n>>>13)|0)+(ge>>>26)|0,ge&=67108863,i=Math.imul(_,q),n=(n=Math.imul(_,H))+Math.imul(w,q)|0,o=Math.imul(w,H),i=i+Math.imul(v,K)|0,n=(n=n+Math.imul(v,W)|0)+Math.imul(g,K)|0,o=o+Math.imul(g,W)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,X)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,X)|0;var me=(c+(i=i+Math.imul(d,G)|0)|0)+((8191&(n=(n=n+Math.imul(d,Z)|0)+Math.imul(u,G)|0))<<13)|0;c=((o=o+Math.imul(u,Z)|0)+(n>>>13)|0)+(me>>>26)|0,me&=67108863,i=Math.imul(E,q),n=(n=Math.imul(E,H))+Math.imul(M,q)|0,o=Math.imul(M,H),i=i+Math.imul(_,K)|0,n=(n=n+Math.imul(_,W)|0)+Math.imul(w,K)|0,o=o+Math.imul(w,W)|0,i=i+Math.imul(v,V)|0,n=(n=n+Math.imul(v,X)|0)+Math.imul(g,V)|0,o=o+Math.imul(g,X)|0,i=i+Math.imul(p,G)|0,n=(n=n+Math.imul(p,Z)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,Z)|0;var _e=(c+(i=i+Math.imul(d,Q)|0)|0)+((8191&(n=(n=n+Math.imul(d,ee)|0)+Math.imul(u,Q)|0))<<13)|0;c=((o=o+Math.imul(u,ee)|0)+(n>>>13)|0)+(_e>>>26)|0,_e&=67108863,i=Math.imul(A,q),n=(n=Math.imul(A,H))+Math.imul(x,q)|0,o=Math.imul(x,H),i=i+Math.imul(E,K)|0,n=(n=n+Math.imul(E,W)|0)+Math.imul(M,K)|0,o=o+Math.imul(M,W)|0,i=i+Math.imul(_,V)|0,n=(n=n+Math.imul(_,X)|0)+Math.imul(w,V)|0,o=o+Math.imul(w,X)|0,i=i+Math.imul(v,G)|0,n=(n=n+Math.imul(v,Z)|0)+Math.imul(g,G)|0,o=o+Math.imul(g,Z)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,ee)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,ee)|0;var we=(c+(i=i+Math.imul(d,re)|0)|0)+((8191&(n=(n=n+Math.imul(d,ie)|0)+Math.imul(u,re)|0))<<13)|0;c=((o=o+Math.imul(u,ie)|0)+(n>>>13)|0)+(we>>>26)|0,we&=67108863,i=Math.imul(I,q),n=(n=Math.imul(I,H))+Math.imul(R,q)|0,o=Math.imul(R,H),i=i+Math.imul(A,K)|0,n=(n=n+Math.imul(A,W)|0)+Math.imul(x,K)|0,o=o+Math.imul(x,W)|0,i=i+Math.imul(E,V)|0,n=(n=n+Math.imul(E,X)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,X)|0,i=i+Math.imul(_,G)|0,n=(n=n+Math.imul(_,Z)|0)+Math.imul(w,G)|0,o=o+Math.imul(w,Z)|0,i=i+Math.imul(v,Q)|0,n=(n=n+Math.imul(v,ee)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,ee)|0,i=i+Math.imul(p,re)|0,n=(n=n+Math.imul(p,ie)|0)+Math.imul(b,re)|0,o=o+Math.imul(b,ie)|0;var Se=(c+(i=i+Math.imul(d,oe)|0)|0)+((8191&(n=(n=n+Math.imul(d,ae)|0)+Math.imul(u,oe)|0))<<13)|0;c=((o=o+Math.imul(u,ae)|0)+(n>>>13)|0)+(Se>>>26)|0,Se&=67108863,i=Math.imul(P,q),n=(n=Math.imul(P,H))+Math.imul(T,q)|0,o=Math.imul(T,H),i=i+Math.imul(I,K)|0,n=(n=n+Math.imul(I,W)|0)+Math.imul(R,K)|0,o=o+Math.imul(R,W)|0,i=i+Math.imul(A,V)|0,n=(n=n+Math.imul(A,X)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,X)|0,i=i+Math.imul(E,G)|0,n=(n=n+Math.imul(E,Z)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,Z)|0,i=i+Math.imul(_,Q)|0,n=(n=n+Math.imul(_,ee)|0)+Math.imul(w,Q)|0,o=o+Math.imul(w,ee)|0,i=i+Math.imul(v,re)|0,n=(n=n+Math.imul(v,ie)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ie)|0,i=i+Math.imul(p,oe)|0,n=(n=n+Math.imul(p,ae)|0)+Math.imul(b,oe)|0,o=o+Math.imul(b,ae)|0;var Ee=(c+(i=i+Math.imul(d,fe)|0)|0)+((8191&(n=(n=n+Math.imul(d,ce)|0)+Math.imul(u,fe)|0))<<13)|0;c=((o=o+Math.imul(u,ce)|0)+(n>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,i=Math.imul(j,q),n=(n=Math.imul(j,H))+Math.imul(D,q)|0,o=Math.imul(D,H),i=i+Math.imul(P,K)|0,n=(n=n+Math.imul(P,W)|0)+Math.imul(T,K)|0,o=o+Math.imul(T,W)|0,i=i+Math.imul(I,V)|0,n=(n=n+Math.imul(I,X)|0)+Math.imul(R,V)|0,o=o+Math.imul(R,X)|0,i=i+Math.imul(A,G)|0,n=(n=n+Math.imul(A,Z)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,Z)|0,i=i+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,ee)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,ee)|0,i=i+Math.imul(_,re)|0,n=(n=n+Math.imul(_,ie)|0)+Math.imul(w,re)|0,o=o+Math.imul(w,ie)|0,i=i+Math.imul(v,oe)|0,n=(n=n+Math.imul(v,ae)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,ae)|0,i=i+Math.imul(p,fe)|0,n=(n=n+Math.imul(p,ce)|0)+Math.imul(b,fe)|0,o=o+Math.imul(b,ce)|0;var Me=(c+(i=i+Math.imul(d,de)|0)|0)+((8191&(n=(n=n+Math.imul(d,ue)|0)+Math.imul(u,de)|0))<<13)|0;c=((o=o+Math.imul(u,ue)|0)+(n>>>13)|0)+(Me>>>26)|0,Me&=67108863,i=Math.imul(z,q),n=(n=Math.imul(z,H))+Math.imul(L,q)|0,o=Math.imul(L,H),i=i+Math.imul(j,K)|0,n=(n=n+Math.imul(j,W)|0)+Math.imul(D,K)|0,o=o+Math.imul(D,W)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,X)|0)+Math.imul(T,V)|0,o=o+Math.imul(T,X)|0,i=i+Math.imul(I,G)|0,n=(n=n+Math.imul(I,Z)|0)+Math.imul(R,G)|0,o=o+Math.imul(R,Z)|0,i=i+Math.imul(A,Q)|0,n=(n=n+Math.imul(A,ee)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,ee)|0,i=i+Math.imul(E,re)|0,n=(n=n+Math.imul(E,ie)|0)+Math.imul(M,re)|0,o=o+Math.imul(M,ie)|0,i=i+Math.imul(_,oe)|0,n=(n=n+Math.imul(_,ae)|0)+Math.imul(w,oe)|0,o=o+Math.imul(w,ae)|0,i=i+Math.imul(v,fe)|0,n=(n=n+Math.imul(v,ce)|0)+Math.imul(g,fe)|0,o=o+Math.imul(g,ce)|0,i=i+Math.imul(p,de)|0,n=(n=n+Math.imul(p,ue)|0)+Math.imul(b,de)|0,o=o+Math.imul(b,ue)|0;var ke=(c+(i=i+Math.imul(d,pe)|0)|0)+((8191&(n=(n=n+Math.imul(d,be)|0)+Math.imul(u,pe)|0))<<13)|0;c=((o=o+Math.imul(u,be)|0)+(n>>>13)|0)+(ke>>>26)|0,ke&=67108863,i=Math.imul(z,K),n=(n=Math.imul(z,W))+Math.imul(L,K)|0,o=Math.imul(L,W),i=i+Math.imul(j,V)|0,n=(n=n+Math.imul(j,X)|0)+Math.imul(D,V)|0,o=o+Math.imul(D,X)|0,i=i+Math.imul(P,G)|0,n=(n=n+Math.imul(P,Z)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,Z)|0,i=i+Math.imul(I,Q)|0,n=(n=n+Math.imul(I,ee)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,ee)|0,i=i+Math.imul(A,re)|0,n=(n=n+Math.imul(A,ie)|0)+Math.imul(x,re)|0,o=o+Math.imul(x,ie)|0,i=i+Math.imul(E,oe)|0,n=(n=n+Math.imul(E,ae)|0)+Math.imul(M,oe)|0,o=o+Math.imul(M,ae)|0,i=i+Math.imul(_,fe)|0,n=(n=n+Math.imul(_,ce)|0)+Math.imul(w,fe)|0,o=o+Math.imul(w,ce)|0,i=i+Math.imul(v,de)|0,n=(n=n+Math.imul(v,ue)|0)+Math.imul(g,de)|0,o=o+Math.imul(g,ue)|0;var Ae=(c+(i=i+Math.imul(p,pe)|0)|0)+((8191&(n=(n=n+Math.imul(p,be)|0)+Math.imul(b,pe)|0))<<13)|0;c=((o=o+Math.imul(b,be)|0)+(n>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,i=Math.imul(z,V),n=(n=Math.imul(z,X))+Math.imul(L,V)|0,o=Math.imul(L,X),i=i+Math.imul(j,G)|0,n=(n=n+Math.imul(j,Z)|0)+Math.imul(D,G)|0,o=o+Math.imul(D,Z)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,ee)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,ee)|0,i=i+Math.imul(I,re)|0,n=(n=n+Math.imul(I,ie)|0)+Math.imul(R,re)|0,o=o+Math.imul(R,ie)|0,i=i+Math.imul(A,oe)|0,n=(n=n+Math.imul(A,ae)|0)+Math.imul(x,oe)|0,o=o+Math.imul(x,ae)|0,i=i+Math.imul(E,fe)|0,n=(n=n+Math.imul(E,ce)|0)+Math.imul(M,fe)|0,o=o+Math.imul(M,ce)|0,i=i+Math.imul(_,de)|0,n=(n=n+Math.imul(_,ue)|0)+Math.imul(w,de)|0,o=o+Math.imul(w,ue)|0;var xe=(c+(i=i+Math.imul(v,pe)|0)|0)+((8191&(n=(n=n+Math.imul(v,be)|0)+Math.imul(g,pe)|0))<<13)|0;c=((o=o+Math.imul(g,be)|0)+(n>>>13)|0)+(xe>>>26)|0,xe&=67108863,i=Math.imul(z,G),n=(n=Math.imul(z,Z))+Math.imul(L,G)|0,o=Math.imul(L,Z),i=i+Math.imul(j,Q)|0,n=(n=n+Math.imul(j,ee)|0)+Math.imul(D,Q)|0,o=o+Math.imul(D,ee)|0,i=i+Math.imul(P,re)|0,n=(n=n+Math.imul(P,ie)|0)+Math.imul(T,re)|0,o=o+Math.imul(T,ie)|0,i=i+Math.imul(I,oe)|0,n=(n=n+Math.imul(I,ae)|0)+Math.imul(R,oe)|0,o=o+Math.imul(R,ae)|0,i=i+Math.imul(A,fe)|0,n=(n=n+Math.imul(A,ce)|0)+Math.imul(x,fe)|0,o=o+Math.imul(x,ce)|0,i=i+Math.imul(E,de)|0,n=(n=n+Math.imul(E,ue)|0)+Math.imul(M,de)|0,o=o+Math.imul(M,ue)|0;var Be=(c+(i=i+Math.imul(_,pe)|0)|0)+((8191&(n=(n=n+Math.imul(_,be)|0)+Math.imul(w,pe)|0))<<13)|0;c=((o=o+Math.imul(w,be)|0)+(n>>>13)|0)+(Be>>>26)|0,Be&=67108863,i=Math.imul(z,Q),n=(n=Math.imul(z,ee))+Math.imul(L,Q)|0,o=Math.imul(L,ee),i=i+Math.imul(j,re)|0,n=(n=n+Math.imul(j,ie)|0)+Math.imul(D,re)|0,o=o+Math.imul(D,ie)|0,i=i+Math.imul(P,oe)|0,n=(n=n+Math.imul(P,ae)|0)+Math.imul(T,oe)|0,o=o+Math.imul(T,ae)|0,i=i+Math.imul(I,fe)|0,n=(n=n+Math.imul(I,ce)|0)+Math.imul(R,fe)|0,o=o+Math.imul(R,ce)|0,i=i+Math.imul(A,de)|0,n=(n=n+Math.imul(A,ue)|0)+Math.imul(x,de)|0,o=o+Math.imul(x,ue)|0;var Ie=(c+(i=i+Math.imul(E,pe)|0)|0)+((8191&(n=(n=n+Math.imul(E,be)|0)+Math.imul(M,pe)|0))<<13)|0;c=((o=o+Math.imul(M,be)|0)+(n>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,i=Math.imul(z,re),n=(n=Math.imul(z,ie))+Math.imul(L,re)|0,o=Math.imul(L,ie),i=i+Math.imul(j,oe)|0,n=(n=n+Math.imul(j,ae)|0)+Math.imul(D,oe)|0,o=o+Math.imul(D,ae)|0,i=i+Math.imul(P,fe)|0,n=(n=n+Math.imul(P,ce)|0)+Math.imul(T,fe)|0,o=o+Math.imul(T,ce)|0,i=i+Math.imul(I,de)|0,n=(n=n+Math.imul(I,ue)|0)+Math.imul(R,de)|0,o=o+Math.imul(R,ue)|0;var Re=(c+(i=i+Math.imul(A,pe)|0)|0)+((8191&(n=(n=n+Math.imul(A,be)|0)+Math.imul(x,pe)|0))<<13)|0;c=((o=o+Math.imul(x,be)|0)+(n>>>13)|0)+(Re>>>26)|0,Re&=67108863,i=Math.imul(z,oe),n=(n=Math.imul(z,ae))+Math.imul(L,oe)|0,o=Math.imul(L,ae),i=i+Math.imul(j,fe)|0,n=(n=n+Math.imul(j,ce)|0)+Math.imul(D,fe)|0,o=o+Math.imul(D,ce)|0,i=i+Math.imul(P,de)|0,n=(n=n+Math.imul(P,ue)|0)+Math.imul(T,de)|0,o=o+Math.imul(T,ue)|0;var Ce=(c+(i=i+Math.imul(I,pe)|0)|0)+((8191&(n=(n=n+Math.imul(I,be)|0)+Math.imul(R,pe)|0))<<13)|0;c=((o=o+Math.imul(R,be)|0)+(n>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,i=Math.imul(z,fe),n=(n=Math.imul(z,ce))+Math.imul(L,fe)|0,o=Math.imul(L,ce),i=i+Math.imul(j,de)|0,n=(n=n+Math.imul(j,ue)|0)+Math.imul(D,de)|0,o=o+Math.imul(D,ue)|0;var Pe=(c+(i=i+Math.imul(P,pe)|0)|0)+((8191&(n=(n=n+Math.imul(P,be)|0)+Math.imul(T,pe)|0))<<13)|0;c=((o=o+Math.imul(T,be)|0)+(n>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,i=Math.imul(z,de),n=(n=Math.imul(z,ue))+Math.imul(L,de)|0,o=Math.imul(L,ue);var Te=(c+(i=i+Math.imul(j,pe)|0)|0)+((8191&(n=(n=n+Math.imul(j,be)|0)+Math.imul(D,pe)|0))<<13)|0;c=((o=o+Math.imul(D,be)|0)+(n>>>13)|0)+(Te>>>26)|0,Te&=67108863;var Oe=(c+(i=Math.imul(z,pe))|0)+((8191&(n=(n=Math.imul(z,be))+Math.imul(L,pe)|0))<<13)|0;return c=((o=Math.imul(L,be))+(n>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,f[0]=ye,f[1]=ve,f[2]=ge,f[3]=me,f[4]=_e,f[5]=we,f[6]=Se,f[7]=Ee,f[8]=Me,f[9]=ke,f[10]=Ae,f[11]=xe,f[12]=Be,f[13]=Ie,f[14]=Re,f[15]=Ce,f[16]=Pe,f[17]=Te,f[18]=Oe,0!==c&&(f[19]=c,r.length++),r};function y(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var a=n;n=0;for(var s=67108863&i,f=Math.min(o,t.length-1),c=Math.max(0,o-e.length+1);c<=f;c++){var h=o-c,d=(0|e.words[h])*(0|t.words[c]),u=67108863&d;s=67108863&(u=u+s|0),n+=(a=(a=a+(d/67108864|0)|0)+(u>>>26)|0)>>>26,a&=67108863}r.words[o]=s,i=a,a=n}return 0!==i?r.words[o]=i:r.length--,r._strip()}function v(e,t,r){return y(e,t,r)}function g(e,t){this.x=e,this.y=t}Math.imul||(b=p),o.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?b(this,e,t):r<63?p(this,e,t):r<1024?y(this,e,t):v(this,e,t)},g.prototype.makeRBT=function(e){for(var t=new Array(e),r=o.prototype._countBits(e)-1,i=0;i<e;i++)t[i]=this.revBin(i,r,e);return t},g.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var i=0,n=0;n<t;n++)i|=(1&e)<<t-n-1,e>>=1;return i},g.prototype.permute=function(e,t,r,i,n,o){for(var a=0;a<o;a++)i[a]=t[e[a]],n[a]=r[e[a]]},g.prototype.transform=function(e,t,r,i,n,o){this.permute(o,e,t,r,i,n);for(var a=1;a<n;a<<=1)for(var s=a<<1,f=Math.cos(2*Math.PI/s),c=Math.sin(2*Math.PI/s),h=0;h<n;h+=s)for(var d=f,u=c,l=0;l<a;l++){var p=r[h+l],b=i[h+l],y=r[h+l+a],v=i[h+l+a],g=d*y-u*v;v=d*v+u*y,y=g,r[h+l]=p+y,i[h+l]=b+v,r[h+l+a]=p-y,i[h+l+a]=b-v,l!==s&&(g=f*d-c*u,u=f*u+c*d,d=g)}},g.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},g.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=e[i];e[i]=e[r-i-1],e[r-i-1]=n,n=t[i],t[i]=-t[r-i-1],t[r-i-1]=-n}},g.prototype.normalize13b=function(e,t){for(var r=0,i=0;i<t/2;i++){var n=8192*Math.round(e[2*i+1]/t)+Math.round(e[2*i]/t)+r;e[i]=67108863&n,r=n<67108864?0:n/67108864|0}return e},g.prototype.convert13b=function(e,t,r,n){for(var o=0,a=0;a<t;a++)o+=0|e[a],r[2*a]=8191&o,o>>>=13,r[2*a+1]=8191&o,o>>>=13;for(a=2*t;a<n;++a)r[a]=0;i(0===o),i(0==(-8192&o))},g.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},g.prototype.mulp=function(e,t,r){var i=2*this.guessLen13b(e.length,t.length),n=this.makeRBT(i),o=this.stub(i),a=new Array(i),s=new Array(i),f=new Array(i),c=new Array(i),h=new Array(i),d=new Array(i),u=r.words;u.length=i,this.convert13b(e.words,e.length,a,i),this.convert13b(t.words,t.length,c,i),this.transform(a,o,s,f,i,n),this.transform(c,o,h,d,i,n);for(var l=0;l<i;l++){var p=s[l]*h[l]-f[l]*d[l];f[l]=s[l]*d[l]+f[l]*h[l],s[l]=p}return this.conjugate(s,f,i),this.transform(s,f,u,o,i,n),this.conjugate(u,o,i),this.normalize13b(u,i),r.negative=e.negative^t.negative,r.length=e.length+t.length,r._strip()},o.prototype.mul=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},o.prototype.mulf=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),v(this,e,t)},o.prototype.imul=function(e){return this.clone().mulTo(e,this)},o.prototype.imuln=function(e){var t=e<0;t&&(e=-e),i("number"==typeof e),i(e<67108864);for(var r=0,n=0;n<this.length;n++){var o=(0|this.words[n])*e,a=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=a>>>26,this.words[n]=67108863&a}return 0!==r&&(this.words[n]=r,this.length++),t?this.ineg():this},o.prototype.muln=function(e){return this.clone().imuln(e)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var i=r/26|0,n=r%26;t[r]=e.words[i]>>>n&1}return t}(e);if(0===t.length)return new o(1);for(var r=this,i=0;i<t.length&&0===t[i];i++,r=r.sqr());if(++i<t.length)for(var n=r.sqr();i<t.length;i++,n=n.sqr())0!==t[i]&&(r=r.mul(n));return r},o.prototype.iushln=function(e){i("number"==typeof e&&e>=0);var t,r=e%26,n=(e-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var a=0;for(t=0;t<this.length;t++){var s=this.words[t]&o,f=(0|this.words[t])-s<<r;this.words[t]=f|a,a=s>>>26-r}a&&(this.words[t]=a,this.length++)}if(0!==n){for(t=this.length-1;t>=0;t--)this.words[t+n]=this.words[t];for(t=0;t<n;t++)this.words[t]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(e){return i(0===this.negative),this.iushln(e)},o.prototype.iushrn=function(e,t,r){var n;i("number"==typeof e&&e>=0),n=t?(t-t%26)/26:0;var o=e%26,a=Math.min((e-o)/26,this.length),s=67108863^67108863>>>o<<o,f=r;if(n-=a,n=Math.max(0,n),f){for(var c=0;c<a;c++)f.words[c]=this.words[c];f.length=a}if(0===a);else if(this.length>a)for(this.length-=a,c=0;c<this.length;c++)this.words[c]=this.words[c+a];else this.words[0]=0,this.length=1;var h=0;for(c=this.length-1;c>=0&&(0!==h||c>=n);c--){var d=0|this.words[c];this.words[c]=h<<26-o|d>>>o,h=d&s}return f&&0!==h&&(f.words[f.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(e,t,r){return i(0===this.negative),this.iushrn(e,t,r)},o.prototype.shln=function(e){return this.clone().ishln(e)},o.prototype.ushln=function(e){return this.clone().iushln(e)},o.prototype.shrn=function(e){return this.clone().ishrn(e)},o.prototype.ushrn=function(e){return this.clone().iushrn(e)},o.prototype.testn=function(e){i("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,n=1<<t;return!(this.length<=r)&&!!(this.words[r]&n)},o.prototype.imaskn=function(e){i("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var n=67108863^67108863>>>t<<t;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(e){return this.clone().imaskn(e)},o.prototype.iaddn=function(e){return i("number"==typeof e),i(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<=e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},o.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},o.prototype.isubn=function(e){if(i("number"==typeof e),i(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this._strip()},o.prototype.addn=function(e){return this.clone().iaddn(e)},o.prototype.subn=function(e){return this.clone().isubn(e)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(e,t,r){var n,o,a=e.length+r;this._expand(a);var s=0;for(n=0;n<e.length;n++){o=(0|this.words[n+r])+s;var f=(0|e.words[n])*t;s=((o-=67108863&f)>>26)-(f/67108864|0),this.words[n+r]=67108863&o}for(;n<this.length-r;n++)s=(o=(0|this.words[n+r])+s)>>26,this.words[n+r]=67108863&o;if(0===s)return this._strip();for(i(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(e,t){var r=(this.length,e.length),i=this.clone(),n=e,a=0|n.words[n.length-1];0!==(r=26-this._countBits(a))&&(n=n.ushln(r),i.iushln(r),a=0|n.words[n.length-1]);var s,f=i.length-n.length;if("mod"!==t){(s=new o(null)).length=f+1,s.words=new Array(s.length);for(var c=0;c<s.length;c++)s.words[c]=0}var h=i.clone()._ishlnsubmul(n,1,f);0===h.negative&&(i=h,s&&(s.words[f]=1));for(var d=f-1;d>=0;d--){var u=67108864*(0|i.words[n.length+d])+(0|i.words[n.length+d-1]);for(u=Math.min(u/a|0,67108863),i._ishlnsubmul(n,u,d);0!==i.negative;)u--,i.negative=0,i._ishlnsubmul(n,1,d),i.isZero()||(i.negative^=1);s&&(s.words[d]=u)}return s&&s._strip(),i._strip(),"div"!==t&&0!==r&&i.iushrn(r),{div:s||null,mod:i}},o.prototype.divmod=function(e,t,r){return i(!e.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===e.negative?(s=this.neg().divmod(e,t),"mod"!==t&&(n=s.div.neg()),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.iadd(e)),{div:n,mod:a}):0===this.negative&&0!==e.negative?(s=this.divmod(e.neg(),t),"mod"!==t&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&e.negative)?(s=this.neg().divmod(e.neg(),t),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.isub(e)),{div:s.div,mod:a}):e.length>this.length||this.cmp(e)<0?{div:new o(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new o(this.modrn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new o(this.modrn(e.words[0]))}:this._wordDiv(e,t);var n,a,s},o.prototype.div=function(e){return this.divmod(e,"div",!1).div},o.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},o.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},o.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,i=e.ushrn(1),n=e.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},o.prototype.modrn=function(e){var t=e<0;t&&(e=-e),i(e<=67108863);for(var r=(1<<26)%e,n=0,o=this.length-1;o>=0;o--)n=(r*n+(0|this.words[o]))%e;return t?-n:n},o.prototype.modn=function(e){return this.modrn(e)},o.prototype.idivn=function(e){var t=e<0;t&&(e=-e),i(e<=67108863);for(var r=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*r;this.words[n]=o/e|0,r=o%e}return this._strip(),t?this.ineg():this},o.prototype.divn=function(e){return this.clone().idivn(e)},o.prototype.egcd=function(e){i(0===e.negative),i(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n=new o(1),a=new o(0),s=new o(0),f=new o(1),c=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++c;for(var h=r.clone(),d=t.clone();!t.isZero();){for(var u=0,l=1;0==(t.words[0]&l)&&u<26;++u,l<<=1);if(u>0)for(t.iushrn(u);u-- >0;)(n.isOdd()||a.isOdd())&&(n.iadd(h),a.isub(d)),n.iushrn(1),a.iushrn(1);for(var p=0,b=1;0==(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||f.isOdd())&&(s.iadd(h),f.isub(d)),s.iushrn(1),f.iushrn(1);t.cmp(r)>=0?(t.isub(r),n.isub(s),a.isub(f)):(r.isub(t),s.isub(n),f.isub(a))}return{a:s,b:f,gcd:r.iushln(c)}},o.prototype._invmp=function(e){i(0===e.negative),i(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n,a=new o(1),s=new o(0),f=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,h=1;0==(t.words[0]&h)&&c<26;++c,h<<=1);if(c>0)for(t.iushrn(c);c-- >0;)a.isOdd()&&a.iadd(f),a.iushrn(1);for(var d=0,u=1;0==(r.words[0]&u)&&d<26;++d,u<<=1);if(d>0)for(r.iushrn(d);d-- >0;)s.isOdd()&&s.iadd(f),s.iushrn(1);t.cmp(r)>=0?(t.isub(r),a.isub(s)):(r.isub(t),s.isub(a))}return(n=0===t.cmpn(1)?a:s).cmpn(0)<0&&n.iadd(e),n},o.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var i=0;t.isEven()&&r.isEven();i++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=t.cmp(r);if(n<0){var o=t;t=r,r=o}else if(0===n||0===r.cmpn(1))break;t.isub(r)}return r.iushln(i)},o.prototype.invm=function(e){return this.egcd(e).a.umod(e)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(e){return this.words[0]&e},o.prototype.bincn=function(e){i("number"==typeof e);var t=e%26,r=(e-t)/26,n=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=n,this;for(var o=n,a=r;0!==o&&a<this.length;a++){var s=0|this.words[a];o=(s+=o)>>>26,s&=67108863,this.words[a]=s}return 0!==o&&(this.words[a]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)t=1;else{r&&(e=-e),i(e<=67108863,"Number is too big");var n=0|this.words[0];t=n===e?0:n<e?-1:1}return 0!==this.negative?0|-t:t},o.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},o.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|e.words[r];if(i!==n){i<n?t=-1:i>n&&(t=1);break}}return t},o.prototype.gtn=function(e){return 1===this.cmpn(e)},o.prototype.gt=function(e){return 1===this.cmp(e)},o.prototype.gten=function(e){return this.cmpn(e)>=0},o.prototype.gte=function(e){return this.cmp(e)>=0},o.prototype.ltn=function(e){return-1===this.cmpn(e)},o.prototype.lt=function(e){return-1===this.cmp(e)},o.prototype.lten=function(e){return this.cmpn(e)<=0},o.prototype.lte=function(e){return this.cmp(e)<=0},o.prototype.eqn=function(e){return 0===this.cmpn(e)},o.prototype.eq=function(e){return 0===this.cmp(e)},o.red=function(e){return new k(e)},o.prototype.toRed=function(e){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},o.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(e){return this.red=e,this},o.prototype.forceRed=function(e){return i(!this.red,"Already a number in reduction context"),this._forceRed(e)},o.prototype.redAdd=function(e){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},o.prototype.redIAdd=function(e){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},o.prototype.redSub=function(e){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},o.prototype.redISub=function(e){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},o.prototype.redShl=function(e){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},o.prototype.redMul=function(e){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},o.prototype.redIMul=function(e){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},o.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(e){return i(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var m={k256:null,p224:null,p192:null,p25519:null};function _(e,t){this.name=e,this.p=new o(t,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){_.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function S(){_.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function E(){_.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){_.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function k(e){if("string"==typeof e){var t=o._prime(e);this.m=t.p,this.prime=t}else i(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function A(e){k.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}_.prototype._tmp=function(){var e=new o(null);return e.words=new Array(Math.ceil(this.n/13)),e},_.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var i=t<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):r._strip(),r},_.prototype.split=function(e,t){e.iushrn(this.n,0,t)},_.prototype.imulK=function(e){return e.imul(this.k)},n(w,_),w.prototype.split=function(e,t){for(var r=Math.min(e.length,9),i=0;i<r;i++)t.words[i]=e.words[i];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var n=e.words[9];for(t.words[t.length++]=4194303&n,i=10;i<e.length;i++){var o=0|e.words[i];e.words[i-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,e.words[i-10]=n,0===n&&e.length>10?e.length-=10:e.length-=9},w.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var i=0|e.words[r];t+=977*i,e.words[r]=67108863&t,t=64*i+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},n(S,_),n(E,_),n(M,_),M.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var i=19*(0|e.words[r])+t,n=67108863&i;i>>>=26,e.words[r]=n,t=i}return 0!==t&&(e.words[e.length++]=t),e},o._prime=function(e){if(m[e])return m[e];var t;if("k256"===e)t=new w;else if("p224"===e)t=new S;else if("p192"===e)t=new E;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new M}return m[e]=t,t},k.prototype._verify1=function(e){i(0===e.negative,"red works only with positives"),i(e.red,"red works only with red numbers")},k.prototype._verify2=function(e,t){i(0==(e.negative|t.negative),"red works only with positives"),i(e.red&&e.red===t.red,"red works only with red numbers")},k.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):(c(e,e.umod(this.m)._forceRed(this)),e)},k.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},k.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},k.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},k.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},k.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},k.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},k.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},k.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},k.prototype.isqr=function(e){return this.imul(e,e.clone())},k.prototype.sqr=function(e){return this.mul(e,e)},k.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(i(t%2==1),3===t){var r=this.m.add(new o(1)).iushrn(2);return this.pow(e,r)}for(var n=this.m.subn(1),a=0;!n.isZero()&&0===n.andln(1);)a++,n.iushrn(1);i(!n.isZero());var s=new o(1).toRed(this),f=s.redNeg(),c=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,c).cmp(f);)h.redIAdd(f);for(var d=this.pow(h,n),u=this.pow(e,n.addn(1).iushrn(1)),l=this.pow(e,n),p=a;0!==l.cmp(s);){for(var b=l,y=0;0!==b.cmp(s);y++)b=b.redSqr();i(y<p);var v=this.pow(d,new o(1).iushln(p-y-1));u=u.redMul(v),d=v.redSqr(),l=l.redMul(d),p=y}return u},k.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},k.prototype.pow=function(e,t){if(t.isZero())return new o(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=e;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],e);var n=r[0],a=0,s=0,f=t.bitLength()%26;for(0===f&&(f=26),i=t.length-1;i>=0;i--){for(var c=t.words[i],h=f-1;h>=0;h--){var d=c>>h&1;n!==r[0]&&(n=this.sqr(n)),0!==d||0!==a?(a<<=1,a|=d,(4===++s||0===i&&0===h)&&(n=this.mul(n,r[a]),s=0,a=0)):s=0}f=26}return n},k.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},k.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},o.mont=function(e){return new A(e)},n(A,k),A.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},A.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},A.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},A.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new o(0)._forceRed(this);var r=e.mul(t),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),a=n;return n.cmp(this.m)>=0?a=n.isub(this.m):n.cmpn(0)<0&&(a=n.iadd(this.m)),a._forceRed(this)},A.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,r(134)(e))},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var i=r(97),n=r(98),o=r(52);function a(){return f.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return f.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=f.prototype:(null===e&&(e=new f(t)),e.length=t),e}function f(e,t,r){if(!(f.TYPED_ARRAY_SUPPORT||this instanceof f))return new f(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return c(this,e,t,r)}function c(e,t,r,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,i){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,r):new Uint8Array(t,r,i);f.TYPED_ARRAY_SUPPORT?(e=t).__proto__=f.prototype:e=u(e,t);return e}(e,t,r,i):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!f.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(t,r),n=(e=s(e,i)).write(t,r);n!==i&&(e=e.slice(0,n));return e}(e,t,r):function(e,t){if(f.isBuffer(t)){var r=0|l(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?s(e,0):u(e,t);if("Buffer"===t.type&&o(t.data))return u(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t){if(h(t),e=s(e,t<0?0:0|l(t)),!f.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function u(e,t){var r=t.length<0?0:0|l(t.length);e=s(e,r);for(var i=0;i<r;i+=1)e[i]=255&t[i];return e}function l(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(f.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(e).length;default:if(i)return U(e).length;t=(""+t).toLowerCase(),i=!0}}function b(e,t,r){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return x(this,t,r);case"latin1":case"binary":return B(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function y(e,t,r){var i=e[t];e[t]=e[r],e[r]=i}function v(e,t,r,i,n){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=n?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(n)return-1;r=e.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof t&&(t=f.from(t,i)),f.isBuffer(t))return 0===t.length?-1:g(e,t,r,i,n);if("number"==typeof t)return t&=255,f.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,i,n);throw new TypeError("val must be string, number or Buffer")}function g(e,t,r,i,n){var o,a=1,s=e.length,f=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;a=2,s/=2,f/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(n){var h=-1;for(o=r;o<s;o++)if(c(e,o)===c(t,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===f)return h*a}else-1!==h&&(o-=o-h),h=-1}else for(r+f>s&&(r=s-f),o=r;o>=0;o--){for(var d=!0,u=0;u<f;u++)if(c(e,o+u)!==c(t,u)){d=!1;break}if(d)return o}return-1}function m(e,t,r,i){r=Number(r)||0;var n=e.length-r;i?(i=Number(i))>n&&(i=n):i=n;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");i>o/2&&(i=o/2);for(var a=0;a<i;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function _(e,t,r,i){return H(U(t,e.length-r),e,r,i)}function w(e,t,r,i){return H(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,i)}function S(e,t,r,i){return w(e,t,r,i)}function E(e,t,r,i){return H(q(t),e,r,i)}function M(e,t,r,i){return H(function(e,t){for(var r,i,n,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),i=r>>8,n=r%256,o.push(n),o.push(i);return o}(t,e.length-r),e,r,i)}function k(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);for(var i=[],n=t;n<r;){var o,a,s,f,c=e[n],h=null,d=c>239?4:c>223?3:c>191?2:1;if(n+d<=r)switch(d){case 1:c<128&&(h=c);break;case 2:128==(192&(o=e[n+1]))&&(f=(31&c)<<6|63&o)>127&&(h=f);break;case 3:o=e[n+1],a=e[n+2],128==(192&o)&&128==(192&a)&&(f=(15&c)<<12|(63&o)<<6|63&a)>2047&&(f<55296||f>57343)&&(h=f);break;case 4:o=e[n+1],a=e[n+2],s=e[n+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(f=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&f<1114112&&(h=f)}null===h?(h=65533,d=1):h>65535&&(h-=65536,i.push(h>>>10&1023|55296),h=56320|1023&h),i.push(h),n+=d}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",i=0;for(;i<t;)r+=String.fromCharCode.apply(String,e.slice(i,i+=4096));return r}(i)}t.Buffer=f,t.SlowBuffer=function(e){+e!=e&&(e=0);return f.alloc(+e)},t.INSPECT_MAX_BYTES=50,f.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),f.poolSize=8192,f._augment=function(e){return e.__proto__=f.prototype,e},f.from=function(e,t,r){return c(null,e,t,r)},f.TYPED_ARRAY_SUPPORT&&(f.prototype.__proto__=Uint8Array.prototype,f.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&f[Symbol.species]===f&&Object.defineProperty(f,Symbol.species,{value:null,configurable:!0})),f.alloc=function(e,t,r){return function(e,t,r,i){return h(t),t<=0?s(e,t):void 0!==r?"string"==typeof i?s(e,t).fill(r,i):s(e,t).fill(r):s(e,t)}(null,e,t,r)},f.allocUnsafe=function(e){return d(null,e)},f.allocUnsafeSlow=function(e){return d(null,e)},f.isBuffer=function(e){return!(null==e||!e._isBuffer)},f.compare=function(e,t){if(!f.isBuffer(e)||!f.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,i=t.length,n=0,o=Math.min(r,i);n<o;++n)if(e[n]!==t[n]){r=e[n],i=t[n];break}return r<i?-1:i<r?1:0},f.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return f.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var i=f.allocUnsafe(t),n=0;for(r=0;r<e.length;++r){var a=e[r];if(!f.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,n),n+=a.length}return i},f.byteLength=p,f.prototype._isBuffer=!0,f.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},f.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},f.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},f.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):b.apply(this,arguments)},f.prototype.equals=function(e){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===f.compare(this,e)},f.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},f.prototype.compare=function(e,t,r,i,n){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===n&&(n=this.length),t<0||r>e.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&t>=r)return 0;if(i>=n)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(n>>>=0)-(i>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),c=this.slice(i,n),h=e.slice(t,r),d=0;d<s;++d)if(c[d]!==h[d]){o=c[d],a=h[d];break}return o<a?-1:a<o?1:0},f.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},f.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},f.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},f.prototype.write=function(e,t,r,i){if(void 0===t)i="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)i=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}var n=this.length-t;if((void 0===r||r>n)&&(r=n),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return m(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return S(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function x(e,t,r){var i="";r=Math.min(e.length,r);for(var n=t;n<r;++n)i+=String.fromCharCode(127&e[n]);return i}function B(e,t,r){var i="";r=Math.min(e.length,r);for(var n=t;n<r;++n)i+=String.fromCharCode(e[n]);return i}function I(e,t,r){var i=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>i)&&(r=i);for(var n="",o=t;o<r;++o)n+=L(e[o]);return n}function R(e,t,r){for(var i=e.slice(t,r),n="",o=0;o<i.length;o+=2)n+=String.fromCharCode(i[o]+256*i[o+1]);return n}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,r,i,n,o){if(!f.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<o)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function T(e,t,r,i){t<0&&(t=65535+t+1);for(var n=0,o=Math.min(e.length-r,2);n<o;++n)e[r+n]=(t&255<<8*(i?n:1-n))>>>8*(i?n:1-n)}function O(e,t,r,i){t<0&&(t=4294967295+t+1);for(var n=0,o=Math.min(e.length-r,4);n<o;++n)e[r+n]=t>>>8*(i?n:3-n)&255}function j(e,t,r,i,n,o){if(r+i>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,r,i,o){return o||j(e,0,r,4),n.write(e,t,r,i,23,4),r+4}function N(e,t,r,i,o){return o||j(e,0,r,8),n.write(e,t,r,i,52,8),r+8}f.prototype.slice=function(e,t){var r,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),f.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=f.prototype;else{var n=t-e;r=new f(n,void 0);for(var o=0;o<n;++o)r[o]=this[o+e]}return r},f.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var i=this[e],n=1,o=0;++o<t&&(n*=256);)i+=this[e+o]*n;return i},f.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var i=this[e+--t],n=1;t>0&&(n*=256);)i+=this[e+--t]*n;return i},f.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},f.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},f.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},f.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},f.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},f.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var i=this[e],n=1,o=0;++o<t&&(n*=256);)i+=this[e+o]*n;return i>=(n*=128)&&(i-=Math.pow(2,8*t)),i},f.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var i=t,n=1,o=this[e+--i];i>0&&(n*=256);)o+=this[e+--i]*n;return o>=(n*=128)&&(o-=Math.pow(2,8*t)),o},f.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},f.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},f.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},f.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),n.read(this,e,!0,23,4)},f.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),n.read(this,e,!1,23,4)},f.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),n.read(this,e,!0,52,8)},f.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),n.read(this,e,!1,52,8)},f.prototype.writeUIntLE=function(e,t,r,i){(e=+e,t|=0,r|=0,i)||P(this,e,t,r,Math.pow(2,8*r)-1,0);var n=1,o=0;for(this[t]=255&e;++o<r&&(n*=256);)this[t+o]=e/n&255;return t+r},f.prototype.writeUIntBE=function(e,t,r,i){(e=+e,t|=0,r|=0,i)||P(this,e,t,r,Math.pow(2,8*r)-1,0);var n=r-1,o=1;for(this[t+n]=255&e;--n>=0&&(o*=256);)this[t+n]=e/o&255;return t+r},f.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,1,255,0),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},f.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):T(this,e,t,!0),t+2},f.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):T(this,e,t,!1),t+2},f.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):O(this,e,t,!0),t+4},f.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},f.prototype.writeIntLE=function(e,t,r,i){if(e=+e,t|=0,!i){var n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},f.prototype.writeIntBE=function(e,t,r,i){if(e=+e,t|=0,!i){var n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},f.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,1,127,-128),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},f.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):T(this,e,t,!0),t+2},f.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):T(this,e,t,!1),t+2},f.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,2147483647,-2147483648),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):O(this,e,t,!0),t+4},f.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},f.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},f.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},f.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},f.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},f.prototype.copy=function(e,t,r,i){if(r||(r=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-r&&(i=e.length-t+r);var n,o=i-r;if(this===e&&r<t&&t<i)for(n=o-1;n>=0;--n)e[n+t]=this[n+r];else if(o<1e3||!f.TYPED_ARRAY_SUPPORT)for(n=0;n<o;++n)e[n+t]=this[n+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},f.prototype.fill=function(e,t,r,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===e.length){var n=e.charCodeAt(0);n<256&&(e=n)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!f.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=f.isBuffer(e)?e:U(new f(e,i).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var r;t=t||1/0;for(var i=e.length,n=null,o=[],a=0;a<i;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!n){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===i){(t-=3)>-1&&o.push(239,191,189);continue}n=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(t-=3)>-1&&o.push(239,191,189);if(n=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,r,i){for(var n=0;n<i&&!(n+r>=t.length||n>=e.length);++n)t[n+r]=e[n];return n}}).call(this,r(8))},function(e,t,r){var i,n,o,a,s,f,c,h,d,u,l,p,b,y,v,g,m,_,w;e.exports=(i=r(2),r(13),void(i.lib.Cipher||(n=i,o=n.lib,a=o.Base,s=o.WordArray,f=o.BufferedBlockAlgorithm,c=n.enc,c.Utf8,h=c.Base64,d=n.algo.EvpKDF,u=o.Cipher=f.extend({cfg:a.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,r){this.cfg=this.cfg.extend(r),this._xformMode=e,this._key=t,this.reset()},reset:function(){f.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?w:m}return function(t){return{encrypt:function(r,i,n){return e(i).encrypt(t,r,i,n)},decrypt:function(r,i,n){return e(i).decrypt(t,r,i,n)}}}}()}),o.StreamCipher=u.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),l=n.mode={},p=o.BlockCipherMode=a.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),b=l.CBC=function(){var e=p.extend();function t(e,t,r){var i,n=this._iv;n?(i=n,this._iv=void 0):i=this._prevBlock;for(var o=0;o<r;o++)e[t+o]^=i[o]}return e.Encryptor=e.extend({processBlock:function(e,r){var i=this._cipher,n=i.blockSize;t.call(this,e,r,n),i.encryptBlock(e,r),this._prevBlock=e.slice(r,r+n)}}),e.Decryptor=e.extend({processBlock:function(e,r){var i=this._cipher,n=i.blockSize,o=e.slice(r,r+n);i.decryptBlock(e,r),t.call(this,e,r,n),this._prevBlock=o}}),e}(),y=(n.pad={}).Pkcs7={pad:function(e,t){for(var r=4*t,i=r-e.sigBytes%r,n=i<<24|i<<16|i<<8|i,o=[],a=0;a<i;a+=4)o.push(n);var f=s.create(o,i);e.concat(f)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},o.BlockCipher=u.extend({cfg:u.cfg.extend({mode:b,padding:y}),reset:function(){var e;u.reset.call(this);var t=this.cfg,r=t.iv,i=t.mode;this._xformMode==this._ENC_XFORM_MODE?e=i.createEncryptor:(e=i.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,r&&r.words):(this._mode=e.call(i,this,r&&r.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4}),v=o.CipherParams=a.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),g=(n.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,r=e.salt;return(r?s.create([1398893684,1701076831]).concat(r).concat(t):t).toString(h)},parse:function(e){var t,r=h.parse(e),i=r.words;return 1398893684==i[0]&&1701076831==i[1]&&(t=s.create(i.slice(2,4)),i.splice(0,4),r.sigBytes-=16),v.create({ciphertext:r,salt:t})}},m=o.SerializableCipher=a.extend({cfg:a.extend({format:g}),encrypt:function(e,t,r,i){i=this.cfg.extend(i);var n=e.createEncryptor(r,i),o=n.finalize(t),a=n.cfg;return v.create({ciphertext:o,key:r,iv:a.iv,algorithm:e,mode:a.mode,padding:a.padding,blockSize:e.blockSize,formatter:i.format})},decrypt:function(e,t,r,i){return i=this.cfg.extend(i),t=this._parse(t,i.format),e.createDecryptor(r,i).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),_=(n.kdf={}).OpenSSL={execute:function(e,t,r,i){i||(i=s.random(8));var n=d.create({keySize:t+r}).compute(e,i),o=s.create(n.words.slice(t),4*r);return n.sigBytes=4*t,v.create({key:n,iv:o,salt:i})}},w=o.PasswordBasedCipher=m.extend({cfg:m.cfg.extend({kdf:_}),encrypt:function(e,t,r,i){var n=(i=this.cfg.extend(i)).kdf.execute(r,e.keySize,e.ivSize);i.iv=n.iv;var o=m.encrypt.call(this,e,t,n.key,i);return o.mixIn(n),o},decrypt:function(e,t,r,i){i=this.cfg.extend(i),t=this._parse(t,i.format);var n=i.kdf.execute(r,e.keySize,e.ivSize,t.salt);return i.iv=n.iv,m.decrypt.call(this,e,t,n.key,i)}}))))},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t,r){"use strict";var i=t,n=r(3),o=r(6),a=r(76);i.assert=o,i.toArray=a.toArray,i.zero2=a.zero2,i.toHex=a.toHex,i.encode=a.encode,i.getNAF=function(e,t,r){var i=new Array(Math.max(e.bitLength(),r)+1);i.fill(0);for(var n=1<<t+1,o=e.clone(),a=0;a<i.length;a++){var s,f=o.andln(n-1);o.isOdd()?(s=f>(n>>1)-1?(n>>1)-f:f,o.isubn(s)):s=0,i[a]=s,o.iushrn(1)}return i},i.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var i=0,n=0;e.cmpn(-i)>0||t.cmpn(-n)>0;){var o,a,s,f=e.andln(3)+i&3,c=t.andln(3)+n&3;if(3===f&&(f=-1),3===c&&(c=-1),0==(1&f))o=0;else o=3!==(s=e.andln(7)+i&7)&&5!==s||2!==c?f:-f;if(r[0].push(o),0==(1&c))a=0;else a=3!==(s=t.andln(7)+n&7)&&5!==s||2!==f?c:-c;r[1].push(a),2*i===o+1&&(i=1-i),2*n===a+1&&(n=1-n),e.iushrn(1),t.iushrn(1)}return r},i.cachedProperty=function(e,t,r){var i="_"+t;e.prototype[t]=function(){return void 0!==this[i]?this[i]:this[i]=r.call(this)}},i.parseBytes=function(e){return"string"==typeof e?i.toArray(e,"hex"):e},i.intFromLE=function(e){return new n(e,"hex","le")}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var i=r(6),n=r(0);function o(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function a(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function s(e){return 1===e.length?"0"+e:e}function f(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=n,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(var i=0,n=0;n<e.length;n++){var a=e.charCodeAt(n);a<128?r[i++]=a:a<2048?(r[i++]=a>>6|192,r[i++]=63&a|128):o(e,n)?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++n)),r[i++]=a>>18|240,r[i++]=a>>12&63|128,r[i++]=a>>6&63|128,r[i++]=63&a|128):(r[i++]=a>>12|224,r[i++]=a>>6&63|128,r[i++]=63&a|128)}else for(n=0;n<e.length;n++)r[n]=0|e[n];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=s(e[r].toString(16));return t},t.htonl=a,t.toHex32=function(e,t){for(var r="",i=0;i<e.length;i++){var n=e[i];"little"===t&&(n=a(n)),r+=f(n.toString(16))}return r},t.zero2=s,t.zero8=f,t.join32=function(e,t,r,n){var o=r-t;i(o%4==0);for(var a=new Array(o/4),s=0,f=t;s<a.length;s++,f+=4){var c;c="big"===n?e[f]<<24|e[f+1]<<16|e[f+2]<<8|e[f+3]:e[f+3]<<24|e[f+2]<<16|e[f+1]<<8|e[f],a[s]=c>>>0}return a},t.split32=function(e,t){for(var r=new Array(4*e.length),i=0,n=0;i<e.length;i++,n+=4){var o=e[i];"big"===t?(r[n]=o>>>24,r[n+1]=o>>>16&255,r[n+2]=o>>>8&255,r[n+3]=255&o):(r[n+3]=o>>>24,r[n+2]=o>>>16&255,r[n+1]=o>>>8&255,r[n]=255&o)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,i){return e+t+r+i>>>0},t.sum32_5=function(e,t,r,i,n){return e+t+r+i+n>>>0},t.sum64=function(e,t,r,i){var n=e[t],o=i+e[t+1]>>>0,a=(o<i?1:0)+r+n;e[t]=a>>>0,e[t+1]=o},t.sum64_hi=function(e,t,r,i){return(t+i>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,i){return t+i>>>0},t.sum64_4_hi=function(e,t,r,i,n,o,a,s){var f=0,c=t;return f+=(c=c+i>>>0)<t?1:0,f+=(c=c+o>>>0)<o?1:0,e+r+n+a+(f+=(c=c+s>>>0)<s?1:0)>>>0},t.sum64_4_lo=function(e,t,r,i,n,o,a,s){return t+i+o+s>>>0},t.sum64_5_hi=function(e,t,r,i,n,o,a,s,f,c){var h=0,d=t;return h+=(d=d+i>>>0)<t?1:0,h+=(d=d+o>>>0)<o?1:0,h+=(d=d+s>>>0)<s?1:0,e+r+n+a+f+(h+=(d=d+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,r,i,n,o,a,s,f,c){return t+i+o+s+c>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t){var r,i,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var f,c=[],h=!1,d=-1;function u(){h&&f&&(h=!1,f.length?c=f.concat(c):d=-1,c.length&&l())}function l(){if(!h){var e=s(u);h=!0;for(var t=c.length;t;){for(f=c,c=[];++d<t;)f&&f[d].run();d=-1,t=c.length}f=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||h||s(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=b,n.addListener=b,n.once=b,n.off=b,n.removeListener=b,n.removeAllListeners=b,n.emit=b,n.prependListener=b,n.prependOnceListener=b,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,r){var i=r(1).Buffer,n=r(110).Transform,o=r(34).StringDecoder;function a(e){n.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(0)(a,n),a.prototype.update=function(e,t,r){"string"==typeof e&&(e=i.from(e,t));var n=this._update(e);return this.hashMode?this:(r&&(n=this._toString(n,r)),n)},a.prototype.setAutoPadding=function(){},a.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},a.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},a.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},a.prototype._transform=function(e,t,r){var i;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){i=e}finally{r(i)}},a.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},a.prototype._finalOrDigest=function(e){var t=this.__final()||i.alloc(0);return e&&(t=this._toString(t,e,!0)),t},a.prototype._toString=function(e,t,r){if(this._decoder||(this._decoder=new o(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var i=this._decoder.write(e);return r&&(i+=this._decoder.end()),i},e.exports=a},function(e,t,r){"use strict";var i=r(25),n=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=d;var o=Object.create(r(20));o.inherits=r(0);var a=r(54),s=r(33);o.inherits(d,a);for(var f=n(s.prototype),c=0;c<f.length;c++){var h=f[c];d.prototype[h]||(d.prototype[h]=s.prototype[h])}function d(e){if(!(this instanceof d))return new d(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",u)}function u(){this.allowHalfOpen||this._writableState.ended||i.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(d.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(d.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),d.prototype._destroy=function(e,t){this.push(null),this.end(),i.nextTick(t,e)}},function(e,t,r){var i,n,o,a,s,f,c,h;e.exports=(h=r(2),r(45),r(46),n=(i=h).lib,o=n.Base,a=n.WordArray,s=i.algo,f=s.MD5,c=s.EvpKDF=o.extend({cfg:o.extend({keySize:4,hasher:f,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r,i=this.cfg,n=i.hasher.create(),o=a.create(),s=o.words,f=i.keySize,c=i.iterations;s.length<f;){r&&n.update(r),r=n.update(e).finalize(t),n.reset();for(var h=1;h<c;h++)r=n.finalize(r),n.reset();o.concat(r)}return o.sigBytes=4*f,o}}),i.EvpKDF=function(e,t,r){return c.create(r).compute(e,t)},h.EvpKDF)},function(e,t,r){"use strict";(function(t,i){var n=r(1).Buffer,o=t.crypto||t.msCrypto;o&&o.getRandomValues?e.exports=function(e,t){if(e>4294967295)throw new RangeError("requested too many random bytes");var r=n.allocUnsafe(e);if(e>0)if(e>65536)for(var a=0;a<e;a+=65536)o.getRandomValues(r.slice(a,a+65536));else o.getRandomValues(r);if("function"==typeof t)return i.nextTick((function(){t(null,r)}));return r}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(8),r(10))},function(e,t,r){var i=r(1).Buffer;function n(e,t){this._block=i.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}n.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=i.from(e,t));for(var r=this._block,n=this._blockSize,o=e.length,a=this._len,s=0;s<o;){for(var f=a%n,c=Math.min(o-s,n-f),h=0;h<c;h++)r[f+h]=e[s+h];s+=c,(a+=c)%n==0&&this._update(r)}return this._len+=o,this},n.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var i=(4294967295&r)>>>0,n=(r-i)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(i,this._blockSize-4)}this._update(this._block);var o=this._hash();return e?o.toString(e):o},n.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=n},function(e,t,r){var i,n,o;e.exports=(o=r(2),n=(i=o).lib.WordArray,i.enc.Base64={stringify:function(e){var t=e.words,r=e.sigBytes,i=this._map;e.clamp();for(var n=[],o=0;o<r;o+=3)for(var a=(t[o>>>2]>>>24-o%4*8&255)<<16|(t[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|t[o+2>>>2]>>>24-(o+2)%4*8&255,s=0;s<4&&o+.75*s<r;s++)n.push(i.charAt(a>>>6*(3-s)&63));var f=i.charAt(64);if(f)for(;n.length%4;)n.push(f);return n.join("")},parse:function(e){var t=e.length,r=this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var o=0;o<r.length;o++)i[r.charCodeAt(o)]=o}var a=r.charAt(64);if(a){var s=e.indexOf(a);-1!==s&&(t=s)}return function(e,t,r){for(var i=[],o=0,a=0;a<t;a++)if(a%4){var s=r[e.charCodeAt(a-1)]<<a%4*2,f=r[e.charCodeAt(a)]>>>6-a%4*2,c=s|f;i[o>>>2]|=c<<24-o%4*8,o++}return n.create(i,o)}(e,t,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},o.enc.Base64)},function(e,t,r){var i;e.exports=(i=r(2),function(e){var t=i,r=t.lib,n=r.WordArray,o=r.Hasher,a=t.algo,s=[];!function(){for(var t=0;t<64;t++)s[t]=4294967296*e.abs(e.sin(t+1))|0}();var f=a.MD5=o.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var r=0;r<16;r++){var i=t+r,n=e[i];e[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,a=e[t+0],f=e[t+1],l=e[t+2],p=e[t+3],b=e[t+4],y=e[t+5],v=e[t+6],g=e[t+7],m=e[t+8],_=e[t+9],w=e[t+10],S=e[t+11],E=e[t+12],M=e[t+13],k=e[t+14],A=e[t+15],x=o[0],B=o[1],I=o[2],R=o[3];x=c(x,B,I,R,a,7,s[0]),R=c(R,x,B,I,f,12,s[1]),I=c(I,R,x,B,l,17,s[2]),B=c(B,I,R,x,p,22,s[3]),x=c(x,B,I,R,b,7,s[4]),R=c(R,x,B,I,y,12,s[5]),I=c(I,R,x,B,v,17,s[6]),B=c(B,I,R,x,g,22,s[7]),x=c(x,B,I,R,m,7,s[8]),R=c(R,x,B,I,_,12,s[9]),I=c(I,R,x,B,w,17,s[10]),B=c(B,I,R,x,S,22,s[11]),x=c(x,B,I,R,E,7,s[12]),R=c(R,x,B,I,M,12,s[13]),I=c(I,R,x,B,k,17,s[14]),x=h(x,B=c(B,I,R,x,A,22,s[15]),I,R,f,5,s[16]),R=h(R,x,B,I,v,9,s[17]),I=h(I,R,x,B,S,14,s[18]),B=h(B,I,R,x,a,20,s[19]),x=h(x,B,I,R,y,5,s[20]),R=h(R,x,B,I,w,9,s[21]),I=h(I,R,x,B,A,14,s[22]),B=h(B,I,R,x,b,20,s[23]),x=h(x,B,I,R,_,5,s[24]),R=h(R,x,B,I,k,9,s[25]),I=h(I,R,x,B,p,14,s[26]),B=h(B,I,R,x,m,20,s[27]),x=h(x,B,I,R,M,5,s[28]),R=h(R,x,B,I,l,9,s[29]),I=h(I,R,x,B,g,14,s[30]),x=d(x,B=h(B,I,R,x,E,20,s[31]),I,R,y,4,s[32]),R=d(R,x,B,I,m,11,s[33]),I=d(I,R,x,B,S,16,s[34]),B=d(B,I,R,x,k,23,s[35]),x=d(x,B,I,R,f,4,s[36]),R=d(R,x,B,I,b,11,s[37]),I=d(I,R,x,B,g,16,s[38]),B=d(B,I,R,x,w,23,s[39]),x=d(x,B,I,R,M,4,s[40]),R=d(R,x,B,I,a,11,s[41]),I=d(I,R,x,B,p,16,s[42]),B=d(B,I,R,x,v,23,s[43]),x=d(x,B,I,R,_,4,s[44]),R=d(R,x,B,I,E,11,s[45]),I=d(I,R,x,B,A,16,s[46]),x=u(x,B=d(B,I,R,x,l,23,s[47]),I,R,a,6,s[48]),R=u(R,x,B,I,g,10,s[49]),I=u(I,R,x,B,k,15,s[50]),B=u(B,I,R,x,y,21,s[51]),x=u(x,B,I,R,E,6,s[52]),R=u(R,x,B,I,p,10,s[53]),I=u(I,R,x,B,w,15,s[54]),B=u(B,I,R,x,f,21,s[55]),x=u(x,B,I,R,m,6,s[56]),R=u(R,x,B,I,A,10,s[57]),I=u(I,R,x,B,v,15,s[58]),B=u(B,I,R,x,M,21,s[59]),x=u(x,B,I,R,b,6,s[60]),R=u(R,x,B,I,S,10,s[61]),I=u(I,R,x,B,l,15,s[62]),B=u(B,I,R,x,_,21,s[63]),o[0]=o[0]+x|0,o[1]=o[1]+B|0,o[2]=o[2]+I|0,o[3]=o[3]+R|0},_doFinalize:function(){var t=this._data,r=t.words,i=8*this._nDataBytes,n=8*t.sigBytes;r[n>>>5]|=128<<24-n%32;var o=e.floor(i/4294967296),a=i;r[15+(n+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),r[14+(n+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),t.sigBytes=4*(r.length+1),this._process();for(var s=this._hash,f=s.words,c=0;c<4;c++){var h=f[c];f[c]=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8)}return s},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});function c(e,t,r,i,n,o,a){var s=e+(t&r|~t&i)+n+a;return(s<<o|s>>>32-o)+t}function h(e,t,r,i,n,o,a){var s=e+(t&i|r&~i)+n+a;return(s<<o|s>>>32-o)+t}function d(e,t,r,i,n,o,a){var s=e+(t^r^i)+n+a;return(s<<o|s>>>32-o)+t}function u(e,t,r,i,n,o,a){var s=e+(r^(t|~i))+n+a;return(s<<o|s>>>32-o)+t}t.MD5=o._createHelper(f),t.HmacMD5=o._createHmacHelper(f)}(Math),i.MD5)},function(e,t,r){"use strict";var i=r(0),n=r(31),o=r(35),a=r(36),s=r(11);function f(e){s.call(this,"digest"),this._hash=e}i(f,s),f.prototype._update=function(e){this._hash.update(e)},f.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new n:"rmd160"===e||"ripemd160"===e?new o:new f(a(e))}},function(e,t,r){(t=e.exports=r(54)).Stream=t,t.Readable=t,t.Writable=r(33),t.Duplex=r(12),t.Transform=r(57),t.PassThrough=r(105)},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(4).Buffer)},function(e,t,r){(function(t){e.exports=function(e,r){for(var i=Math.min(e.length,r.length),n=new t(i),o=0;o<i;++o)n[o]=e[o]^r[o];return n}}).call(this,r(4).Buffer)},function(e,t,r){"use strict";var i=r(9),n=r(6);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=o,o.prototype.update=function(e,t){if(e=i.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=i.join32(e,0,e.length-r,this.endian);for(var n=0;n<e.length;n+=this._delta32)this._update(e,n,n+this._delta32)}return this},o.prototype.digest=function(e){return this.update(this._pad()),n(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,i=new Array(r+this.padLength);i[0]=128;for(var n=1;n<r;n++)i[n]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)i[n++]=0;i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=e>>>24&255,i[n++]=e>>>16&255,i[n++]=e>>>8&255,i[n++]=255&e}else for(i[n++]=255&e,i[n++]=e>>>8&255,i[n++]=e>>>16&255,i[n++]=e>>>24&255,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,o=8;o<this.padLength;o++)i[n++]=0;return i}},function(e,t,r){var i=t;i.bignum=r(3),i.define=r(160).define,i.base=r(24),i.constants=r(82),i.decoders=r(165),i.encoders=r(167)},function(e,t,r){var i=t;i.Reporter=r(162).Reporter,i.DecoderBuffer=r(81).DecoderBuffer,i.EncoderBuffer=r(81).EncoderBuffer,i.Node=r(163)},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,i,n){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,i)}));case 4:return t.nextTick((function(){e.call(null,r,i,n)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(this,r(10))},function(e,t,r){var i=r(1).Buffer;function n(e){i.isBuffer(e)||(e=i.from(e));for(var t=e.length/4|0,r=new Array(t),n=0;n<t;n++)r[n]=e.readUInt32BE(4*n);return r}function o(e){for(;0<e.length;e++)e[0]=0}function a(e,t,r,i,n){for(var o,a,s,f,c=r[0],h=r[1],d=r[2],u=r[3],l=e[0]^t[0],p=e[1]^t[1],b=e[2]^t[2],y=e[3]^t[3],v=4,g=1;g<n;g++)o=c[l>>>24]^h[p>>>16&255]^d[b>>>8&255]^u[255&y]^t[v++],a=c[p>>>24]^h[b>>>16&255]^d[y>>>8&255]^u[255&l]^t[v++],s=c[b>>>24]^h[y>>>16&255]^d[l>>>8&255]^u[255&p]^t[v++],f=c[y>>>24]^h[l>>>16&255]^d[p>>>8&255]^u[255&b]^t[v++],l=o,p=a,b=s,y=f;return o=(i[l>>>24]<<24|i[p>>>16&255]<<16|i[b>>>8&255]<<8|i[255&y])^t[v++],a=(i[p>>>24]<<24|i[b>>>16&255]<<16|i[y>>>8&255]<<8|i[255&l])^t[v++],s=(i[b>>>24]<<24|i[y>>>16&255]<<16|i[l>>>8&255]<<8|i[255&p])^t[v++],f=(i[y>>>24]<<24|i[l>>>16&255]<<16|i[p>>>8&255]<<8|i[255&b])^t[v++],[o>>>=0,a>>>=0,s>>>=0,f>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],f=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var r=[],i=[],n=[[],[],[],[]],o=[[],[],[],[]],a=0,s=0,f=0;f<256;++f){var c=s^s<<1^s<<2^s<<3^s<<4;c=c>>>8^255&c^99,r[a]=c,i[c]=a;var h=e[a],d=e[h],u=e[d],l=257*e[c]^16843008*c;n[0][a]=l<<24|l>>>8,n[1][a]=l<<16|l>>>16,n[2][a]=l<<8|l>>>24,n[3][a]=l,l=16843009*u^65537*d^257*h^16843008*a,o[0][c]=l<<24|l>>>8,o[1][c]=l<<16|l>>>16,o[2][c]=l<<8|l>>>24,o[3][c]=l,0===a?a=s=1:(a=h^e[e[e[u^h]]],s^=e[e[s]])}return{SBOX:r,INV_SBOX:i,SUB_MIX:n,INV_SUB_MIX:o}}();function c(e){this._key=n(e),this._reset()}c.blockSize=16,c.keySize=32,c.prototype.blockSize=c.blockSize,c.prototype.keySize=c.keySize,c.prototype._reset=function(){for(var e=this._key,t=e.length,r=t+6,i=4*(r+1),n=[],o=0;o<t;o++)n[o]=e[o];for(o=t;o<i;o++){var a=n[o-1];o%t==0?(a=a<<8|a>>>24,a=f.SBOX[a>>>24]<<24|f.SBOX[a>>>16&255]<<16|f.SBOX[a>>>8&255]<<8|f.SBOX[255&a],a^=s[o/t|0]<<24):t>6&&o%t==4&&(a=f.SBOX[a>>>24]<<24|f.SBOX[a>>>16&255]<<16|f.SBOX[a>>>8&255]<<8|f.SBOX[255&a]),n[o]=n[o-t]^a}for(var c=[],h=0;h<i;h++){var d=i-h,u=n[d-(h%4?0:4)];c[h]=h<4||d<=4?u:f.INV_SUB_MIX[0][f.SBOX[u>>>24]]^f.INV_SUB_MIX[1][f.SBOX[u>>>16&255]]^f.INV_SUB_MIX[2][f.SBOX[u>>>8&255]]^f.INV_SUB_MIX[3][f.SBOX[255&u]]}this._nRounds=r,this._keySchedule=n,this._invKeySchedule=c},c.prototype.encryptBlockRaw=function(e){return a(e=n(e),this._keySchedule,f.SUB_MIX,f.SBOX,this._nRounds)},c.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),r=i.allocUnsafe(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r},c.prototype.decryptBlock=function(e){var t=(e=n(e))[1];e[1]=e[3],e[3]=t;var r=a(e,this._invKeySchedule,f.INV_SUB_MIX,f.INV_SBOX,this._nRounds),o=i.allocUnsafe(16);return o.writeUInt32BE(r[0],0),o.writeUInt32BE(r[3],4),o.writeUInt32BE(r[2],8),o.writeUInt32BE(r[1],12),o},c.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},e.exports.AES=c},function(e,t,r){var i=r(1).Buffer,n=r(31);e.exports=function(e,t,r,o){if(i.isBuffer(e)||(e=i.from(e,"binary")),t&&(i.isBuffer(t)||(t=i.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var a=r/8,s=i.alloc(a),f=i.alloc(o||0),c=i.alloc(0);a>0||o>0;){var h=new n;h.update(c),h.update(e),t&&h.update(t),c=h.digest();var d=0;if(a>0){var u=s.length-a;d=Math.min(a,c.length),c.copy(s,u,0,d),a-=d}if(d<c.length&&o>0){var l=f.length-o,p=Math.min(o,c.length-d);c.copy(f,l,d,d+p),o-=p}}return c.fill(0),{key:s,iv:f}}},function(e,t,r){"use strict";var i=r(3),n=r(7),o=n.getNAF,a=n.getJSF,s=n.assert;function f(e,t){this.type=e,this.p=new i(t.p,16),this.red=t.prime?i.red(t.prime):i.mont(this.p),this.zero=new i(0).toRed(this.red),this.one=new i(1).toRed(this.red),this.two=new i(2).toRed(this.red),this.n=t.n&&new i(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=f,f.prototype.point=function(){throw new Error("Not implemented")},f.prototype.validate=function(){throw new Error("Not implemented")},f.prototype._fixedNafMul=function(e,t){s(e.precomputed);var r=e._getDoubles(),i=o(t,1,this._bitLength),n=(1<<r.step+1)-(r.step%2==0?2:1);n/=3;for(var a=[],f=0;f<i.length;f+=r.step){var c=0;for(t=f+r.step-1;t>=f;t--)c=(c<<1)+i[t];a.push(c)}for(var h=this.jpoint(null,null,null),d=this.jpoint(null,null,null),u=n;u>0;u--){for(f=0;f<a.length;f++){(c=a[f])===u?d=d.mixedAdd(r.points[f]):c===-u&&(d=d.mixedAdd(r.points[f].neg()))}h=h.add(d)}return h.toP()},f.prototype._wnafMul=function(e,t){var r=4,i=e._getNAFPoints(r);r=i.wnd;for(var n=i.points,a=o(t,r,this._bitLength),f=this.jpoint(null,null,null),c=a.length-1;c>=0;c--){for(t=0;c>=0&&0===a[c];c--)t++;if(c>=0&&t++,f=f.dblp(t),c<0)break;var h=a[c];s(0!==h),f="affine"===e.type?h>0?f.mixedAdd(n[h-1>>1]):f.mixedAdd(n[-h-1>>1].neg()):h>0?f.add(n[h-1>>1]):f.add(n[-h-1>>1].neg())}return"affine"===e.type?f.toP():f},f.prototype._wnafMulAdd=function(e,t,r,i,n){for(var s=this._wnafT1,f=this._wnafT2,c=this._wnafT3,h=0,d=0;d<i;d++){var u=(k=t[d])._getNAFPoints(e);s[d]=u.wnd,f[d]=u.points}for(d=i-1;d>=1;d-=2){var l=d-1,p=d;if(1===s[l]&&1===s[p]){var b=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(b[1]=t[l].add(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].add(t[p].neg())):(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],v=a(r[l],r[p]);h=Math.max(v[0].length,h),c[l]=new Array(h),c[p]=new Array(h);for(var g=0;g<h;g++){var m=0|v[0][g],_=0|v[1][g];c[l][g]=y[3*(m+1)+(_+1)],c[p][g]=0,f[l]=b}}else c[l]=o(r[l],s[l],this._bitLength),c[p]=o(r[p],s[p],this._bitLength),h=Math.max(c[l].length,h),h=Math.max(c[p].length,h)}var w=this.jpoint(null,null,null),S=this._wnafT4;for(d=h;d>=0;d--){for(var E=0;d>=0;){var M=!0;for(g=0;g<i;g++)S[g]=0|c[g][d],0!==S[g]&&(M=!1);if(!M)break;E++,d--}if(d>=0&&E++,w=w.dblp(E),d<0)break;for(g=0;g<i;g++){var k,A=S[g];0!==A&&(A>0?k=f[g][A-1>>1]:A<0&&(k=f[g][-A-1>>1].neg()),w="affine"===k.type?w.mixedAdd(k):w.add(k))}}for(d=0;d<i;d++)f[d]=null;return n?w:w.toP()},f.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},f.prototype.decodePoint=function(e,t){e=n.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?s(e[e.length-1]%2==0):7===e[0]&&s(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(e){return this.encode(e,!0)},c.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},c.prototype.encode=function(e,t){return n.encode(this._encode(t),e)},c.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},c.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},c.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],i=this,n=0;n<t;n+=e){for(var o=0;o<e;o++)i=i.dbl();r.push(i)}return{step:e,points:r}},c.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,i=1===r?null:this.dbl(),n=1;n<r;n++)t[n]=t[n-1].add(i);return{wnd:e,points:t}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){var i=r(159),n=r(170),o=r(171),a=r(38),s=r(63),f=r(1).Buffer;function c(e){var t;"object"!=typeof e||f.isBuffer(e)||(t=e.passphrase,e=e.key),"string"==typeof e&&(e=f.from(e));var r,c,h=o(e,t),d=h.tag,u=h.data;switch(d){case"CERTIFICATE":c=i.certificate.decode(u,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(c||(c=i.PublicKey.decode(u,"der")),r=c.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return i.RSAPublicKey.decode(c.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return c.subjectPrivateKey=c.subjectPublicKey,{type:"ec",data:c};case"1.2.840.10040.4.1":return c.algorithm.params.pub_key=i.DSAparam.decode(c.subjectPublicKey.data,"der"),{type:"dsa",data:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+d);case"ENCRYPTED PRIVATE KEY":u=function(e,t){var r=e.algorithm.decrypt.kde.kdeparams.salt,i=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),o=n[e.algorithm.decrypt.cipher.algo.join(".")],c=e.algorithm.decrypt.cipher.iv,h=e.subjectPrivateKey,d=parseInt(o.split("-")[1],10)/8,u=s.pbkdf2Sync(t,r,i,d,"sha1"),l=a.createDecipheriv(o,u,c),p=[];return p.push(l.update(h)),p.push(l.final()),f.concat(p)}(u=i.EncryptedPrivateKey.decode(u,"der"),t);case"PRIVATE KEY":switch(r=(c=i.PrivateKey.decode(u,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return i.RSAPrivateKey.decode(c.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:c.algorithm.curve,privateKey:i.ECPrivateKey.decode(c.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return c.algorithm.params.priv_key=i.DSAparam.decode(c.subjectPrivateKey,"der"),{type:"dsa",params:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+d);case"RSA PUBLIC KEY":return i.RSAPublicKey.decode(u,"der");case"RSA PRIVATE KEY":return i.RSAPrivateKey.decode(u,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:i.DSAPrivateKey.decode(u,"der")};case"EC PRIVATE KEY":return{curve:(u=i.ECPrivateKey.decode(u,"der")).parameters.value,privateKey:u.privateKey};default:throw new Error("unknown key type "+d)}}e.exports=c,c.signature=i.signature},function(e,t,r){var i,n,o,a,s,f;e.exports=(f=r(2),n=(i=f).lib,o=n.Base,a=n.WordArray,(s=i.x64={}).Word=o.extend({init:function(e,t){this.high=e,this.low=t}}),s.WordArray=o.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,r=[],i=0;i<t;i++){var n=e[i];r.push(n.high),r.push(n.low)}return a.create(r,this.sigBytes)},clone:function(){for(var e=o.clone.call(this),t=e.words=this.words.slice(0),r=t.length,i=0;i<r;i++)t[i]=t[i].clone();return e}}),f)},function(e,t,r){"use strict";var i=r(0),n=r(53),o=r(1).Buffer,a=new Array(16);function s(){n.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function f(e,t){return e<<t|e>>>32-t}function c(e,t,r,i,n,o,a){return f(e+(t&r|~t&i)+n+o|0,a)+t|0}function h(e,t,r,i,n,o,a){return f(e+(t&i|r&~i)+n+o|0,a)+t|0}function d(e,t,r,i,n,o,a){return f(e+(t^r^i)+n+o|0,a)+t|0}function u(e,t,r,i,n,o,a){return f(e+(r^(t|~i))+n+o|0,a)+t|0}i(s,n),s.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var r=this._a,i=this._b,n=this._c,o=this._d;r=c(r,i,n,o,e[0],3614090360,7),o=c(o,r,i,n,e[1],3905402710,12),n=c(n,o,r,i,e[2],606105819,17),i=c(i,n,o,r,e[3],3250441966,22),r=c(r,i,n,o,e[4],4118548399,7),o=c(o,r,i,n,e[5],1200080426,12),n=c(n,o,r,i,e[6],2821735955,17),i=c(i,n,o,r,e[7],4249261313,22),r=c(r,i,n,o,e[8],1770035416,7),o=c(o,r,i,n,e[9],2336552879,12),n=c(n,o,r,i,e[10],4294925233,17),i=c(i,n,o,r,e[11],2304563134,22),r=c(r,i,n,o,e[12],1804603682,7),o=c(o,r,i,n,e[13],4254626195,12),n=c(n,o,r,i,e[14],2792965006,17),r=h(r,i=c(i,n,o,r,e[15],1236535329,22),n,o,e[1],4129170786,5),o=h(o,r,i,n,e[6],3225465664,9),n=h(n,o,r,i,e[11],643717713,14),i=h(i,n,o,r,e[0],3921069994,20),r=h(r,i,n,o,e[5],3593408605,5),o=h(o,r,i,n,e[10],38016083,9),n=h(n,o,r,i,e[15],3634488961,14),i=h(i,n,o,r,e[4],3889429448,20),r=h(r,i,n,o,e[9],568446438,5),o=h(o,r,i,n,e[14],3275163606,9),n=h(n,o,r,i,e[3],4107603335,14),i=h(i,n,o,r,e[8],1163531501,20),r=h(r,i,n,o,e[13],2850285829,5),o=h(o,r,i,n,e[2],4243563512,9),n=h(n,o,r,i,e[7],1735328473,14),r=d(r,i=h(i,n,o,r,e[12],2368359562,20),n,o,e[5],4294588738,4),o=d(o,r,i,n,e[8],2272392833,11),n=d(n,o,r,i,e[11],1839030562,16),i=d(i,n,o,r,e[14],4259657740,23),r=d(r,i,n,o,e[1],2763975236,4),o=d(o,r,i,n,e[4],1272893353,11),n=d(n,o,r,i,e[7],4139469664,16),i=d(i,n,o,r,e[10],3200236656,23),r=d(r,i,n,o,e[13],681279174,4),o=d(o,r,i,n,e[0],3936430074,11),n=d(n,o,r,i,e[3],3572445317,16),i=d(i,n,o,r,e[6],76029189,23),r=d(r,i,n,o,e[9],3654602809,4),o=d(o,r,i,n,e[12],3873151461,11),n=d(n,o,r,i,e[15],530742520,16),r=u(r,i=d(i,n,o,r,e[2],3299628645,23),n,o,e[0],4096336452,6),o=u(o,r,i,n,e[7],1126891415,10),n=u(n,o,r,i,e[14],2878612391,15),i=u(i,n,o,r,e[5],4237533241,21),r=u(r,i,n,o,e[12],1700485571,6),o=u(o,r,i,n,e[3],2399980690,10),n=u(n,o,r,i,e[10],4293915773,15),i=u(i,n,o,r,e[1],2240044497,21),r=u(r,i,n,o,e[8],1873313359,6),o=u(o,r,i,n,e[15],4264355552,10),n=u(n,o,r,i,e[6],2734768916,15),i=u(i,n,o,r,e[13],1309151649,21),r=u(r,i,n,o,e[4],4149444226,6),o=u(o,r,i,n,e[11],3174756917,10),n=u(n,o,r,i,e[2],718787259,15),i=u(i,n,o,r,e[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+i|0,this._c=this._c+n|0,this._d=this._d+o|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=o.allocUnsafe(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=s},function(e,t,r){"use strict";var i,n="object"==typeof Reflect?Reflect:null,o=n&&"function"==typeof n.apply?n.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};i=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var f=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function h(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function d(e,t,r,i){var n,o,a,s;if(c(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=i?[r,a]:[a,r]:i?a.unshift(r):a.push(r),(n=h(e))>0&&a.length>n&&!a.warned){a.warned=!0;var f=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");f.name="MaxListenersExceededWarning",f.emitter=e,f.type=t,f.count=a.length,s=f,console&&console.warn&&console.warn(s)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,r){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=u.bind(i);return n.listener=r,i.wrapFn=n,n}function p(e,t,r){var i=e._events;if(void 0===i)return[];var n=i[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):y(n,n.length)}function b(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),i=0;i<t;++i)r[i]=e[i];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return f},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");f=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return h(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,n=this._events;if(void 0!==n)i=i&&void 0===n.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var f=n[e];if(void 0===f)return!1;if("function"==typeof f)o(f,this,t);else{var c=f.length,h=y(f,c);for(r=0;r<c;++r)o(h[r],this,t)}return!0},s.prototype.addListener=function(e,t){return d(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return d(this,e,t,!0)},s.prototype.once=function(e,t){return c(t),this.on(e,l(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,l(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,i,n,o,a;if(c(t),void 0===(i=this._events))return this;if(void 0===(r=i[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,n=o;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(i[e]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,o=Object.keys(r);for(i=0;i<o.length;++i)"removeListener"!==(n=o[i])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):b.call(e,t)},s.prototype.listenerCount=b,s.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t,r){"use strict";(function(t,i,n){var o=r(25);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var i=e.entry;e.entry=null;for(;i;){var n=i.callback;t.pendingcb--,n(r),i=i.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var s,f=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?i:o.nextTick;g.WritableState=v;var c=Object.create(r(20));c.inherits=r(0);var h={deprecate:r(104)},d=r(55),u=r(1).Buffer,l=n.Uint8Array||function(){};var p,b=r(56);function y(){}function v(e,t){s=s||r(12),e=e||{};var i=t instanceof s;this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var n=e.highWaterMark,c=e.writableHighWaterMark,h=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:i&&(c||0===c)?c:h,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var d=!1===e.decodeStrings;this.decodeStrings=!d,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,i=r.sync,n=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,i,n){--t.pendingcb,r?(o.nextTick(n,i),o.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",i)):(n(i),e._writableState.errorEmitted=!0,e.emit("error",i),M(e,t))}(e,r,i,t,n);else{var a=S(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||w(e,r),i?f(_,e,r,a,n):_(e,r,a,n)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function g(e){if(s=s||r(12),!(p.call(g,this)||this instanceof s))return new g(e);this._writableState=new v(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),d.call(this)}function m(e,t,r,i,n,o,a){t.writelen=i,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(n,t.onwrite):e._write(n,o,t.onwrite),t.sync=!1}function _(e,t,r,i){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),M(e,t)}function w(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var i=t.bufferedRequestCount,n=new Array(i),o=t.corkedRequestsFree;o.entry=r;for(var s=0,f=!0;r;)n[s]=r,r.isBuf||(f=!1),r=r.next,s+=1;n.allBuffers=f,m(e,t,!0,t.length,n,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,h=r.encoding,d=r.callback;if(m(e,t,!1,t.objectMode?1:c.length,c,h,d),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function E(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),M(e,t)}))}function M(e,t){var r=S(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(E,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(g,d),v.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(v.prototype,"buffer",{get:h.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===g&&(e&&e._writableState instanceof v)}})):p=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,r){var i,n=this._writableState,a=!1,s=!n.objectMode&&(i=e,u.isBuffer(i)||i instanceof l);return s&&!u.isBuffer(e)&&(e=function(e){return u.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=y),n.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(s||function(e,t,r,i){var n=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(i,a),n=!1),n}(this,n,e,r))&&(n.pendingcb++,a=function(e,t,r,i,n,o){if(!r){var a=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=u.from(t,r));return t}(t,i,n);i!==a&&(r=!0,n="buffer",i=a)}var s=t.objectMode?1:i.length;t.length+=s;var f=t.length<t.highWaterMark;f||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:n,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else m(e,t,!1,s,i,n,o);return f}(this,n,s,e,t,r)),a},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,r){var i=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,t,r){t.ending=!0,M(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,i,r)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=b.destroy,g.prototype._undestroy=b.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(10),r(102).setImmediate,r(8))},function(e,t,r){"use strict";var i=r(1).Buffer,n=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===n||!n(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=f,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=h,this.end=d,t=3;break;default:return this.write=u,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function f(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var i=r.charCodeAt(r.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function h(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function d(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function u(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var i=t.length-1;if(i<r)return 0;var n=a(t[i]);if(n>=0)return n>0&&(e.lastNeed=n-1),n;if(--i<r||-2===n)return 0;if((n=a(t[i]))>=0)return n>0&&(e.lastNeed=n-2),n;if(--i<r||-2===n)return 0;if((n=a(t[i]))>=0)return n>0&&(2===n?n=0:e.lastNeed=n-3),n;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var i=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var i=r(4).Buffer,n=r(0),o=r(53),a=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],f=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],h=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],d=[0,1518500249,1859775393,2400959708,2840853838],u=[1352829926,1548603684,1836072691,2053994217,0];function l(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(e,t){return e<<t|e>>>32-t}function b(e,t,r,i,n,o,a,s){return p(e+(t^r^i)+o+a|0,s)+n|0}function y(e,t,r,i,n,o,a,s){return p(e+(t&r|~t&i)+o+a|0,s)+n|0}function v(e,t,r,i,n,o,a,s){return p(e+((t|~r)^i)+o+a|0,s)+n|0}function g(e,t,r,i,n,o,a,s){return p(e+(t&i|r&~i)+o+a|0,s)+n|0}function m(e,t,r,i,n,o,a,s){return p(e+(t^(r|~i))+o+a|0,s)+n|0}n(l,o),l.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var r=0|this._a,i=0|this._b,n=0|this._c,o=0|this._d,l=0|this._e,_=0|this._a,w=0|this._b,S=0|this._c,E=0|this._d,M=0|this._e,k=0;k<80;k+=1){var A,x;k<16?(A=b(r,i,n,o,l,e[s[k]],d[0],c[k]),x=m(_,w,S,E,M,e[f[k]],u[0],h[k])):k<32?(A=y(r,i,n,o,l,e[s[k]],d[1],c[k]),x=g(_,w,S,E,M,e[f[k]],u[1],h[k])):k<48?(A=v(r,i,n,o,l,e[s[k]],d[2],c[k]),x=v(_,w,S,E,M,e[f[k]],u[2],h[k])):k<64?(A=g(r,i,n,o,l,e[s[k]],d[3],c[k]),x=y(_,w,S,E,M,e[f[k]],u[3],h[k])):(A=m(r,i,n,o,l,e[s[k]],d[4],c[k]),x=b(_,w,S,E,M,e[f[k]],u[4],h[k])),r=l,l=o,o=p(n,10),n=i,i=A,_=M,M=E,E=p(S,10),S=w,w=x}var B=this._b+n+E|0;this._b=this._c+o+M|0,this._c=this._d+l+_|0,this._d=this._e+r+w|0,this._e=this._a+i+S|0,this._a=B},l.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=i.alloc?i.alloc(20):new i(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=l},function(e,t,r){(t=e.exports=function(e){e=e.toLowerCase();var r=t[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r}).sha=r(106),t.sha1=r(107),t.sha224=r(108),t.sha256=r(58),t.sha384=r(109),t.sha512=r(59)},function(e,t,r){"use strict";var i=r(6);function n(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=n,n.prototype._init=function(){},n.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},n.prototype._buffer=function(e,t){for(var r=Math.min(this.buffer.length-this.bufferOff,e.length-t),i=0;i<r;i++)this.buffer[this.bufferOff+i]=e[t+i];return this.bufferOff+=r,r},n.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},n.prototype._updateEncrypt=function(e){var t=0,r=0,i=(this.bufferOff+e.length)/this.blockSize|0,n=new Array(i*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(n,r)));for(var o=e.length-(e.length-t)%this.blockSize;t<o;t+=this.blockSize)this._update(e,t,n,r),r+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return n},n.prototype._updateDecrypt=function(e){for(var t=0,r=0,i=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,n=new Array(i*this.blockSize);i>0;i--)t+=this._buffer(e,t),r+=this._flushBuffer(n,r);return t+=this._buffer(e,t),n},n.prototype.final=function(e){var t,r;return e&&(t=this.update(e)),r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(r):r},n.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},n.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},n.prototype._unpad=function(e){return e},n.prototype._finalDecrypt=function(){i.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,r){var i=r(123),n=r(131),o=r(71);t.createCipher=t.Cipher=i.createCipher,t.createCipheriv=t.Cipheriv=i.createCipheriv,t.createDecipher=t.Decipher=n.createDecipher,t.createDecipheriv=t.Decipheriv=n.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(o)}},function(e,t,r){var i={ECB:r(124),CBC:r(125),CFB:r(126),CFB8:r(127),CFB1:r(128),OFB:r(129),CTR:r(69),GCM:r(69)},n=r(71);for(var o in n)n[o].module=i[n[o].mode];e.exports=n},function(e,t,r){var i;function n(e){this.rand=e}if(e.exports=function(e){return i||(i=new n(null)),i.generate(e)},e.exports.Rand=n,n.prototype.generate=function(e){return this._rand(e)},n.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?n.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?n.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(n.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=r(136);if("function"!=typeof o.randomBytes)throw new Error("Not supported");n.prototype._rand=function(e){return o.randomBytes(e)}}catch(e){}},function(e,t,r){(function(t){var i=r(3),n=r(14);function o(e,r){var n=function(e){var t=a(e);return{blinder:t.toRed(i.mont(e.modulus)).redPow(new i(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(r),o=r.modulus.byteLength(),s=(i.mont(r.modulus),new i(e).mul(n.blinder).umod(r.modulus)),f=s.toRed(i.mont(r.prime1)),c=s.toRed(i.mont(r.prime2)),h=r.coefficient,d=r.prime1,u=r.prime2,l=f.redPow(r.exponent1),p=c.redPow(r.exponent2);l=l.fromRed(),p=p.fromRed();var b=l.isub(p).imul(h).umod(d);return b.imul(u),p.iadd(b),new t(p.imul(n.unblinder).umod(r.modulus).toArray(!1,o))}function a(e){for(var t=e.modulus.byteLength(),r=new i(n(t));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new i(n(t));return r}e.exports=o,o.getr=a}).call(this,r(4).Buffer)},function(e,t,r){"use strict";var i=t;i.version=r(141).version,i.utils=r(7),i.rand=r(40),i.curve=r(77),i.curves=r(43),i.ec=r(152),i.eddsa=r(156)},function(e,t,r){"use strict";var i,n=t,o=r(44),a=r(77),s=r(7).assert;function f(e){"short"===e.type?this.curve=new a.short(e):"edwards"===e.type?this.curve=new a.edwards(e):this.curve=new a.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(e,t){Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){var r=new f(t);return Object.defineProperty(n,e,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=f,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{i=r(151)}catch(e){i=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",i]})},function(e,t,r){var i=t;i.utils=r(9),i.common=r(22),i.sha=r(145),i.ripemd=r(149),i.hmac=r(150),i.sha1=i.sha.sha1,i.sha256=i.sha.sha256,i.sha224=i.sha.sha224,i.sha384=i.sha.sha384,i.sha512=i.sha.sha512,i.ripemd160=i.ripemd.ripemd160},function(e,t,r){var i,n,o,a,s,f,c,h;e.exports=(h=r(2),n=(i=h).lib,o=n.WordArray,a=n.Hasher,s=i.algo,f=[],c=s.SHA1=a.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],a=r[3],s=r[4],c=0;c<80;c++){if(c<16)f[c]=0|e[t+c];else{var h=f[c-3]^f[c-8]^f[c-14]^f[c-16];f[c]=h<<1|h>>>31}var d=(i<<5|i>>>27)+s+f[c];d+=c<20?1518500249+(n&o|~n&a):c<40?1859775393+(n^o^a):c<60?(n&o|n&a|o&a)-1894007588:(n^o^a)-899497514,s=a,a=o,o=n<<30|n>>>2,n=i,i=d}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+s|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return t[i>>>5]|=128<<24-i%32,t[14+(i+64>>>9<<4)]=Math.floor(r/4294967296),t[15+(i+64>>>9<<4)]=r,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}}),i.SHA1=a._createHelper(c),i.HmacSHA1=a._createHmacHelper(c),h.SHA1)},function(e,t,r){var i,n,o,a;e.exports=(i=r(2),o=(n=i).lib.Base,a=n.enc.Utf8,void(n.algo.HMAC=o.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=a.parse(t));var r=e.blockSize,i=4*r;t.sigBytes>i&&(t=e.finalize(t)),t.clamp();for(var n=this._oKey=t.clone(),o=this._iKey=t.clone(),s=n.words,f=o.words,c=0;c<r;c++)s[c]^=1549556828,f[c]^=909522486;n.sigBytes=o.sigBytes=i,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,r=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(r))}})))},function(e,t,r){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r(95),o=function(){function e(e){if(void 0===e)throw new Error("SimpleCrypto object MUST BE initialised with a SECRET KEY.");this._dataBuffer="",this._encoder=n.enc.Utf8,this._secret=n.SHA3("string"==typeof e?e:e.toString()),this._keySize=256,this._iterations=100}return e.sanitiseData=function(e){if(null==e||""===e)throw new Error("There is no data provided. Process halted.");var t="object"==typeof e?JSON.stringify(e):"string"==typeof e||"number"==typeof e||"boolean"==typeof e?e.toString():null;if(null===t)throw new Error("Invalid data type. Only object, string, number and boolean data types are allowed.");return t},e.transform=function(e){if("true"===e.toLowerCase()||"false"===e.toLowerCase())return"true"===e.toLowerCase();try{return JSON.parse(e)}catch(t){return isNaN(parseInt(e))?e:parseInt(e)}},Object.defineProperty(e,"encoders",{get:function(){return i({Default:n.enc.Utf8},n.enc)},enumerable:!0,configurable:!0}),e.generateRandom=function(e,t){void 0===e&&(e=128),void 0===t&&(t=!1);var r=n.lib.WordArray.random(e/8);return t?r:r.toString()},e.generateRandomString=function(t){return void 0===t&&(t=128),e.generateRandom(t,!1)},e.generateRandomWordArray=function(t){return void 0===t&&(t=128),e.generateRandom(t,!0)},e.prototype._decrypt=function(){if(""===this._dataBuffer)throw new Error("No data was provided to be decrypted. Decryption halted.");if(this._dataBuffer.length<=64)throw new Error("Invalid cipher text. Decryption halted.");var t=n.enc.Hex.parse(this._dataBuffer.substr(0,32)),r=n.enc.Hex.parse(this._dataBuffer.substr(32,32)),i=this._dataBuffer.substring(64,this._dataBuffer.length-64),o=n.PBKDF2(this._secret.toString(),t,{keySize:this._keySize/32,iterations:this._iterations}),a=this._dataBuffer.substring(this._dataBuffer.length-64),s=this._dataBuffer.substring(0,this._dataBuffer.length-64);if(a!=n.HmacSHA256(s,o).toString())throw new Error("Invalid encrypted text received. Decryption halted.");var f=n.AES.decrypt(i,o,{iv:r,padding:n.pad.Pkcs7,mode:n.mode.CBC});return e.transform(f.toString(e.encoders.Default))},e.prototype._encrypt=function(){if(""===this._dataBuffer)throw new Error("No data was provided to be encrypted. Encryption halted.");var t=e.generateRandom(128,!0),r=e.generateRandom(128,!0),i=n.PBKDF2(this._secret.toString(),t,{keySize:this._keySize/32,iterations:this._iterations}),o=n.AES.encrypt(this._dataBuffer,i,{iv:r,padding:n.pad.Pkcs7,mode:n.mode.CBC}),a=t.toString()+r.toString()+o.toString();return a+n.HmacSHA256(a,i).toString()},e.prototype.decrypt=function(e,t,r){var i=this,n=function(e){"boolean"!=typeof e&&i.setEncoder(e)};try{return void 0!==e&&this.update(e),void 0!==t&&n(t),void 0!==r&&n(r),this._decrypt()}catch(e){throw e}},e.prototype.encrypt=function(e){try{return void 0!==e&&this.update(e),this._encrypt()}catch(e){throw e}},e.prototype.decryptObject=function(e){return this.update(e).decrypt()},e.prototype.encryptObject=function(e){return this.update(e).encrypt()},e.prototype.append=function(t){try{return this._dataBuffer=this._dataBuffer+e.sanitiseData(t),this}catch(e){throw e}},e.prototype.update=function(t){try{return this._dataBuffer=e.sanitiseData(t),this}catch(e){throw e}},e.prototype.setEncoder=function(e){return this._encoder=e,this},e.prototype.setSecret=function(e){return this._secret=n.SHA3("string"==typeof e?e:e.toString()),this},e}();t.SimpleCrypto=o,t.default=o},function(e,t,r){(function(t){e.exports={parseJwt:function(e){try{const i=e.split(".")[1].replace("-","+").replace("_","/");return JSON.parse((r=i,"undefined"==typeof window?t.from(r,"base64").toString("utf8"):atob(r)))}catch(e){}var r},isExpired:function(e){let t=!0;if(e&&e.exp){t=1e3*e.exp<=Date.now()}return t}}}).call(this,r(4).Buffer)},function(e,t){function r(e,t,r,i,n,o,a){try{var s=e[o](a),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(i,n)}function i(e){return function(){var t=this,i=arguments;return new Promise((function(n,o){var a=e.apply(t,i);function s(e){r(a,n,o,s,f,"next",e)}function f(e){r(a,n,o,s,f,"throw",e)}s(void 0)}))}}const n={GET_ITEM:"getItem",SET_ITEM:"setItem",REMOVE_ITEM:"removeItem",CLEAR:"clear"};e.exports={server:class{constructor(e){this.storage=e}get avaiableCommands(){return Object.keys(n).map(e=>n[e])}processCommand(e,t){const{key:r,value:i}=t;switch(e){case n.GET_ITEM:return this.storage.getItem(r);case n.SET_ITEM:return this.storage.setItem(r,i);case n.REMOVE_ITEM:return this.storage.removeItem(r);case n.CLEAR:return this.storage.clear()}}},client:class{constructor(e){this.sendCommand=e}getItem(e){return i((function*(){const t={key:e};return this.sendCommand(n.GET_ITEM,t)}))()}setItem(e,t){return i((function*(){const r={key:e,value:t};return this.sendCommand(n.SET_ITEM,r)}))()}removeItem(e){return i((function*(){const t={key:e};return this.sendCommand(n.REMOVE_ITEM,t)}))()}clear(){return i((function*(){return this.sendCommand(n.CLEAR)}))()}}}},function(e,t,r){function i(e,t,r,i,n,o,a){try{var s=e[o](a),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(i,n)}function n(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function s(e){i(a,n,o,s,f,"next",e)}function f(e){i(a,n,o,s,f,"throw",e)}s(void 0)}))}}const o=r(93),a={GET:"set",SET:"get",REMOVE:"remove",GET_JSON:"getJSON"};e.exports={server:class{constructor(){}get avaiableCommands(){return Object.keys(a).map(e=>a[e])}processCommand(e,t={}){const{key:r,value:i,options:n}=t;switch(e){case a.GET:return o.get(r);case a.SET:return o.set(r,i,n);case a.REMOVE:return o.remove(r,n);case a.GET_JSON:return o.getJSON(r)}}},client:class{constructor(e){this.sendCommand=e}get(e){return n((function*(){const t={key:e};return this.sendCommand(a.GET,t)}))()}set(e,t,r){return n((function*(){const i={key:e,value:t,options:r};return this.sendCommand(a.SET,i)}))()}remove(e,t){return n((function*(){const r={key:e,options:t};return this.sendCommand(a.REMOVE,r)}))()}getJSON(){return n((function*(){const e={key:key};return this.sendCommand(a.GET_JSON,e)}))()}}}},function(e,t){e.exports={IFRAME_ID:"cross-storage-iframe",Events:{COMMAND:"CSI_COMMAND",REPLY:"CSI_REPLY"},InternalCommands:{PING:"PING",LIST_PROVIDERS:"LIST_PROVIDERS"}}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";var i=r(1).Buffer,n=r(19).Transform;function o(e){n.call(this),this._block=i.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(0)(o,n),o.prototype._transform=function(e,t,r){var i=null;try{this.update(e,t)}catch(e){i=e}r(i)},o.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},o.prototype.update=function(e,t){if(function(e,t){if(!i.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");i.isBuffer(e)||(e=i.from(e,t));for(var r=this._block,n=0;this._blockOffset+e.length-n>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)r[o++]=e[n++];this._update(),this._blockOffset=0}for(;n<e.length;)r[this._blockOffset++]=e[n++];for(var a=0,s=8*e.length;s>0;++a)this._length[a]+=s,(s=this._length[a]/4294967296|0)>0&&(this._length[a]-=4294967296*s);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return t},o.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=o},function(e,t,r){"use strict";(function(t,i){var n=r(25);e.exports=m;var o,a=r(52);m.ReadableState=g;r(32).EventEmitter;var s=function(e,t){return e.listeners(t).length},f=r(55),c=r(1).Buffer,h=t.Uint8Array||function(){};var d=Object.create(r(20));d.inherits=r(0);var u=r(99),l=void 0;l=u&&u.debuglog?u.debuglog("stream"):function(){};var p,b=r(100),y=r(56);d.inherits(m,f);var v=["error","close","destroy","pause","resume"];function g(e,t){e=e||{};var i=t instanceof(o=o||r(12));this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var n=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:i&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(34).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function m(e){if(o=o||r(12),!(this instanceof m))return new m(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),f.call(this)}function _(e,t,r,i,n){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,E(e)}(e,a)):(n||(o=function(e,t){var r;i=t,c.isBuffer(i)||i instanceof h||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var i;return r}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),i?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?w(e,a,t,!1):k(e,a)):w(e,a,t,!1))):i||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function w(e,t,r,i){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,i?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&E(e)),k(e,t)}Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),m.prototype.destroy=y.destroy,m.prototype._undestroy=y.undestroy,m.prototype._destroy=function(e,t){this.push(null),t(e)},m.prototype.push=function(e,t){var r,i=this._readableState;return i.objectMode?r=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=c.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},m.prototype.unshift=function(e){return _(this,e,null,!0,!1)},m.prototype.isPaused=function(){return!1===this._readableState.flowing},m.prototype.setEncoding=function(e){return p||(p=r(34).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function E(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?n.nextTick(M,e):M(e))}function M(e){l("emit readable"),e.emit("readable"),I(e)}function k(e,t){t.readingMore||(t.readingMore=!0,n.nextTick(A,e,t))}function A(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function x(e){l("readable nexttick read 0"),e.read(0)}function B(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),I(e),t.flowing&&!t.reading&&e.read(0)}function I(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function R(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var i;e<t.head.data.length?(i=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):i=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,i=1,n=r.data;e-=n.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?n+=o:n+=o.slice(0,e),0===(e-=a)){a===o.length?(++i,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++i}return t.length-=i,n}(e,t):function(e,t){var r=c.allocUnsafe(e),i=t.head,n=1;i.data.copy(r),e-=i.data.length;for(;i=i.next;){var o=i.data,a=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,a),0===(e-=a)){a===o.length?(++n,i.next?t.head=i.next:t.head=t.tail=null):(t.head=i,i.data=o.slice(a));break}++n}return t.length-=n,r}(e,t);return i}(e,t.buffer,t.decoder),r);var r}function C(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,n.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function T(e,t){for(var r=0,i=e.length;r<i;r++)if(e[r]===t)return r;return-1}m.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?C(this):E(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&C(this),null;var i,n=t.needReadable;return l("need readable",n),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",n=!0),t.ended||t.reading?l("reading or ended",n=!1):n&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(r,t))),null===(i=e>0?R(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&C(this)),null!==i&&this.emit("data",i),i},m.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},m.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,l("pipe count=%d opts=%j",o.pipesCount,t);var f=(!t||!1!==t.end)&&e!==i.stdout&&e!==i.stderr?h:m;function c(t,i){l("onunpipe"),t===r&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,l("cleanup"),e.removeListener("close",v),e.removeListener("finish",g),e.removeListener("drain",d),e.removeListener("error",y),e.removeListener("unpipe",c),r.removeListener("end",h),r.removeListener("end",m),r.removeListener("data",b),u=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||d())}function h(){l("onend"),e.end()}o.endEmitted?n.nextTick(f):r.once("end",f),e.on("unpipe",c);var d=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,I(e))}}(r);e.on("drain",d);var u=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==T(o.pipes,e))&&!u&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),m(),e.removeListener("error",y),0===s(e,"error")&&e.emit("error",t)}function v(){e.removeListener("finish",g),m()}function g(){l("onfinish"),e.removeListener("close",v),m()}function m(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",v),e.once("finish",g),e.emit("pipe",r),o.flowing||(l("pipe resume"),r.resume()),e},m.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var i=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<n;o++)i[o].emit("unpipe",this,r);return this}var a=T(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},m.prototype.on=function(e,t){var r=f.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&E(this):n.nextTick(x,this))}return r},m.prototype.addListener=m.prototype.on,m.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,n.nextTick(B,e,t))}(this,e)),this},m.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},m.prototype.wrap=function(e){var t=this,r=this._readableState,i=!1;for(var n in e.on("end",(function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(n){(l("wrapped data"),r.decoder&&(n=r.decoder.write(n)),r.objectMode&&null==n)||(r.objectMode||n&&n.length)&&(t.push(n)||(i=!0,e.pause()))})),e)void 0===this[n]&&"function"==typeof e[n]&&(this[n]=function(t){return function(){return e[t].apply(e,arguments)}}(n));for(var o=0;o<v.length;o++)e.on(v[o],this.emit.bind(this,v[o]));return this._read=function(t){l("wrapped _read",t),i&&(i=!1,e.resume())},this},Object.defineProperty(m.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),m._fromList=R}).call(this,r(8),r(10))},function(e,t,r){e.exports=r(32).EventEmitter},function(e,t,r){"use strict";var i=r(25);function n(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||i.nextTick(n,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(i.nextTick(n,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";e.exports=a;var i=r(12),n=Object.create(r(20));function o(e,t){var r=this._transformState;r.transforming=!1;var i=r.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),i(e);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);i.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){f(e,t,r)})):f(this,null,null)}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}n.inherits=r(0),n.inherits(a,i),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,r){var i=this._transformState;if(i.writecb=r,i.writechunk=e,i.writeencoding=t,!i.transforming){var n=this._readableState;(i.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var r=this;i.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){var i=r(0),n=r(15),o=r(1).Buffer,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function f(){this.init(),this._w=s,n.call(this,64,56)}function c(e,t,r){return r^e&(t^r)}function h(e,t,r){return e&t|r&(e|t)}function d(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function u(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function l(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}i(f,n),f.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},f.prototype._update=function(e){for(var t,r=this._w,i=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,p=0|this._f,b=0|this._g,y=0|this._h,v=0;v<16;++v)r[v]=e.readInt32BE(4*v);for(;v<64;++v)r[v]=0|(((t=r[v-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+r[v-7]+l(r[v-15])+r[v-16];for(var g=0;g<64;++g){var m=y+u(f)+c(f,p,b)+a[g]+r[g]|0,_=d(i)+h(i,n,o)|0;y=b,b=p,p=f,f=s+m|0,s=o,o=n,n=i,i=m+_|0}this._a=i+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=y+this._h|0},f.prototype._hash=function(){var e=o.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=f},function(e,t,r){var i=r(0),n=r(15),o=r(1).Buffer,a=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function f(){this.init(),this._w=s,n.call(this,128,112)}function c(e,t,r){return r^e&(t^r)}function h(e,t,r){return e&t|r&(e|t)}function d(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function u(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function l(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function p(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function v(e,t){return e>>>0<t>>>0?1:0}i(f,n),f.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},f.prototype._update=function(e){for(var t=this._w,r=0|this._ah,i=0|this._bh,n=0|this._ch,o=0|this._dh,s=0|this._eh,f=0|this._fh,g=0|this._gh,m=0|this._hh,_=0|this._al,w=0|this._bl,S=0|this._cl,E=0|this._dl,M=0|this._el,k=0|this._fl,A=0|this._gl,x=0|this._hl,B=0;B<32;B+=2)t[B]=e.readInt32BE(4*B),t[B+1]=e.readInt32BE(4*B+4);for(;B<160;B+=2){var I=t[B-30],R=t[B-30+1],C=l(I,R),P=p(R,I),T=b(I=t[B-4],R=t[B-4+1]),O=y(R,I),j=t[B-14],D=t[B-14+1],N=t[B-32],z=t[B-32+1],L=P+D|0,U=C+j+v(L,P)|0;U=(U=U+T+v(L=L+O|0,O)|0)+N+v(L=L+z|0,z)|0,t[B]=U,t[B+1]=L}for(var q=0;q<160;q+=2){U=t[q],L=t[q+1];var H=h(r,i,n),F=h(_,w,S),K=d(r,_),W=d(_,r),Y=u(s,M),V=u(M,s),X=a[q],J=a[q+1],G=c(s,f,g),Z=c(M,k,A),$=x+V|0,Q=m+Y+v($,x)|0;Q=(Q=(Q=Q+G+v($=$+Z|0,Z)|0)+X+v($=$+J|0,J)|0)+U+v($=$+L|0,L)|0;var ee=W+F|0,te=K+H+v(ee,W)|0;m=g,x=A,g=f,A=k,f=s,k=M,s=o+Q+v(M=E+$|0,E)|0,o=n,E=S,n=i,S=w,i=r,w=_,r=Q+te+v(_=$+ee|0,$)|0}this._al=this._al+_|0,this._bl=this._bl+w|0,this._cl=this._cl+S|0,this._dl=this._dl+E|0,this._el=this._el+M|0,this._fl=this._fl+k|0,this._gl=this._gl+A|0,this._hl=this._hl+x|0,this._ah=this._ah+r+v(this._al,_)|0,this._bh=this._bh+i+v(this._bl,w)|0,this._ch=this._ch+n+v(this._cl,S)|0,this._dh=this._dh+o+v(this._dl,E)|0,this._eh=this._eh+s+v(this._el,M)|0,this._fh=this._fh+f+v(this._fl,k)|0,this._gh=this._gh+g+v(this._gl,A)|0,this._hh=this._hh+m+v(this._hl,x)|0},f.prototype._hash=function(){var e=o.allocUnsafe(64);function t(t,r,i){e.writeInt32BE(t,i),e.writeInt32BE(r,i+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=f},function(e,t,r){"use strict";var i=r(0),n=r(115),o=r(11),a=r(1).Buffer,s=r(61),f=r(35),c=r(36),h=a.alloc(128);function d(e,t){o.call(this,"digest"),"string"==typeof t&&(t=a.from(t));var r="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>r)?t=("rmd160"===e?new f:c(e)).update(t).digest():t.length<r&&(t=a.concat([t,h],r));for(var i=this._ipad=a.allocUnsafe(r),n=this._opad=a.allocUnsafe(r),s=0;s<r;s++)i[s]=54^t[s],n[s]=92^t[s];this._hash="rmd160"===e?new f:c(e),this._hash.update(i)}i(d,o),d.prototype._update=function(e){this._hash.update(e)},d.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new f:c(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new d("rmd160",t):"md5"===e?new n(s,t):new d(e,t)}},function(e,t,r){var i=r(31);e.exports=function(e){return(new i).update(e).digest()}},function(e){e.exports=JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}')},function(e,t,r){t.pbkdf2=r(117),t.pbkdf2Sync=r(66)},function(e,t,r){(function(t){var r=Math.pow(2,30)-1;function i(e,r){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(r+" must be a buffer or string")}e.exports=function(e,t,n,o){if(i(e,"Password"),i(t,"Salt"),"number"!=typeof n)throw new TypeError("Iterations not a number");if(n<0)throw new TypeError("Bad iterations");if("number"!=typeof o)throw new TypeError("Key length not a number");if(o<0||o>r||o!=o)throw new TypeError("Bad key length")}}).call(this,r(4).Buffer)},function(e,t,r){(function(t){var r;t.browser?r="utf-8":r=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=r}).call(this,r(10))},function(e,t,r){var i=r(61),n=r(35),o=r(36),a=r(64),s=r(65),f=r(1).Buffer,c=f.alloc(128),h={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function d(e,t,r){var a=function(e){function t(t){return o(e).update(t).digest()}return"rmd160"===e||"ripemd160"===e?function(e){return(new n).update(e).digest()}:"md5"===e?i:t}(e),s="sha512"===e||"sha384"===e?128:64;t.length>s?t=a(t):t.length<s&&(t=f.concat([t,c],s));for(var d=f.allocUnsafe(s+h[e]),u=f.allocUnsafe(s+h[e]),l=0;l<s;l++)d[l]=54^t[l],u[l]=92^t[l];var p=f.allocUnsafe(s+r+4);d.copy(p,0,0,s),this.ipad1=p,this.ipad2=d,this.opad=u,this.alg=e,this.blocksize=s,this.hash=a,this.size=h[e]}d.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,r,i,n){a(e,t,r,i),f.isBuffer(e)||(e=f.from(e,s)),f.isBuffer(t)||(t=f.from(t,s));var o=new d(n=n||"sha1",e,t.length),c=f.allocUnsafe(i),u=f.allocUnsafe(t.length+4);t.copy(u,0,0,t.length);for(var l=0,p=h[n],b=Math.ceil(i/p),y=1;y<=b;y++){u.writeUInt32BE(y,t.length);for(var v=o.run(u,o.ipad1),g=v,m=1;m<r;m++){g=o.run(g,o.ipad2);for(var _=0;_<p;_++)v[_]^=g[_]}v.copy(c,l),l+=p}return c}},function(e,t,r){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,r){e[0+r]=t>>>24,e[1+r]=t>>>16&255,e[2+r]=t>>>8&255,e[3+r]=255&t},t.ip=function(e,t,r,i){for(var n=0,o=0,a=6;a>=0;a-=2){for(var s=0;s<=24;s+=8)n<<=1,n|=t>>>s+a&1;for(s=0;s<=24;s+=8)n<<=1,n|=e>>>s+a&1}for(a=6;a>=0;a-=2){for(s=1;s<=25;s+=8)o<<=1,o|=t>>>s+a&1;for(s=1;s<=25;s+=8)o<<=1,o|=e>>>s+a&1}r[i+0]=n>>>0,r[i+1]=o>>>0},t.rip=function(e,t,r,i){for(var n=0,o=0,a=0;a<4;a++)for(var s=24;s>=0;s-=8)n<<=1,n|=t>>>s+a&1,n<<=1,n|=e>>>s+a&1;for(a=4;a<8;a++)for(s=24;s>=0;s-=8)o<<=1,o|=t>>>s+a&1,o<<=1,o|=e>>>s+a&1;r[i+0]=n>>>0,r[i+1]=o>>>0},t.pc1=function(e,t,r,i){for(var n=0,o=0,a=7;a>=5;a--){for(var s=0;s<=24;s+=8)n<<=1,n|=t>>s+a&1;for(s=0;s<=24;s+=8)n<<=1,n|=e>>s+a&1}for(s=0;s<=24;s+=8)n<<=1,n|=t>>s+a&1;for(a=1;a<=3;a++){for(s=0;s<=24;s+=8)o<<=1,o|=t>>s+a&1;for(s=0;s<=24;s+=8)o<<=1,o|=e>>s+a&1}for(s=0;s<=24;s+=8)o<<=1,o|=e>>s+a&1;r[i+0]=n>>>0,r[i+1]=o>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var i=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,r,n){for(var o=0,a=0,s=i.length>>>1,f=0;f<s;f++)o<<=1,o|=e>>>i[f]&1;for(f=s;f<i.length;f++)a<<=1,a|=t>>>i[f]&1;r[n+0]=o>>>0,r[n+1]=a>>>0},t.expand=function(e,t,r){var i=0,n=0;i=(1&e)<<5|e>>>27;for(var o=23;o>=15;o-=4)i<<=6,i|=e>>>o&63;for(o=11;o>=3;o-=4)n|=e>>>o&63,n<<=6;n|=(31&e)<<1|e>>>31,t[r+0]=i>>>0,t[r+1]=n>>>0};var n=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var r=0,i=0;i<4;i++){r<<=4,r|=n[64*i+(e>>>18-6*i&63)]}for(i=0;i<4;i++){r<<=4,r|=n[256+64*i+(t>>>18-6*i&63)]}return r>>>0};var o=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,r=0;r<o.length;r++)t<<=1,t|=e>>>o[r]&1;return t>>>0},t.padSplit=function(e,t,r){for(var i=e.toString(2);i.length<t;)i="0"+i;for(var n=[],o=0;o<t;o+=r)n.push(i.slice(o,o+r));return n.join(" ")}},function(e,t,r){"use strict";var i=r(6),n=r(0),o=r(67),a=r(37);function s(){this.tmp=new Array(2),this.keys=null}function f(e){a.call(this,e);var t=new s;this._desState=t,this.deriveKeys(t,e.key)}n(f,a),e.exports=f,f.create=function(e){return new f(e)};var c=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];f.prototype.deriveKeys=function(e,t){e.keys=new Array(32),i.equal(t.length,this.blockSize,"Invalid key length");var r=o.readUInt32BE(t,0),n=o.readUInt32BE(t,4);o.pc1(r,n,e.tmp,0),r=e.tmp[0],n=e.tmp[1];for(var a=0;a<e.keys.length;a+=2){var s=c[a>>>1];r=o.r28shl(r,s),n=o.r28shl(n,s),o.pc2(r,n,e.keys,a)}},f.prototype._update=function(e,t,r,i){var n=this._desState,a=o.readUInt32BE(e,t),s=o.readUInt32BE(e,t+4);o.ip(a,s,n.tmp,0),a=n.tmp[0],s=n.tmp[1],"encrypt"===this.type?this._encrypt(n,a,s,n.tmp,0):this._decrypt(n,a,s,n.tmp,0),a=n.tmp[0],s=n.tmp[1],o.writeUInt32BE(r,a,i),o.writeUInt32BE(r,s,i+4)},f.prototype._pad=function(e,t){for(var r=e.length-t,i=t;i<e.length;i++)e[i]=r;return!0},f.prototype._unpad=function(e){for(var t=e[e.length-1],r=e.length-t;r<e.length;r++)i.equal(e[r],t);return e.slice(0,e.length-t)},f.prototype._encrypt=function(e,t,r,i,n){for(var a=t,s=r,f=0;f<e.keys.length;f+=2){var c=e.keys[f],h=e.keys[f+1];o.expand(s,e.tmp,0),c^=e.tmp[0],h^=e.tmp[1];var d=o.substitute(c,h),u=s;s=(a^o.permute(d))>>>0,a=u}o.rip(s,a,i,n)},f.prototype._decrypt=function(e,t,r,i,n){for(var a=r,s=t,f=e.keys.length-2;f>=0;f-=2){var c=e.keys[f],h=e.keys[f+1];o.expand(a,e.tmp,0),c^=e.tmp[0],h^=e.tmp[1];var d=o.substitute(c,h),u=a;a=(s^o.permute(d))>>>0,s=u}o.rip(a,s,i,n)}},function(e,t,r){var i=r(21),n=r(1).Buffer,o=r(70);function a(e){var t=e._cipher.encryptBlockRaw(e._prev);return o(e._prev),t}t.encrypt=function(e,t){var r=Math.ceil(t.length/16),o=e._cache.length;e._cache=n.concat([e._cache,n.allocUnsafe(16*r)]);for(var s=0;s<r;s++){var f=a(e),c=o+16*s;e._cache.writeUInt32BE(f[0],c+0),e._cache.writeUInt32BE(f[1],c+4),e._cache.writeUInt32BE(f[2],c+8),e._cache.writeUInt32BE(f[3],c+12)}var h=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),i(t,h)}},function(e,t){e.exports=function(e){for(var t,r=e.length;r--;){if(255!==(t=e.readUInt8(r))){t++,e.writeUInt8(t,r);break}e.writeUInt8(0,r)}}},function(e){e.exports=JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}')},function(e,t,r){var i=r(26),n=r(1).Buffer,o=r(11),a=r(0),s=r(130),f=r(21),c=r(70);function h(e,t,r,a){o.call(this);var f=n.alloc(4,0);this._cipher=new i.AES(t);var h=this._cipher.encryptBlock(f);this._ghash=new s(h),r=function(e,t,r){if(12===t.length)return e._finID=n.concat([t,n.from([0,0,0,1])]),n.concat([t,n.from([0,0,0,2])]);var i=new s(r),o=t.length,a=o%16;i.update(t),a&&(a=16-a,i.update(n.alloc(a,0))),i.update(n.alloc(8,0));var f=8*o,h=n.alloc(8);h.writeUIntBE(f,0,8),i.update(h),e._finID=i.state;var d=n.from(e._finID);return c(d),d}(this,r,h),this._prev=n.from(r),this._cache=n.allocUnsafe(0),this._secCache=n.allocUnsafe(0),this._decrypt=a,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}a(h,o),h.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=n.alloc(t,0),this._ghash.update(t))}this._called=!0;var r=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(r),this._len+=e.length,r},h.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=f(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var r=0;e.length!==t.length&&r++;for(var i=Math.min(e.length,t.length),n=0;n<i;++n)r+=e[n]^t[n];return r}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},h.prototype.getAuthTag=function(){if(this._decrypt||!n.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},h.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},h.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=h},function(e,t,r){var i=r(26),n=r(1).Buffer,o=r(11);function a(e,t,r,a){o.call(this),this._cipher=new i.AES(t),this._prev=n.from(r),this._cache=n.allocUnsafe(0),this._secCache=n.allocUnsafe(0),this._decrypt=a,this._mode=e}r(0)(a,o),a.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},a.prototype._final=function(){this._cipher.scrub()},e.exports=a},function(e,t,r){var i=r(14);e.exports=g,g.simpleSieve=y,g.fermatTest=v;var n=r(3),o=new n(24),a=new(r(75)),s=new n(1),f=new n(2),c=new n(5),h=(new n(16),new n(8),new n(10)),d=new n(3),u=(new n(7),new n(11)),l=new n(4),p=(new n(12),null);function b(){if(null!==p)return p;var e=[];e[0]=2;for(var t=1,r=3;r<1048576;r+=2){for(var i=Math.ceil(Math.sqrt(r)),n=0;n<t&&e[n]<=i&&r%e[n]!=0;n++);t!==n&&e[n]<=i||(e[t++]=r)}return p=e,e}function y(e){for(var t=b(),r=0;r<t.length;r++)if(0===e.modn(t[r]))return 0===e.cmpn(t[r]);return!0}function v(e){var t=n.mont(e);return 0===f.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function g(e,t){if(e<16)return new n(2===t||5===t?[140,123]:[140,39]);var r,p;for(t=new n(t);;){for(r=new n(i(Math.ceil(e/8)));r.bitLength()>e;)r.ishrn(1);if(r.isEven()&&r.iadd(s),r.testn(1)||r.iadd(f),t.cmp(f)){if(!t.cmp(c))for(;r.mod(h).cmp(d);)r.iadd(l)}else for(;r.mod(o).cmp(u);)r.iadd(l);if(y(p=r.shrn(1))&&y(r)&&v(p)&&v(r)&&a.test(p)&&a.test(r))return r}}},function(e,t,r){var i=r(3),n=r(40);function o(e){this.rand=e||new n.Rand}e.exports=o,o.create=function(e){return new o(e)},o.prototype._randbelow=function(e){var t=e.bitLength(),r=Math.ceil(t/8);do{var n=new i(this.rand.generate(r))}while(n.cmp(e)>=0);return n},o.prototype._randrange=function(e,t){var r=t.sub(e);return e.add(this._randbelow(r))},o.prototype.test=function(e,t,r){var n=e.bitLength(),o=i.mont(e),a=new i(1).toRed(o);t||(t=Math.max(1,n/48|0));for(var s=e.subn(1),f=0;!s.testn(f);f++);for(var c=e.shrn(f),h=s.toRed(o);t>0;t--){var d=this._randrange(new i(2),s);r&&r(d);var u=d.toRed(o).redPow(c);if(0!==u.cmp(a)&&0!==u.cmp(h)){for(var l=1;l<f;l++){if(0===(u=u.redSqr()).cmp(a))return!1;if(0===u.cmp(h))break}if(l===f)return!1}}return!0},o.prototype.getDivisor=function(e,t){var r=e.bitLength(),n=i.mont(e),o=new i(1).toRed(n);t||(t=Math.max(1,r/48|0));for(var a=e.subn(1),s=0;!a.testn(s);s++);for(var f=e.shrn(s),c=a.toRed(n);t>0;t--){var h=this._randrange(new i(2),a),d=e.gcd(h);if(0!==d.cmpn(1))return d;var u=h.toRed(n).redPow(f);if(0!==u.cmp(o)&&0!==u.cmp(c)){for(var l=1;l<s;l++){if(0===(u=u.redSqr()).cmp(o))return u.fromRed().subn(1).gcd(e);if(0===u.cmp(c))break}if(l===s)return(u=u.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,r){"use strict";var i=t;function n(e){return 1===e.length?"0"+e:e}function o(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}i.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var i=0;i<e.length;i++)r[i]=0|e[i];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(i=0;i<e.length;i++){var n=e.charCodeAt(i),o=n>>8,a=255&n;o?r.push(o,a):r.push(a)}return r},i.zero2=n,i.toHex=o,i.encode=function(e,t){return"hex"===t?o(e):e}},function(e,t,r){"use strict";var i=t;i.base=r(28),i.short=r(142),i.mont=r(143),i.edwards=r(144)},function(e,t,r){"use strict";var i=r(9).rotr32;function n(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function a(e,t,r){return e^t^r}t.ft_1=function(e,t,r,i){return 0===e?n(t,r,i):1===e||3===e?a(t,r,i):2===e?o(t,r,i):void 0},t.ch32=n,t.maj32=o,t.p32=a,t.s0_256=function(e){return i(e,2)^i(e,13)^i(e,22)},t.s1_256=function(e){return i(e,6)^i(e,11)^i(e,25)},t.g0_256=function(e){return i(e,7)^i(e,18)^e>>>3},t.g1_256=function(e){return i(e,17)^i(e,19)^e>>>10}},function(e,t,r){"use strict";var i=r(9),n=r(22),o=r(78),a=r(6),s=i.sum32,f=i.sum32_4,c=i.sum32_5,h=o.ch32,d=o.maj32,u=o.s0_256,l=o.s1_256,p=o.g0_256,b=o.g1_256,y=n.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}i.inherits(g,y),e.exports=g,g.blockSize=512,g.outSize=256,g.hmacStrength=192,g.padLength=64,g.prototype._update=function(e,t){for(var r=this.W,i=0;i<16;i++)r[i]=e[t+i];for(;i<r.length;i++)r[i]=f(b(r[i-2]),r[i-7],p(r[i-15]),r[i-16]);var n=this.h[0],o=this.h[1],y=this.h[2],v=this.h[3],g=this.h[4],m=this.h[5],_=this.h[6],w=this.h[7];for(a(this.k.length===r.length),i=0;i<r.length;i++){var S=c(w,l(g),h(g,m,_),this.k[i],r[i]),E=s(u(n),d(n,o,y));w=_,_=m,m=g,g=s(v,S),v=y,y=o,o=n,n=s(S,E)}this.h[0]=s(this.h[0],n),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],y),this.h[3]=s(this.h[3],v),this.h[4]=s(this.h[4],g),this.h[5]=s(this.h[5],m),this.h[6]=s(this.h[6],_),this.h[7]=s(this.h[7],w)},g.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t,r){"use strict";var i=r(9),n=r(22),o=r(6),a=i.rotr64_hi,s=i.rotr64_lo,f=i.shr64_hi,c=i.shr64_lo,h=i.sum64,d=i.sum64_hi,u=i.sum64_lo,l=i.sum64_4_hi,p=i.sum64_4_lo,b=i.sum64_5_hi,y=i.sum64_5_lo,v=n.BlockHash,g=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function m(){if(!(this instanceof m))return new m;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=g,this.W=new Array(160)}function _(e,t,r,i,n){var o=e&r^~e&n;return o<0&&(o+=4294967296),o}function w(e,t,r,i,n,o){var a=t&i^~t&o;return a<0&&(a+=4294967296),a}function S(e,t,r,i,n){var o=e&r^e&n^r&n;return o<0&&(o+=4294967296),o}function E(e,t,r,i,n,o){var a=t&i^t&o^i&o;return a<0&&(a+=4294967296),a}function M(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function k(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function A(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function x(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function B(e,t){var r=a(e,t,1)^a(e,t,8)^f(e,t,7);return r<0&&(r+=4294967296),r}function I(e,t){var r=s(e,t,1)^s(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function R(e,t){var r=a(e,t,19)^a(t,e,29)^f(e,t,6);return r<0&&(r+=4294967296),r}function C(e,t){var r=s(e,t,19)^s(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}i.inherits(m,v),e.exports=m,m.blockSize=1024,m.outSize=512,m.hmacStrength=192,m.padLength=128,m.prototype._prepareBlock=function(e,t){for(var r=this.W,i=0;i<32;i++)r[i]=e[t+i];for(;i<r.length;i+=2){var n=R(r[i-4],r[i-3]),o=C(r[i-4],r[i-3]),a=r[i-14],s=r[i-13],f=B(r[i-30],r[i-29]),c=I(r[i-30],r[i-29]),h=r[i-32],d=r[i-31];r[i]=l(n,o,a,s,f,c,h,d),r[i+1]=p(n,o,a,s,f,c,h,d)}},m.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,i=this.h[0],n=this.h[1],a=this.h[2],s=this.h[3],f=this.h[4],c=this.h[5],l=this.h[6],p=this.h[7],v=this.h[8],g=this.h[9],m=this.h[10],B=this.h[11],I=this.h[12],R=this.h[13],C=this.h[14],P=this.h[15];o(this.k.length===r.length);for(var T=0;T<r.length;T+=2){var O=C,j=P,D=A(v,g),N=x(v,g),z=_(v,g,m,B,I),L=w(v,g,m,B,I,R),U=this.k[T],q=this.k[T+1],H=r[T],F=r[T+1],K=b(O,j,D,N,z,L,U,q,H,F),W=y(O,j,D,N,z,L,U,q,H,F);O=M(i,n),j=k(i,n),D=S(i,n,a,s,f),N=E(i,n,a,s,f,c);var Y=d(O,j,D,N),V=u(O,j,D,N);C=I,P=R,I=m,R=B,m=v,B=g,v=d(l,p,K,W),g=u(p,p,K,W),l=f,p=c,f=a,c=s,a=i,s=n,i=d(K,W,Y,V),n=u(K,W,Y,V)}h(this.h,0,i,n),h(this.h,2,a,s),h(this.h,4,f,c),h(this.h,6,l,p),h(this.h,8,v,g),h(this.h,10,m,B),h(this.h,12,I,R),h(this.h,14,C,P)},m.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t,r){var i=r(0),n=r(24).Reporter,o=r(4).Buffer;function a(e,t){n.call(this,t),o.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function s(e,t){if(Array.isArray(e))this.length=0,this.value=e.map((function(e){return e instanceof s||(e=new s(e,t)),this.length+=e.length,e}),this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=o.byteLength(e);else{if(!o.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}i(a,n),t.DecoderBuffer=a,a.prototype.save=function(){return{offset:this.offset,reporter:n.prototype.save.call(this)}},a.prototype.restore=function(e){var t=new a(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,n.prototype.restore.call(this,e.reporter),t},a.prototype.isEmpty=function(){return this.offset===this.length},a.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},a.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new a(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},a.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=s,s.prototype.join=function(e,t){return e||(e=new o(this.length)),t||(t=0),0===this.length||(Array.isArray(this.value)?this.value.forEach((function(r){r.join(e,t),t+=r.length})):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):o.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length)),e}},function(e,t,r){var i=t;i._reverse=function(e){var t={};return Object.keys(e).forEach((function(r){(0|r)==r&&(r|=0);var i=e[r];t[i]=r})),t},i.der=r(164)},function(e,t,r){var i=r(0),n=r(23),o=n.base,a=n.bignum,s=n.constants.der;function f(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){o.Node.call(this,"der",e)}function h(e,t){var r=e.readUInt8(t);if(e.isError(r))return r;var i=s.tagClass[r>>6],n=0==(32&r);if(31==(31&r)){var o=r;for(r=0;128==(128&o);){if(o=e.readUInt8(t),e.isError(o))return o;r<<=7,r|=127&o}}else r&=31;return{cls:i,primitive:n,tag:r,tagStr:s.tag[r]}}function d(e,t,r){var i=e.readUInt8(r);if(e.isError(i))return i;if(!t&&128===i)return null;if(0==(128&i))return i;var n=127&i;if(n>4)return e.error("length octect is too long");i=0;for(var o=0;o<n;o++){i<<=8;var a=e.readUInt8(r);if(e.isError(a))return a;i|=a}return i}e.exports=f,f.prototype.decode=function(e,t){return e instanceof o.DecoderBuffer||(e=new o.DecoderBuffer(e,t)),this.tree._decode(e,t)},i(c,o.Node),c.prototype._peekTag=function(e,t,r){if(e.isEmpty())return!1;var i=e.save(),n=h(e,'Failed to peek tag: "'+t+'"');return e.isError(n)?n:(e.restore(i),n.tag===t||n.tagStr===t||n.tagStr+"of"===t||r)},c.prototype._decodeTag=function(e,t,r){var i=h(e,'Failed to decode tag of "'+t+'"');if(e.isError(i))return i;var n=d(e,i.primitive,'Failed to get length of "'+t+'"');if(e.isError(n))return n;if(!r&&i.tag!==t&&i.tagStr!==t&&i.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(i.primitive||null!==n)return e.skip(n,'Failed to match body of: "'+t+'"');var o=e.save(),a=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(a)?a:(n=e.offset-o.offset,e.restore(o),e.skip(n,'Failed to match body of: "'+t+'"'))},c.prototype._skipUntilEnd=function(e,t){for(;;){var r=h(e,t);if(e.isError(r))return r;var i,n=d(e,r.primitive,t);if(e.isError(n))return n;if(i=r.primitive||null!==n?e.skip(n):this._skipUntilEnd(e,t),e.isError(i))return i;if("end"===r.tagStr)break}},c.prototype._decodeList=function(e,t,r,i){for(var n=[];!e.isEmpty();){var o=this._peekTag(e,"end");if(e.isError(o))return o;var a=r.decode(e,"der",i);if(e.isError(a)&&o)break;n.push(a)}return n},c.prototype._decodeStr=function(e,t){if("bitstr"===t){var r=e.readUInt8();return e.isError(r)?r:{unused:r,data:e.raw()}}if("bmpstr"===t){var i=e.raw();if(i.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var n="",o=0;o<i.length/2;o++)n+=String.fromCharCode(i.readUInt16BE(2*o));return n}if("numstr"===t){var a=e.raw().toString("ascii");return this._isNumstr(a)?a:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var s=e.raw().toString("ascii");return this._isPrintstr(s)?s:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},c.prototype._decodeObjid=function(e,t,r){for(var i,n=[],o=0;!e.isEmpty();){var a=e.readUInt8();o<<=7,o|=127&a,0==(128&a)&&(n.push(o),o=0)}128&a&&n.push(o);var s=n[0]/40|0,f=n[0]%40;if(i=r?n:[s,f].concat(n.slice(1)),t){var c=t[i.join(" ")];void 0===c&&(c=t[i.join(".")]),void 0!==c&&(i=c)}return i},c.prototype._decodeTime=function(e,t){var r=e.raw().toString();if("gentime"===t)var i=0|r.slice(0,4),n=0|r.slice(4,6),o=0|r.slice(6,8),a=0|r.slice(8,10),s=0|r.slice(10,12),f=0|r.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");i=0|r.slice(0,2),n=0|r.slice(2,4),o=0|r.slice(4,6),a=0|r.slice(6,8),s=0|r.slice(8,10),f=0|r.slice(10,12);i=i<70?2e3+i:1900+i}return Date.UTC(i,n-1,o,a,s,f,0)},c.prototype._decodeNull=function(e){return null},c.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},c.prototype._decodeInt=function(e,t){var r=e.raw(),i=new a(r);return t&&(i=t[i.toString(10)]||i),i},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,r){var i=r(0),n=r(4).Buffer,o=r(23),a=o.base,s=o.constants.der;function f(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){a.Node.call(this,"der",e)}function h(e){return e<10?"0"+e:e}e.exports=f,f.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},i(c,a.Node),c.prototype._encodeComposite=function(e,t,r,i){var o,a=function(e,t,r,i){var n;"seqof"===e?e="seq":"setof"===e&&(e="set");if(s.tagByName.hasOwnProperty(e))n=s.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return i.error("Unknown tag: "+e);n=e}if(n>=31)return i.error("Multi-octet tag encoding unsupported");t||(n|=32);return n|=s.tagClassByName[r||"universal"]<<6}(e,t,r,this.reporter);if(i.length<128)return(o=new n(2))[0]=a,o[1]=i.length,this._createEncoderBuffer([o,i]);for(var f=1,c=i.length;c>=256;c>>=8)f++;(o=new n(2+f))[0]=a,o[1]=128|f;c=1+f;for(var h=i.length;h>0;c--,h>>=8)o[c]=255&h;return this._createEncoderBuffer([o,i])},c.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var r=new n(2*e.length),i=0;i<e.length;i++)r.writeUInt16BE(e.charCodeAt(i),2*i);return this._createEncoderBuffer(r)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)||"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},c.prototype._encodeObjid=function(e,t,r){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var i=0;i<e.length;i++)e[i]|=0}else if(Array.isArray(e)){e=e.slice();for(i=0;i<e.length;i++)e[i]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!r){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var o=0;for(i=0;i<e.length;i++){var a=e[i];for(o++;a>=128;a>>=7)o++}var s=new n(o),f=s.length-1;for(i=e.length-1;i>=0;i--){a=e[i];for(s[f--]=127&a;(a>>=7)>0;)s[f--]=128|127&a}return this._createEncoderBuffer(s)},c.prototype._encodeTime=function(e,t){var r,i=new Date(e);return"gentime"===t?r=[h(i.getFullYear()),h(i.getUTCMonth()+1),h(i.getUTCDate()),h(i.getUTCHours()),h(i.getUTCMinutes()),h(i.getUTCSeconds()),"Z"].join(""):"utctime"===t?r=[h(i.getFullYear()%100),h(i.getUTCMonth()+1),h(i.getUTCDate()),h(i.getUTCHours()),h(i.getUTCMinutes()),h(i.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(r,"octstr")},c.prototype._encodeNull=function(){return this._createEncoderBuffer("")},c.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!n.isBuffer(e)){var r=e.toArray();!e.sign&&128&r[0]&&r.unshift(0),e=new n(r)}if(n.isBuffer(e)){var i=e.length;0===e.length&&i++;var o=new n(i);return e.copy(o),0===e.length&&(o[0]=0),this._createEncoderBuffer(o)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);i=1;for(var a=e;a>=256;a>>=8)i++;for(a=(o=new Array(i)).length-1;a>=0;a--)o[a]=255&e,e>>=8;return 128&o[0]&&o.unshift(0),this._createEncoderBuffer(new n(o))},c.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},c.prototype._skipDefault=function(e,t,r){var i,n=this._baseState;if(null===n.default)return!1;var o=e.join();if(void 0===n.defaultBuffer&&(n.defaultBuffer=this._encodeValue(n.default,t,r).join()),o.length!==n.defaultBuffer.length)return!1;for(i=0;i<o.length;i++)if(o[i]!==n.defaultBuffer[i])return!1;return!0}},function(e){e.exports=JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}')},function(e,t,r){var i=r(18),n=r(1).Buffer;function o(e){var t=n.allocUnsafe(4);return t.writeUInt32BE(e,0),t}e.exports=function(e,t){for(var r,a=n.alloc(0),s=0;a.length<t;)r=o(s++),a=n.concat([a,i("sha1").update(e).update(r).digest()]);return a.slice(0,t)}},function(e,t){e.exports=function(e,t){for(var r=e.length,i=-1;++i<r;)e[i]^=t[i];return e}},function(e,t,r){var i=r(3),n=r(1).Buffer;e.exports=function(e,t){return n.from(e.toRed(i.mont(t.modulus)).redPow(new i(t.publicExponent)).fromRed().toArray())}},function(e,t,r){var i;e.exports=(i=r(2),function(e){var t=i,r=t.lib,n=r.WordArray,o=r.Hasher,a=t.algo,s=[],f=[];!function(){function t(t){for(var r=e.sqrt(t),i=2;i<=r;i++)if(!(t%i))return!1;return!0}function r(e){return 4294967296*(e-(0|e))|0}for(var i=2,n=0;n<64;)t(i)&&(n<8&&(s[n]=r(e.pow(i,.5))),f[n]=r(e.pow(i,1/3)),n++),i++}();var c=[],h=a.SHA256=o.extend({_doReset:function(){this._hash=new n.init(s.slice(0))},_doProcessBlock:function(e,t){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],a=r[3],s=r[4],h=r[5],d=r[6],u=r[7],l=0;l<64;l++){if(l<16)c[l]=0|e[t+l];else{var p=c[l-15],b=(p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3,y=c[l-2],v=(y<<15|y>>>17)^(y<<13|y>>>19)^y>>>10;c[l]=b+c[l-7]+v+c[l-16]}var g=i&n^i&o^n&o,m=(i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22),_=u+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&h^~s&d)+f[l]+c[l];u=d,d=h,h=s,s=a+_|0,a=o,o=n,n=i,i=_+(m+g)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+s|0,r[5]=r[5]+h|0,r[6]=r[6]+d|0,r[7]=r[7]+u|0},_doFinalize:function(){var t=this._data,r=t.words,i=8*this._nDataBytes,n=8*t.sigBytes;return r[n>>>5]|=128<<24-n%32,r[14+(n+64>>>9<<4)]=e.floor(i/4294967296),r[15+(n+64>>>9<<4)]=i,t.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=o._createHelper(h),t.HmacSHA256=o._createHmacHelper(h)}(Math),i.SHA256)},function(e,t,r){var i;e.exports=(i=r(2),r(30),function(){var e=i,t=e.lib.Hasher,r=e.x64,n=r.Word,o=r.WordArray,a=e.algo;function s(){return n.create.apply(n,arguments)}var f=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],c=[];!function(){for(var e=0;e<80;e++)c[e]=s()}();var h=a.SHA512=t.extend({_doReset:function(){this._hash=new o.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],a=r[3],s=r[4],h=r[5],d=r[6],u=r[7],l=i.high,p=i.low,b=n.high,y=n.low,v=o.high,g=o.low,m=a.high,_=a.low,w=s.high,S=s.low,E=h.high,M=h.low,k=d.high,A=d.low,x=u.high,B=u.low,I=l,R=p,C=b,P=y,T=v,O=g,j=m,D=_,N=w,z=S,L=E,U=M,q=k,H=A,F=x,K=B,W=0;W<80;W++){var Y,V,X=c[W];if(W<16)V=X.high=0|e[t+2*W],Y=X.low=0|e[t+2*W+1];else{var J=c[W-15],G=J.high,Z=J.low,$=(G>>>1|Z<<31)^(G>>>8|Z<<24)^G>>>7,Q=(Z>>>1|G<<31)^(Z>>>8|G<<24)^(Z>>>7|G<<25),ee=c[W-2],te=ee.high,re=ee.low,ie=(te>>>19|re<<13)^(te<<3|re>>>29)^te>>>6,ne=(re>>>19|te<<13)^(re<<3|te>>>29)^(re>>>6|te<<26),oe=c[W-7],ae=oe.high,se=oe.low,fe=c[W-16],ce=fe.high,he=fe.low;V=(V=(V=$+ae+((Y=Q+se)>>>0<Q>>>0?1:0))+ie+((Y+=ne)>>>0<ne>>>0?1:0))+ce+((Y+=he)>>>0<he>>>0?1:0),X.high=V,X.low=Y}var de,ue=N&L^~N&q,le=z&U^~z&H,pe=I&C^I&T^C&T,be=R&P^R&O^P&O,ye=(I>>>28|R<<4)^(I<<30|R>>>2)^(I<<25|R>>>7),ve=(R>>>28|I<<4)^(R<<30|I>>>2)^(R<<25|I>>>7),ge=(N>>>14|z<<18)^(N>>>18|z<<14)^(N<<23|z>>>9),me=(z>>>14|N<<18)^(z>>>18|N<<14)^(z<<23|N>>>9),_e=f[W],we=_e.high,Se=_e.low,Ee=F+ge+((de=K+me)>>>0<K>>>0?1:0),Me=ve+be;F=q,K=H,q=L,H=U,L=N,U=z,N=j+(Ee=(Ee=(Ee=Ee+ue+((de+=le)>>>0<le>>>0?1:0))+we+((de+=Se)>>>0<Se>>>0?1:0))+V+((de+=Y)>>>0<Y>>>0?1:0))+((z=D+de|0)>>>0<D>>>0?1:0)|0,j=T,D=O,T=C,O=P,C=I,P=R,I=Ee+(ye+pe+(Me>>>0<ve>>>0?1:0))+((R=de+Me|0)>>>0<de>>>0?1:0)|0}p=i.low=p+R,i.high=l+I+(p>>>0<R>>>0?1:0),y=n.low=y+P,n.high=b+C+(y>>>0<P>>>0?1:0),g=o.low=g+O,o.high=v+T+(g>>>0<O>>>0?1:0),_=a.low=_+D,a.high=m+j+(_>>>0<D>>>0?1:0),S=s.low=S+z,s.high=w+N+(S>>>0<z>>>0?1:0),M=h.low=M+U,h.high=E+L+(M>>>0<U>>>0?1:0),A=d.low=A+H,d.high=k+q+(A>>>0<H>>>0?1:0),B=u.low=B+K,u.high=x+F+(B>>>0<K>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return t[i>>>5]|=128<<24-i%32,t[30+(i+128>>>10<<5)]=Math.floor(r/4294967296),t[31+(i+128>>>10<<5)]=r,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(h),e.HmacSHA512=t._createHmacHelper(h)}(),i.SHA512)},function(e,t,r){const{initializeClient:i}=r(92),{initializeServer:n}=r(94);e.exports={initializeClient:i,initializeServer:n}},function(e,t,r){let i=(n=p((function*(e){return new Promise((function(t,r){const i=setTimeout((function(){clearTimeout(i),t()}),e)}))})),function(e){return n.apply(this,arguments)});var n;let o=(a=p((function*(e,t,{commandArguments:r,iframeId:i=v,$window:n=window,allowedDomains:o=[]}={}){const a=n.document.getElementById(i).contentWindow;return new Promise((function(i){n.addEventListener("message",(function(e){if(e.data.event===g.REPLY){if(!function(e,t){return!e||!e.length||!!e.find(e=>e===t)}(o,e.origin))throw"NOT ALLOWED ORIGIN "+e.origin;i(e.data.result)}})),a.postMessage({event:g.COMMAND,data:{provider:e,command:t,commandArguments:r}},"*")}))})),function(e,t){return a.apply(this,arguments)});var a;let s=(f=p((function*(e,t,r,{timeout:n}){let o=t.document.getElementById(e);if(!o){const i=t.document.createElement("iframe");i.id=e,i.src=r,i.style.cssText="width: 1px; height: 1px; border:0 solid transparent; position: absolute; top: 0; left: 0",t.document.body.appendChild(i)}if(o=t.document.getElementById(e),!o.contentWindow&&(yield i(n),o=t.document.getElementById(e),!o.contentWindow))throw new Error("O IFRAME NÃO FOI CARREGADO NO TIMEOUT "+n)})),function(e,t,r,i){return f.apply(this,arguments)});var f;let c=(h=p((function*(e,t,r,{allowedDomains:n}){let a=0;for(;a<10;){const s=o(e,m.PING,{iframeId:r,$window:t,allowedDomains:n});if((yield Promise.race([i(1e3),s]))===m.PING)return!0;a++}})),function(e,t,r,i){return h.apply(this,arguments)});var h;let d=(u=p((function*(e,{iframeId:t=v,$window:r=window,allowedDomains:i=[],iframeTimeout:n=3e3,initialProvider:o=w}={}){const a=o===w?w:o.PROVIDER;if(yield s(t,r,e,{timeout:n}),!(yield c(a,r,t,{allowedDomains:i})))throw new Error("CROSS STORAGE SERVER DID NOT REPLY");const f=new _({iframeId:t,$window:r,allowedDomains:i});return function(e){e.addProvider("localStorage",b.client),e.addProvider("sessionStorage",b.client),e.addProvider("cookie",y.client)}(f),a!==w&&f.addProvider(o),f.getProvider(a)})),function(e){return u.apply(this,arguments)});var u;function l(e,t,r,i,n,o,a){try{var s=e[o](a),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(i,n)}function p(e){return function(){var t=this,r=arguments;return new Promise((function(i,n){var o=e.apply(t,r);function a(e){l(o,i,n,a,s,"next",e)}function s(e){l(o,i,n,a,s,"throw",e)}a(void 0)}))}}const b=r(49),y=r(50),{IFRAME_ID:v,Events:g,InternalCommands:m}=r(51);class _{constructor({iframeId:e,$window:t,allowedDomains:r}={}){this.iframeId=e,this.$window=t,this.allowedDomains=r,this.providers={}}get providersNames(){return Object.keys(this.providers)}getProvider(e){return this.providers[e]}addProvider(e,t,r){var i=this;let n,a,s;var f;"string"==typeof e?(n=e,a=t,s=r):(a=e,n=a.PROVIDER,s=t);const c=new a((f=p((function*(e,t){return o(n,e,{commandArguments:t,iframeId:i.iframeId,$window:i.$window,allowedDomains:i.allowedDomains})})),function(e,t){return f.apply(this,arguments)}),s);c.getProvider=this.getProvider,c.addProvider=this.addProvider,c.listProviders=this.listProviders,this.providers[n]=c}listProviders(){return p((function*(){return o("CROSS-STORAGE",m.LIST_PROVIDERS,{iframeId:this.iframeId,$window:this.$window,allowedDomains:this.allowedDomains})}))()}}const w="localStorage";e.exports={initializeClient:d}},function(e,t,r){var i,n;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */!function(o){if(void 0===(n="function"==typeof(i=o)?i.call(t,r,t,e):i)||(e.exports=n),!0,e.exports=o(),!!0){var a=window.Cookies,s=window.Cookies=o();s.noConflict=function(){return window.Cookies=a,s}}}((function(){function e(){for(var e=0,t={};e<arguments.length;e++){var r=arguments[e];for(var i in r)t[i]=r[i]}return t}function t(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function r(i){function n(){}function o(t,r,o){if("undefined"!=typeof document){"number"==typeof(o=e({path:"/"},n.defaults,o)).expires&&(o.expires=new Date(1*new Date+864e5*o.expires)),o.expires=o.expires?o.expires.toUTCString():"";try{var a=JSON.stringify(r);/^[\{\[]/.test(a)&&(r=a)}catch(e){}r=i.write?i.write(r,t):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var s="";for(var f in o)o[f]&&(s+="; "+f,!0!==o[f]&&(s+="="+o[f].split(";")[0]));return document.cookie=t+"="+r+s}}function a(e,r){if("undefined"!=typeof document){for(var n={},o=document.cookie?document.cookie.split("; "):[],a=0;a<o.length;a++){var s=o[a].split("="),f=s.slice(1).join("=");r||'"'!==f.charAt(0)||(f=f.slice(1,-1));try{var c=t(s[0]);if(f=(i.read||i)(f,c)||t(f),r)try{f=JSON.parse(f)}catch(e){}if(n[c]=f,e===c)break}catch(e){}}return e?n[e]:n}}return n.set=o,n.get=function(e){return a(e,!1)},n.getJSON=function(e){return a(e,!0)},n.remove=function(t,r){o(t,"",e(r,{expires:-1}))},n.defaults={},n.withConverter=r,n}((function(){}))}))},function(e,t,r){function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const a=r(49),s=r(50),{Events:f,InternalCommands:c}=r(51);function h(e,{$window:t=window}={}){t.parent.postMessage({event:f.REPLY,result:e},"*")}class d{constructor(e,t){this.window=e,this.providers=t}get providersNames(){return Object.keys(this.providers)}onCommand(e){const t=this.window,{provider:r,command:i,commandArguments:n}=e.data;return i===c.PING?h(c.PING,{$window:t}):i===c.LIST_PROVIDERS?h(this.providersNames,{$window:t}):this.providersNames.includes(r)?void h(this.providers[r].processCommand(i,n),{$window:t}):h(new Error("PROVIDER NOT REGISTERED"),{$window:t})}initialize(){!function(e,{$window:t=window,bind:r}={}){t.addEventListener("message",i=>{if(i.data.event===f.COMMAND){if(r)return e.bind(r)(i.data,t);e(i.data,t)}})}(this.onCommand,{bind:this})}addProvider(e,t,r){let i,n,o;"string"==typeof e?(i=e,n=t,o=r):(n=e,i=n.PROVIDER,o=t),this.providers[i]=new n(this.window,o)}}e.exports={initializeServer:function({$window:e=window,providers:t={}}={}){const r=n(n({},function(e){return{localStorage:new a.server(e.localStorage),sessionStorage:new a.server(e.sessionStorage),cookie:new s.server}}(e)),t),i=new d(e,r);return i.initialize(),i}}},function(e,t,r){var i;e.exports=(i=r(2),r(30),r(178),r(179),r(16),r(17),r(45),r(89),r(180),r(90),r(181),r(182),r(183),r(46),r(184),r(13),r(5),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),i)},function(e,t,r){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=r(14),t.createHash=t.Hash=r(18),t.createHmac=t.Hmac=r(60);var i=r(116),n=Object.keys(i),o=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(n);t.getHashes=function(){return o};var a=r(63);t.pbkdf2=a.pbkdf2,t.pbkdf2Sync=a.pbkdf2Sync;var s=r(118);t.Cipher=s.Cipher,t.createCipher=s.createCipher,t.Cipheriv=s.Cipheriv,t.createCipheriv=s.createCipheriv,t.Decipher=s.Decipher,t.createDecipher=s.createDecipher,t.Decipheriv=s.Decipheriv,t.createDecipheriv=s.createDecipheriv,t.getCiphers=s.getCiphers,t.listCiphers=s.listCiphers;var f=r(133);t.DiffieHellmanGroup=f.DiffieHellmanGroup,t.createDiffieHellmanGroup=f.createDiffieHellmanGroup,t.getDiffieHellman=f.getDiffieHellman,t.createDiffieHellman=f.createDiffieHellman,t.DiffieHellman=f.DiffieHellman;var c=r(139);t.createSign=c.createSign,t.Sign=c.Sign,t.createVerify=c.createVerify,t.Verify=c.Verify,t.createECDH=r(173);var h=r(174);t.publicEncrypt=h.publicEncrypt,t.privateEncrypt=h.privateEncrypt,t.publicDecrypt=h.publicDecrypt,t.privateDecrypt=h.privateDecrypt;var d=r(177);t.randomFill=d.randomFill,t.randomFillSync=d.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],i=t[1];return 3*(r+i)/4-i},t.toByteArray=function(e){var t,r,i=c(e),a=i[0],s=i[1],f=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),h=0,d=s>0?a-4:a;for(r=0;r<d;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],f[h++]=t>>16&255,f[h++]=t>>8&255,f[h++]=255&t;2===s&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,f[h++]=255&t);1===s&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,f[h++]=t>>8&255,f[h++]=255&t);return f},t.fromByteArray=function(e){for(var t,r=e.length,n=r%3,o=[],a=0,s=r-n;a<s;a+=16383)o.push(h(e,a,a+16383>s?s:a+16383));1===n?(t=e[r-1],o.push(i[t>>2]+i[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],o.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"="));return o.join("")};for(var i=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,f=a.length;s<f;++s)i[s]=a[s],n[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function h(e,t,r){for(var n,o,a=[],s=t;s<r;s+=3)n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(i[(o=n)>>18&63]+i[o>>12&63]+i[o>>6&63]+i[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,i,n){var o,a,s=8*n-i-1,f=(1<<s)-1,c=f>>1,h=-7,d=r?n-1:0,u=r?-1:1,l=e[t+d];for(d+=u,o=l&(1<<-h)-1,l>>=-h,h+=s;h>0;o=256*o+e[t+d],d+=u,h-=8);for(a=o&(1<<-h)-1,o>>=-h,h+=i;h>0;a=256*a+e[t+d],d+=u,h-=8);if(0===o)o=1-c;else{if(o===f)return a?NaN:1/0*(l?-1:1);a+=Math.pow(2,i),o-=c}return(l?-1:1)*a*Math.pow(2,o-i)},t.write=function(e,t,r,i,n,o){var a,s,f,c=8*o-n-1,h=(1<<c)-1,d=h>>1,u=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,l=i?0:o-1,p=i?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=h):(a=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-a))<1&&(a--,f*=2),(t+=a+d>=1?u/f:u*Math.pow(2,1-d))*f>=2&&(a++,f/=2),a+d>=h?(s=0,a=h):a+d>=1?(s=(t*f-1)*Math.pow(2,n),a+=d):(s=t*Math.pow(2,d-1)*Math.pow(2,n),a=0));n>=8;e[r+l]=255&s,l+=p,s/=256,n-=8);for(a=a<<n|s,c+=n;c>0;e[r+l]=255&a,l+=p,a/=256,c-=8);e[r+l-p]|=128*b}},function(e,t){},function(e,t,r){"use strict";var i=r(1).Buffer,n=r(101);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var t,r,n,o=i.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,r=o,n=s,t.copy(r,n),s+=a.data.length,a=a.next;return o},e}(),n&&n.inspect&&n.inspect.custom&&(e.exports.prototype[n.inspect.custom]=function(){var e=n.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,n=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(n.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(n.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(103),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(8))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var i,n,o,a,s,f=1,c={},h=!1,d=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(n=d.documentElement,i=function(e){var t=d.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,n.removeChild(t),t=null},n.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return c[f]=n,i(f),f++},u.clearImmediate=l}function l(e){delete c[e]}function p(e){if(h)setTimeout(p,0,e);else{var t=c[e];if(t){h=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{l(e),h=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(8),r(10))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var i=!1;return function(){if(!i){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),i=!0}return e.apply(this,arguments)}}}).call(this,r(8))},function(e,t,r){"use strict";e.exports=o;var i=r(57),n=Object.create(r(20));function o(e){if(!(this instanceof o))return new o(e);i.call(this,e)}n.inherits=r(0),n.inherits(o,i),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){var i=r(0),n=r(15),o=r(1).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function f(){this.init(),this._w=s,n.call(this,64,56)}function c(e){return e<<30|e>>>2}function h(e,t,r,i){return 0===e?t&r|~t&i:2===e?t&r|t&i|r&i:t^r^i}i(f,n),f.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},f.prototype._update=function(e){for(var t,r=this._w,i=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,d=0;d<16;++d)r[d]=e.readInt32BE(4*d);for(;d<80;++d)r[d]=r[d-3]^r[d-8]^r[d-14]^r[d-16];for(var u=0;u<80;++u){var l=~~(u/20),p=0|((t=i)<<5|t>>>27)+h(l,n,o,s)+f+r[u]+a[l];f=s,s=o,o=c(n),n=i,i=p}this._a=i+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0},f.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=f},function(e,t,r){var i=r(0),n=r(15),o=r(1).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function f(){this.init(),this._w=s,n.call(this,64,56)}function c(e){return e<<5|e>>>27}function h(e){return e<<30|e>>>2}function d(e,t,r,i){return 0===e?t&r|~t&i:2===e?t&r|t&i|r&i:t^r^i}i(f,n),f.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},f.prototype._update=function(e){for(var t,r=this._w,i=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,u=0;u<16;++u)r[u]=e.readInt32BE(4*u);for(;u<80;++u)r[u]=(t=r[u-3]^r[u-8]^r[u-14]^r[u-16])<<1|t>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=c(i)+d(p,n,o,s)+f+r[l]+a[p]|0;f=s,s=o,o=h(n),n=i,i=b}this._a=i+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0},f.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=f},function(e,t,r){var i=r(0),n=r(58),o=r(15),a=r(1).Buffer,s=new Array(64);function f(){this.init(),this._w=s,o.call(this,64,56)}i(f,n),f.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},f.prototype._hash=function(){var e=a.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=f},function(e,t,r){var i=r(0),n=r(59),o=r(15),a=r(1).Buffer,s=new Array(160);function f(){this.init(),this._w=s,o.call(this,128,112)}i(f,n),f.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},f.prototype._hash=function(){var e=a.allocUnsafe(48);function t(t,r,i){e.writeInt32BE(t,i),e.writeInt32BE(r,i+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=f},function(e,t,r){e.exports=n;var i=r(32).EventEmitter;function n(){i.call(this)}r(0)(n,i),n.Readable=r(19),n.Writable=r(111),n.Duplex=r(112),n.Transform=r(113),n.PassThrough=r(114),n.Stream=n,n.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",f));var a=!1;function s(){a||(a=!0,e.end())}function f(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(h(),0===i.listenerCount(this,"error"))throw e}function h(){r.removeListener("data",n),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",f),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",h),r.removeListener("close",h),e.removeListener("close",h)}return r.on("error",c),e.on("error",c),r.on("end",h),r.on("close",h),e.on("close",h),e.emit("pipe",r),e}},function(e,t,r){e.exports=r(33)},function(e,t,r){e.exports=r(12)},function(e,t,r){e.exports=r(19).Transform},function(e,t,r){e.exports=r(19).PassThrough},function(e,t,r){"use strict";var i=r(0),n=r(1).Buffer,o=r(11),a=n.alloc(128);function s(e,t){o.call(this,"digest"),"string"==typeof t&&(t=n.from(t)),this._alg=e,this._key=t,t.length>64?t=e(t):t.length<64&&(t=n.concat([t,a],64));for(var r=this._ipad=n.allocUnsafe(64),i=this._opad=n.allocUnsafe(64),s=0;s<64;s++)r[s]=54^t[s],i[s]=92^t[s];this._hash=[r]}i(s,o),s.prototype._update=function(e){this._hash.push(e)},s.prototype._final=function(){var e=this._alg(n.concat(this._hash));return this._alg(n.concat([this._opad,e]))},e.exports=s},function(e,t,r){e.exports=r(62)},function(e,t,r){(function(t,i){var n,o=r(64),a=r(65),s=r(66),f=r(1).Buffer,c=t.crypto&&t.crypto.subtle,h={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},d=[];function u(e,t,r,i,n){return c.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then((function(e){return c.deriveBits({name:"PBKDF2",salt:t,iterations:r,hash:{name:n}},e,i<<3)})).then((function(e){return f.from(e)}))}e.exports=function(e,r,l,p,b,y){"function"==typeof b&&(y=b,b=void 0);var v=h[(b=b||"sha1").toLowerCase()];if(!v||"function"!=typeof t.Promise)return i.nextTick((function(){var t;try{t=s(e,r,l,p,b)}catch(e){return y(e)}y(null,t)}));if(o(e,r,l,p),"function"!=typeof y)throw new Error("No callback provided to pbkdf2");f.isBuffer(e)||(e=f.from(e,a)),f.isBuffer(r)||(r=f.from(r,a)),function(e,t){e.then((function(e){i.nextTick((function(){t(null,e)}))}),(function(e){i.nextTick((function(){t(e)}))}))}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==d[e])return d[e];var r=u(n=n||f.alloc(8),n,10,128,e).then((function(){return!0})).catch((function(){return!1}));return d[e]=r,r}(v).then((function(t){return t?u(e,r,l,p,v):s(e,r,l,p,b)})),y)}}).call(this,r(8),r(10))},function(e,t,r){var i=r(119),n=r(38),o=r(39),a=r(132),s=r(27);function f(e,t,r){if(e=e.toLowerCase(),o[e])return n.createCipheriv(e,t,r);if(a[e])return new i({key:t,iv:r,mode:e});throw new TypeError("invalid suite type")}function c(e,t,r){if(e=e.toLowerCase(),o[e])return n.createDecipheriv(e,t,r);if(a[e])return new i({key:t,iv:r,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var r,i;if(e=e.toLowerCase(),o[e])r=o[e].key,i=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,i=a[e].iv}var n=s(t,!1,r,i);return f(e,n.key,n.iv)},t.createCipheriv=t.Cipheriv=f,t.createDecipher=t.Decipher=function(e,t){var r,i;if(e=e.toLowerCase(),o[e])r=o[e].key,i=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,i=a[e].iv}var n=s(t,!1,r,i);return c(e,n.key,n.iv)},t.createDecipheriv=t.Decipheriv=c,t.listCiphers=t.getCiphers=function(){return Object.keys(a).concat(n.getCiphers())}},function(e,t,r){var i=r(11),n=r(120),o=r(0),a=r(1).Buffer,s={"des-ede3-cbc":n.CBC.instantiate(n.EDE),"des-ede3":n.EDE,"des-ede-cbc":n.CBC.instantiate(n.EDE),"des-ede":n.EDE,"des-cbc":n.CBC.instantiate(n.DES),"des-ecb":n.DES};function f(e){i.call(this);var t,r=e.mode.toLowerCase(),n=s[r];t=e.decrypt?"decrypt":"encrypt";var o=e.key;a.isBuffer(o)||(o=a.from(o)),"des-ede"!==r&&"des-ede-cbc"!==r||(o=a.concat([o,o.slice(0,8)]));var f=e.iv;a.isBuffer(f)||(f=a.from(f)),this._des=n.create({key:o,iv:f,type:t})}s.des=s["des-cbc"],s.des3=s["des-ede3-cbc"],e.exports=f,o(f,i),f.prototype._update=function(e){return a.from(this._des.update(e))},f.prototype._final=function(){return a.from(this._des.final())}},function(e,t,r){"use strict";t.utils=r(67),t.Cipher=r(37),t.DES=r(68),t.CBC=r(121),t.EDE=r(122)},function(e,t,r){"use strict";var i=r(6),n=r(0),o={};function a(e){i.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}n(t,e);for(var r=Object.keys(o),i=0;i<r.length;i++){var a=r[i];t.prototype[a]=o[a]}return t.create=function(e){return new t(e)},t},o._cbcInit=function(){var e=new a(this.options.iv);this._cbcState=e},o._update=function(e,t,r,i){var n=this._cbcState,o=this.constructor.super_.prototype,a=n.iv;if("encrypt"===this.type){for(var s=0;s<this.blockSize;s++)a[s]^=e[t+s];o._update.call(this,a,0,r,i);for(s=0;s<this.blockSize;s++)a[s]=r[i+s]}else{o._update.call(this,e,t,r,i);for(s=0;s<this.blockSize;s++)r[i+s]^=a[s];for(s=0;s<this.blockSize;s++)a[s]=e[t+s]}}},function(e,t,r){"use strict";var i=r(6),n=r(0),o=r(37),a=r(68);function s(e,t){i.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),n=t.slice(8,16),o=t.slice(16,24);this.ciphers="encrypt"===e?[a.create({type:"encrypt",key:r}),a.create({type:"decrypt",key:n}),a.create({type:"encrypt",key:o})]:[a.create({type:"decrypt",key:o}),a.create({type:"encrypt",key:n}),a.create({type:"decrypt",key:r})]}function f(e){o.call(this,e);var t=new s(this.type,this.options.key);this._edeState=t}n(f,o),e.exports=f,f.create=function(e){return new f(e)},f.prototype._update=function(e,t,r,i){var n=this._edeState;n.ciphers[0]._update(e,t,r,i),n.ciphers[1]._update(r,i,r,i),n.ciphers[2]._update(r,i,r,i)},f.prototype._pad=a.prototype._pad,f.prototype._unpad=a.prototype._unpad},function(e,t,r){var i=r(39),n=r(72),o=r(1).Buffer,a=r(73),s=r(11),f=r(26),c=r(27);function h(e,t,r){s.call(this),this._cache=new u,this._cipher=new f.AES(t),this._prev=o.from(r),this._mode=e,this._autopadding=!0}r(0)(h,s),h.prototype._update=function(e){var t,r;this._cache.add(e);for(var i=[];t=this._cache.get();)r=this._mode.encrypt(this,t),i.push(r);return o.concat(i)};var d=o.alloc(16,16);function u(){this.cache=o.allocUnsafe(0)}function l(e,t,r){var s=i[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=o.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof r&&(r=o.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===s.type?new a(s.module,t,r):"auth"===s.type?new n(s.module,t,r):new h(s.module,t,r)}h.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(d))throw this._cipher.scrub(),new Error("data not multiple of block length")},h.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},u.prototype.add=function(e){this.cache=o.concat([this.cache,e])},u.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},u.prototype.flush=function(){for(var e=16-this.cache.length,t=o.allocUnsafe(e),r=-1;++r<e;)t.writeUInt8(e,r);return o.concat([this.cache,t])},t.createCipheriv=l,t.createCipher=function(e,t){var r=i[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=c(t,!1,r.key,r.iv);return l(e,n.key,n.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,r){var i=r(21);t.encrypt=function(e,t){var r=i(t,e._prev);return e._prev=e._cipher.encryptBlock(r),e._prev},t.decrypt=function(e,t){var r=e._prev;e._prev=t;var n=e._cipher.decryptBlock(t);return i(n,r)}},function(e,t,r){var i=r(1).Buffer,n=r(21);function o(e,t,r){var o=t.length,a=n(t,e._cache);return e._cache=e._cache.slice(o),e._prev=i.concat([e._prev,r?t:a]),a}t.encrypt=function(e,t,r){for(var n,a=i.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=i.allocUnsafe(0)),!(e._cache.length<=t.length)){a=i.concat([a,o(e,t,r)]);break}n=e._cache.length,a=i.concat([a,o(e,t.slice(0,n),r)]),t=t.slice(n)}return a}},function(e,t,r){var i=r(1).Buffer;function n(e,t,r){var n=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=i.concat([e._prev.slice(1),i.from([r?t:n])]),n}t.encrypt=function(e,t,r){for(var o=t.length,a=i.allocUnsafe(o),s=-1;++s<o;)a[s]=n(e,t[s],r);return a}},function(e,t,r){var i=r(1).Buffer;function n(e,t,r){for(var i,n,a=-1,s=0;++a<8;)i=t&1<<7-a?128:0,s+=(128&(n=e._cipher.encryptBlock(e._prev)[0]^i))>>a%8,e._prev=o(e._prev,r?i:n);return s}function o(e,t){var r=e.length,n=-1,o=i.allocUnsafe(e.length);for(e=i.concat([e,i.from([t])]);++n<r;)o[n]=e[n]<<1|e[n+1]>>7;return o}t.encrypt=function(e,t,r){for(var o=t.length,a=i.allocUnsafe(o),s=-1;++s<o;)a[s]=n(e,t[s],r);return a}},function(e,t,r){(function(e){var i=r(21);function n(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,r){for(;t._cache.length<r.length;)t._cache=e.concat([t._cache,n(t)]);var o=t._cache.slice(0,r.length);return t._cache=t._cache.slice(r.length),i(r,o)}}).call(this,r(4).Buffer)},function(e,t,r){var i=r(1).Buffer,n=i.alloc(16,0);function o(e){var t=i.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function a(e){this.h=e,this.state=i.alloc(16,0),this.cache=i.allocUnsafe(0)}a.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},a.prototype._multiply=function(){for(var e,t,r,i=[(e=this.h).readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)],n=[0,0,0,0],a=-1;++a<128;){for(0!=(this.state[~~(a/8)]&1<<7-a%8)&&(n[0]^=i[0],n[1]^=i[1],n[2]^=i[2],n[3]^=i[3]),r=0!=(1&i[3]),t=3;t>0;t--)i[t]=i[t]>>>1|(1&i[t-1])<<31;i[0]=i[0]>>>1,r&&(i[0]=i[0]^225<<24)}this.state=o(n)},a.prototype.update=function(e){var t;for(this.cache=i.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},a.prototype.final=function(e,t){return this.cache.length&&this.ghash(i.concat([this.cache,n],16)),this.ghash(o([0,e,0,t])),this.state},e.exports=a},function(e,t,r){var i=r(72),n=r(1).Buffer,o=r(39),a=r(73),s=r(11),f=r(26),c=r(27);function h(e,t,r){s.call(this),this._cache=new d,this._last=void 0,this._cipher=new f.AES(t),this._prev=n.from(r),this._mode=e,this._autopadding=!0}function d(){this.cache=n.allocUnsafe(0)}function u(e,t,r){var s=o[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=n.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof t&&(t=n.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===s.type?new a(s.module,t,r,!0):"auth"===s.type?new i(s.module,t,r,!0):new h(s.module,t,r)}r(0)(h,s),h.prototype._update=function(e){var t,r;this._cache.add(e);for(var i=[];t=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,t),i.push(r);return n.concat(i)},h.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<t;)if(e[r+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},h.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},d.prototype.add=function(e){this.cache=n.concat([this.cache,e])},d.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},d.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var r=o[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=c(t,!1,r.key,r.iv);return u(e,i.key,i.iv)},t.createDecipheriv=u},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,r){(function(e){var i=r(74),n=r(137),o=r(138);var a={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var r=new e(n[t].prime,"hex"),i=new e(n[t].gen,"hex");return new o(r,i)},t.createDiffieHellman=t.DiffieHellman=function t(r,n,s,f){return e.isBuffer(n)||void 0===a[n]?t(r,"binary",n,s):(n=n||"binary",f=f||"binary",s=s||new e([2]),e.isBuffer(s)||(s=new e(s,f)),"number"==typeof r?new o(i(r,s),s,!0):(e.isBuffer(r)||(r=new e(r,n)),new o(r,s,!0)))}}).call(this,r(4).Buffer)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t){},function(e){e.exports=JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}')},function(e,t,r){(function(t){var i=r(3),n=new(r(75)),o=new i(24),a=new i(11),s=new i(10),f=new i(3),c=new i(7),h=r(74),d=r(14);function u(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._pub=new i(e),this}function l(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._priv=new i(e),this}e.exports=b;var p={};function b(e,t,r){this.setGenerator(t),this.__prime=new i(e),this._prime=i.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,r?(this.setPublicKey=u,this.setPrivateKey=l):this._primeCode=8}function y(e,r){var i=new t(e.toArray());return r?i.toString(r):i}Object.defineProperty(b.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var r=t.toString("hex"),i=[r,e.toString(16)].join("_");if(i in p)return p[i];var d,u=0;if(e.isEven()||!h.simpleSieve||!h.fermatTest(e)||!n.test(e))return u+=1,u+="02"===r||"05"===r?8:4,p[i]=u,u;switch(n.test(e.shrn(1))||(u+=2),r){case"02":e.mod(o).cmp(a)&&(u+=8);break;case"05":(d=e.mod(s)).cmp(f)&&d.cmp(c)&&(u+=8);break;default:u+=4}return p[i]=u,u}(this.__prime,this.__gen)),this._primeCode}}),b.prototype.generateKeys=function(){return this._priv||(this._priv=new i(d(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},b.prototype.computeSecret=function(e){var r=(e=(e=new i(e)).toRed(this._prime)).redPow(this._priv).fromRed(),n=new t(r.toArray()),o=this.getPrime();if(n.length<o.length){var a=new t(o.length-n.length);a.fill(0),n=t.concat([a,n])}return n},b.prototype.getPublicKey=function(e){return y(this._pub,e)},b.prototype.getPrivateKey=function(e){return y(this._priv,e)},b.prototype.getPrime=function(e){return y(this.__prime,e)},b.prototype.getGenerator=function(e){return y(this._gen,e)},b.prototype.setGenerator=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.__gen=e,this._gen=new i(e),this}}).call(this,r(4).Buffer)},function(e,t,r){var i=r(4).Buffer,n=r(18),o=r(19),a=r(0),s=r(140),f=r(172),c=r(62);function h(e){o.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function d(e){o.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function u(e){return new h(e)}function l(e){return new d(e)}Object.keys(c).forEach((function(e){c[e].id=i.from(c[e].id,"hex"),c[e.toLowerCase()]=c[e]})),a(h,o.Writable),h.prototype._write=function(e,t,r){this._hash.update(e),r()},h.prototype.update=function(e,t){return"string"==typeof e&&(e=i.from(e,t)),this._hash.update(e),this},h.prototype.sign=function(e,t){this.end();var r=this._hash.digest(),i=s(r,e,this._hashType,this._signType,this._tag);return t?i.toString(t):i},a(d,o.Writable),d.prototype._write=function(e,t,r){this._hash.update(e),r()},d.prototype.update=function(e,t){return"string"==typeof e&&(e=i.from(e,t)),this._hash.update(e),this},d.prototype.verify=function(e,t,r){"string"==typeof t&&(t=i.from(t,r)),this.end();var n=this._hash.digest();return f(t,n,e,this._signType,this._tag)},e.exports={Sign:u,Verify:l,createSign:u,createVerify:l}},function(e,t,r){var i=r(4).Buffer,n=r(60),o=r(41),a=r(42).ec,s=r(3),f=r(29),c=r(85);function h(e,t,r,o){if((e=i.from(e.toArray())).length<t.byteLength()){var a=i.alloc(t.byteLength()-e.length);e=i.concat([a,e])}var s=r.length,f=function(e,t){e=(e=d(e,t)).mod(t);var r=i.from(e.toArray());if(r.length<t.byteLength()){var n=i.alloc(t.byteLength()-r.length);r=i.concat([n,r])}return r}(r,t),c=i.alloc(s);c.fill(1);var h=i.alloc(s);return h=n(o,h).update(c).update(i.from([0])).update(e).update(f).digest(),c=n(o,h).update(c).digest(),{k:h=n(o,h).update(c).update(i.from([1])).update(e).update(f).digest(),v:c=n(o,h).update(c).digest()}}function d(e,t){var r=new s(e),i=(e.length<<3)-t.bitLength();return i>0&&r.ishrn(i),r}function u(e,t,r){var o,a;do{for(o=i.alloc(0);8*o.length<e.bitLength();)t.v=n(r,t.k).update(t.v).digest(),o=i.concat([o,t.v]);a=d(o,e),t.k=n(r,t.k).update(t.v).update(i.from([0])).digest(),t.v=n(r,t.k).update(t.v).digest()}while(-1!==a.cmp(e));return a}function l(e,t,r,i){return e.toRed(s.mont(r)).redPow(t).fromRed().mod(i)}e.exports=function(e,t,r,n,p){var b=f(t);if(b.curve){if("ecdsa"!==n&&"ecdsa/rsa"!==n)throw new Error("wrong private key type");return function(e,t){var r=c[t.curve.join(".")];if(!r)throw new Error("unknown curve "+t.curve.join("."));var n=new a(r).keyFromPrivate(t.privateKey).sign(e);return i.from(n.toDER())}(e,b)}if("dsa"===b.type){if("dsa"!==n)throw new Error("wrong private key type");return function(e,t,r){var n,o=t.params.priv_key,a=t.params.p,f=t.params.q,c=t.params.g,p=new s(0),b=d(e,f).mod(f),y=!1,v=h(o,f,e,r);for(;!1===y;)n=u(f,v,r),p=l(c,n,a,f),0===(y=n.invm(f).imul(b.add(o.mul(p))).mod(f)).cmpn(0)&&(y=!1,p=new s(0));return function(e,t){e=e.toArray(),t=t.toArray(),128&e[0]&&(e=[0].concat(e));128&t[0]&&(t=[0].concat(t));var r=[48,e.length+t.length+4,2,e.length];return r=r.concat(e,[2,t.length],t),i.from(r)}(p,y)}(e,b,r)}if("rsa"!==n&&"ecdsa/rsa"!==n)throw new Error("wrong private key type");e=i.concat([p,e]);for(var y=b.modulus.byteLength(),v=[0,1];e.length+v.length+1<y;)v.push(255);v.push(0);for(var g=-1;++g<e.length;)v.push(e[g]);return o(v,b)},e.exports.getKey=h,e.exports.makeKey=u},function(e){e.exports=JSON.parse('{"_args":[["elliptic@6.5.2","/home/ggondim/repos/github-noalvo/auth0-kits/vue-cross-storage/vue-cross-storage-client"]],"_development":true,"_from":"elliptic@6.5.2","_id":"elliptic@6.5.2","_inBundle":false,"_integrity":"sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"elliptic@6.5.2","name":"elliptic","escapedName":"elliptic","rawSpec":"6.5.2","saveSpec":null,"fetchSpec":"6.5.2"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz","_spec":"6.5.2","_where":"/home/ggondim/repos/github-noalvo/auth0-kits/vue-cross-storage/vue-cross-storage-client","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},"description":"EC cryptography","devDependencies":{"brfs":"^1.4.3","coveralls":"^3.0.8","grunt":"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.2","jscs":"^3.0.7","jshint":"^2.10.3","mocha":"^6.2.2"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.5.2"}')},function(e,t,r){"use strict";var i=r(7),n=r(3),o=r(0),a=r(28),s=i.assert;function f(e){a.call(this,"short",e),this.a=new n(e.a,16).toRed(this.red),this.b=new n(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function c(e,t,r,i){a.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new n(t,16),this.y=new n(r,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function h(e,t,r,i){a.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new n(0)):(this.x=new n(t,16),this.y=new n(r,16),this.z=new n(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}o(f,a),e.exports=f,f.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new n(e.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);t=(t=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(e.lambda)r=new n(e.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(t))?r=o[0]:(r=o[1],s(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map((function(e){return{a:new n(e.a,16),b:new n(e.b,16)}})):this._getEndoBasis(r)}}},f.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:n.mont(e),r=new n(2).toRed(t).redInvm(),i=r.redNeg(),o=new n(3).toRed(t).redNeg().redSqrt().redMul(r);return[i.redAdd(o).fromRed(),i.redSub(o).fromRed()]},f.prototype._getEndoBasis=function(e){for(var t,r,i,o,a,s,f,c,h,d=this.n.ushrn(Math.floor(this.n.bitLength()/2)),u=e,l=this.n.clone(),p=new n(1),b=new n(0),y=new n(0),v=new n(1),g=0;0!==u.cmpn(0);){var m=l.div(u);c=l.sub(m.mul(u)),h=y.sub(m.mul(p));var _=v.sub(m.mul(b));if(!i&&c.cmp(d)<0)t=f.neg(),r=p,i=c.neg(),o=h;else if(i&&2==++g)break;f=c,l=u,u=c,y=p,p=h,v=b,b=_}a=c.neg(),s=h;var w=i.sqr().add(o.sqr());return a.sqr().add(s.sqr()).cmp(w)>=0&&(a=t,s=r),i.negative&&(i=i.neg(),o=o.neg()),a.negative&&(a=a.neg(),s=s.neg()),[{a:i,b:o},{a:a,b:s}]},f.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],i=t[1],n=i.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),a=n.mul(r.a),s=o.mul(i.a),f=n.mul(r.b),c=o.mul(i.b);return{k1:e.sub(a).sub(s),k2:f.add(c).neg()}},f.prototype.pointFromX=function(e,t){(e=new n(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),i=r.redSqrt();if(0!==i.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var o=i.fromRed().isOdd();return(t&&!o||!t&&o)&&(i=i.redNeg()),this.point(e,i)},f.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,i=this.a.redMul(t),n=t.redSqr().redMul(t).redIAdd(i).redIAdd(this.b);return 0===r.redSqr().redISub(n).cmpn(0)},f.prototype._endoWnafMulAdd=function(e,t,r){for(var i=this._endoWnafT1,n=this._endoWnafT2,o=0;o<e.length;o++){var a=this._endoSplit(t[o]),s=e[o],f=s._getBeta();a.k1.negative&&(a.k1.ineg(),s=s.neg(!0)),a.k2.negative&&(a.k2.ineg(),f=f.neg(!0)),i[2*o]=s,i[2*o+1]=f,n[2*o]=a.k1,n[2*o+1]=a.k2}for(var c=this._wnafMulAdd(1,i,n,2*o,r),h=0;h<2*o;h++)i[h]=null,n[h]=null;return c},o(c,a.BasePoint),f.prototype.point=function(e,t,r){return new c(this,e,t,r)},f.prototype.pointFromJSON=function(e,t){return c.fromJSON(this,e,t)},c.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,i=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(i)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(i)}}}return t}},c.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},c.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var i=e.point(t[0],t[1],r);if(!t[2])return i;function n(t){return e.point(t[0],t[1],r)}var o=t[2];return i.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[i].concat(o.doubles.points.map(n))},naf:o.naf&&{wnd:o.naf.wnd,points:[i].concat(o.naf.points.map(n))}},i},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return this.inf},c.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),i=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,i)},c.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),i=e.redInvm(),n=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(i),o=n.redSqr().redISub(this.x.redAdd(this.x)),a=n.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,a)},c.prototype.getX=function(){return this.x.fromRed()},c.prototype.getY=function(){return this.y.fromRed()},c.prototype.mul=function(e){return e=new n(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){var i=[this,t],n=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n):this.curve._wnafMulAdd(1,i,n,2)},c.prototype.jmulAdd=function(e,t,r){var i=[this,t],n=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n,!0):this.curve._wnafMulAdd(1,i,n,2,!0)},c.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},c.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,i=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(i)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(i)}}}return t},c.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(h,a.BasePoint),f.prototype.jpoint=function(e,t,r){return new h(this,e,t,r)},h.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),i=this.y.redMul(t).redMul(e);return this.curve.point(r,i)},h.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},h.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),i=this.x.redMul(t),n=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),a=e.y.redMul(r.redMul(this.z)),s=i.redSub(n),f=o.redSub(a);if(0===s.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),h=c.redMul(s),d=i.redMul(c),u=f.redSqr().redIAdd(h).redISub(d).redISub(d),l=f.redMul(d.redISub(u)).redISub(o.redMul(h)),p=this.z.redMul(e.z).redMul(s);return this.curve.jpoint(u,l,p)},h.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,i=e.x.redMul(t),n=this.y,o=e.y.redMul(t).redMul(this.z),a=r.redSub(i),s=n.redSub(o);if(0===a.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var f=a.redSqr(),c=f.redMul(a),h=r.redMul(f),d=s.redSqr().redIAdd(c).redISub(h).redISub(h),u=s.redMul(h.redISub(d)).redISub(n.redMul(c)),l=this.z.redMul(a);return this.curve.jpoint(d,u,l)},h.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var i=this.curve.a,n=this.curve.tinv,o=this.x,a=this.y,s=this.z,f=s.redSqr().redSqr(),c=a.redAdd(a);for(r=0;r<e;r++){var h=o.redSqr(),d=c.redSqr(),u=d.redSqr(),l=h.redAdd(h).redIAdd(h).redIAdd(i.redMul(f)),p=o.redMul(d),b=l.redSqr().redISub(p.redAdd(p)),y=p.redISub(b),v=l.redMul(y);v=v.redIAdd(v).redISub(u);var g=c.redMul(s);r+1<e&&(f=f.redMul(u)),o=b,s=g,c=v}return this.curve.jpoint(o,c.redMul(n),s)},h.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},h.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),a=this.x.redAdd(n).redSqr().redISub(i).redISub(o);a=a.redIAdd(a);var s=i.redAdd(i).redIAdd(i),f=s.redSqr().redISub(a).redISub(a),c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),e=f,t=s.redMul(a.redISub(f)).redISub(c),r=this.y.redAdd(this.y)}else{var h=this.x.redSqr(),d=this.y.redSqr(),u=d.redSqr(),l=this.x.redAdd(d).redSqr().redISub(h).redISub(u);l=l.redIAdd(l);var p=h.redAdd(h).redIAdd(h),b=p.redSqr(),y=u.redIAdd(u);y=(y=y.redIAdd(y)).redIAdd(y),e=b.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},h.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),a=this.x.redAdd(n).redSqr().redISub(i).redISub(o);a=a.redIAdd(a);var s=i.redAdd(i).redIAdd(i).redIAdd(this.curve.a),f=s.redSqr().redISub(a).redISub(a);e=f;var c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),t=s.redMul(a.redISub(f)).redISub(c),r=this.y.redAdd(this.y)}else{var h=this.z.redSqr(),d=this.y.redSqr(),u=this.x.redMul(d),l=this.x.redSub(h).redMul(this.x.redAdd(h));l=l.redAdd(l).redIAdd(l);var p=u.redIAdd(u),b=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(d).redISub(h);var y=d.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(p.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},h.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,i=this.z,n=i.redSqr().redSqr(),o=t.redSqr(),a=r.redSqr(),s=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(n)),f=t.redAdd(t),c=(f=f.redIAdd(f)).redMul(a),h=s.redSqr().redISub(c.redAdd(c)),d=c.redISub(h),u=a.redSqr();u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l=s.redMul(d).redISub(u),p=r.redAdd(r).redMul(i);return this.curve.jpoint(h,l,p)},h.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),i=t.redSqr(),n=e.redAdd(e).redIAdd(e),o=n.redSqr(),a=this.x.redAdd(t).redSqr().redISub(e).redISub(i),s=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),f=i.redIAdd(i);f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var c=n.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(f),h=t.redMul(c);h=(h=h.redIAdd(h)).redIAdd(h);var d=this.x.redMul(s).redISub(h);d=(d=d.redIAdd(d)).redIAdd(d);var u=this.y.redMul(c.redMul(f.redISub(c)).redISub(a.redMul(s)));u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l=this.z.redAdd(a).redSqr().redISub(r).redISub(s);return this.curve.jpoint(d,u,l)},h.prototype.mul=function(e,t){return e=new n(e,t),this.curve._wnafMul(this,e)},h.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var i=t.redMul(this.z),n=r.redMul(e.z);return 0===this.y.redMul(n).redISub(e.y.redMul(i)).cmpn(0)},h.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var i=e.clone(),n=this.curve.redN.redMul(t);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(n),0===this.x.cmp(r))return!0}},h.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},h.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var i=r(3),n=r(0),o=r(28),a=r(7);function s(e){o.call(this,"mont",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.i4=new i(4).toRed(this.red).redInvm(),this.two=new i(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function f(e,t,r){o.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new i(t,16),this.z=new i(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}n(s,o),e.exports=s,s.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),i=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===i.redSqrt().redSqr().cmp(i)},n(f,o.BasePoint),s.prototype.decodePoint=function(e,t){return this.point(a.toArray(e,t),1)},s.prototype.point=function(e,t){return new f(this,e,t)},s.prototype.pointFromJSON=function(e){return f.fromJSON(this,e)},f.prototype.precompute=function(){},f.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},f.fromJSON=function(e,t){return new f(e,t[0],t[1]||e.one)},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},f.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),i=e.redMul(t),n=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(i,n)},f.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),i=this.x.redSub(this.z),n=e.x.redAdd(e.z),o=e.x.redSub(e.z).redMul(r),a=n.redMul(i),s=t.z.redMul(o.redAdd(a).redSqr()),f=t.x.redMul(o.redISub(a).redSqr());return this.curve.point(s,f)},f.prototype.mul=function(e){for(var t=e.clone(),r=this,i=this.curve.point(null,null),n=[];0!==t.cmpn(0);t.iushrn(1))n.push(t.andln(1));for(var o=n.length-1;o>=0;o--)0===n[o]?(r=r.diffAdd(i,this),i=i.dbl()):(i=r.diffAdd(i,this),r=r.dbl());return i},f.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},f.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},f.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var i=r(7),n=r(3),o=r(0),a=r(28),s=i.assert;function f(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,a.call(this,"edwards",e),this.a=new n(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new n(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new n(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function c(e,t,r,i,o){a.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===i?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new n(t,16),this.y=new n(r,16),this.z=i?new n(i,16):this.curve.one,this.t=o&&new n(o,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}o(f,a),e.exports=f,f.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},f.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},f.prototype.jpoint=function(e,t,r,i){return this.point(e,t,r,i)},f.prototype.pointFromX=function(e,t){(e=new n(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),i=this.c2.redSub(this.a.redMul(r)),o=this.one.redSub(this.c2.redMul(this.d).redMul(r)),a=i.redMul(o.redInvm()),s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");var f=s.fromRed().isOdd();return(t&&!f||!t&&f)&&(s=s.redNeg()),this.point(e,s)},f.prototype.pointFromY=function(e,t){(e=new n(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),i=r.redSub(this.c2),o=r.redMul(this.d).redMul(this.c2).redSub(this.a),a=i.redMul(o.redInvm());if(0===a.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==t&&(s=s.redNeg()),this.point(s,e)},f.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),i=t.redMul(this.a).redAdd(r),n=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===i.cmp(n)},o(c,a.BasePoint),f.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},f.prototype.point=function(e,t,r,i){return new c(this,e,t,r,i)},c.fromJSON=function(e,t){return new c(e,t[0],t[1],t[2])},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},c.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var i=this.curve._mulA(e),n=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),o=i.redAdd(t),a=o.redSub(r),s=i.redSub(t),f=n.redMul(a),c=o.redMul(s),h=n.redMul(s),d=a.redMul(o);return this.curve.point(f,c,d,h)},c.prototype._projDbl=function(){var e,t,r,i=this.x.redAdd(this.y).redSqr(),n=this.x.redSqr(),o=this.y.redSqr();if(this.curve.twisted){var a=(c=this.curve._mulA(n)).redAdd(o);if(this.zOne)e=i.redSub(n).redSub(o).redMul(a.redSub(this.curve.two)),t=a.redMul(c.redSub(o)),r=a.redSqr().redSub(a).redSub(a);else{var s=this.z.redSqr(),f=a.redSub(s).redISub(s);e=i.redSub(n).redISub(o).redMul(f),t=a.redMul(c.redSub(o)),r=a.redMul(f)}}else{var c=n.redAdd(o);s=this.curve._mulC(this.z).redSqr(),f=c.redSub(s).redSub(s);e=this.curve._mulC(i.redISub(c)).redMul(f),t=this.curve._mulC(c).redMul(n.redISub(o)),r=c.redMul(f)}return this.curve.point(e,t,r)},c.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},c.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),i=this.t.redMul(this.curve.dd).redMul(e.t),n=this.z.redMul(e.z.redAdd(e.z)),o=r.redSub(t),a=n.redSub(i),s=n.redAdd(i),f=r.redAdd(t),c=o.redMul(a),h=s.redMul(f),d=o.redMul(f),u=a.redMul(s);return this.curve.point(c,h,u,d)},c.prototype._projAdd=function(e){var t,r,i=this.z.redMul(e.z),n=i.redSqr(),o=this.x.redMul(e.x),a=this.y.redMul(e.y),s=this.curve.d.redMul(o).redMul(a),f=n.redSub(s),c=n.redAdd(s),h=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a),d=i.redMul(f).redMul(h);return this.curve.twisted?(t=i.redMul(c).redMul(a.redSub(this.curve._mulA(o))),r=f.redMul(c)):(t=i.redMul(c).redMul(a.redSub(o)),r=this.curve._mulC(f).redMul(c)),this.curve.point(d,t,r)},c.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},c.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},c.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},c.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},c.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()},c.prototype.getY=function(){return this.normalize(),this.y.fromRed()},c.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},c.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),i=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(i),0===this.x.cmp(t))return!0}},c.prototype.toP=c.prototype.normalize,c.prototype.mixedAdd=c.prototype.add},function(e,t,r){"use strict";t.sha1=r(146),t.sha224=r(147),t.sha256=r(79),t.sha384=r(148),t.sha512=r(80)},function(e,t,r){"use strict";var i=r(9),n=r(22),o=r(78),a=i.rotl32,s=i.sum32,f=i.sum32_5,c=o.ft_1,h=n.BlockHash,d=[1518500249,1859775393,2400959708,3395469782];function u(){if(!(this instanceof u))return new u;h.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}i.inherits(u,h),e.exports=u,u.blockSize=512,u.outSize=160,u.hmacStrength=80,u.padLength=64,u.prototype._update=function(e,t){for(var r=this.W,i=0;i<16;i++)r[i]=e[t+i];for(;i<r.length;i++)r[i]=a(r[i-3]^r[i-8]^r[i-14]^r[i-16],1);var n=this.h[0],o=this.h[1],h=this.h[2],u=this.h[3],l=this.h[4];for(i=0;i<r.length;i++){var p=~~(i/20),b=f(a(n,5),c(p,o,h,u),l,r[i],d[p]);l=u,u=h,h=a(o,30),o=n,n=b}this.h[0]=s(this.h[0],n),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],h),this.h[3]=s(this.h[3],u),this.h[4]=s(this.h[4],l)},u.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t,r){"use strict";var i=r(9),n=r(79);function o(){if(!(this instanceof o))return new o;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}i.inherits(o,n),e.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h.slice(0,7),"big"):i.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var i=r(9),n=r(80);function o(){if(!(this instanceof o))return new o;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}i.inherits(o,n),e.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h.slice(0,12),"big"):i.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var i=r(9),n=r(22),o=i.rotl32,a=i.sum32,s=i.sum32_3,f=i.sum32_4,c=n.BlockHash;function h(){if(!(this instanceof h))return new h;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function d(e,t,r,i){return e<=15?t^r^i:e<=31?t&r|~t&i:e<=47?(t|~r)^i:e<=63?t&i|r&~i:t^(r|~i)}function u(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}i.inherits(h,c),t.ripemd160=h,h.blockSize=512,h.outSize=160,h.hmacStrength=192,h.padLength=64,h.prototype._update=function(e,t){for(var r=this.h[0],i=this.h[1],n=this.h[2],c=this.h[3],h=this.h[4],g=r,m=i,_=n,w=c,S=h,E=0;E<80;E++){var M=a(o(f(r,d(E,i,n,c),e[p[E]+t],u(E)),y[E]),h);r=h,h=c,c=o(n,10),n=i,i=M,M=a(o(f(g,d(79-E,m,_,w),e[b[E]+t],l(E)),v[E]),S),g=S,S=w,w=o(_,10),_=m,m=M}M=s(this.h[1],n,w),this.h[1]=s(this.h[2],c,S),this.h[2]=s(this.h[3],h,g),this.h[3]=s(this.h[4],r,m),this.h[4]=s(this.h[0],i,_),this.h[0]=M},h.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var i=r(9),n=r(6);function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(i.toArray(t,r))}e.exports=o,o.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),n(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var i=r(3),n=r(153),o=r(7),a=r(43),s=r(40),f=o.assert,c=r(154),h=r(155);function d(e){if(!(this instanceof d))return new d(e);"string"==typeof e&&(f(a.hasOwnProperty(e),"Unknown curve "+e),e=a[e]),e instanceof a.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=d,d.prototype.keyPair=function(e){return new c(this,e)},d.prototype.keyFromPrivate=function(e,t){return c.fromPrivate(this,e,t)},d.prototype.keyFromPublic=function(e,t){return c.fromPublic(this,e,t)},d.prototype.genKeyPair=function(e){e||(e={});for(var t=new n({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||s(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),o=this.n.sub(new i(2));;){var a=new i(t.generate(r));if(!(a.cmp(o)>0))return a.iaddn(1),this.keyFromPrivate(a)}},d.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},d.prototype.sign=function(e,t,r,o){"object"==typeof r&&(o=r,r=null),o||(o={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new i(e,16));for(var a=this.n.byteLength(),s=t.getPrivate().toArray("be",a),f=e.toArray("be",a),c=new n({hash:this.hash,entropy:s,nonce:f,pers:o.pers,persEnc:o.persEnc||"utf8"}),d=this.n.sub(new i(1)),u=0;;u++){var l=o.k?o.k(u):new i(c.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(d)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),y=b.umod(this.n);if(0!==y.cmpn(0)){var v=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(v=v.umod(this.n)).cmpn(0)){var g=(p.getY().isOdd()?1:0)|(0!==b.cmp(y)?2:0);return o.canonical&&v.cmp(this.nh)>0&&(v=this.n.sub(v),g^=1),new h({r:y,s:v,recoveryParam:g})}}}}}},d.prototype.verify=function(e,t,r,n){e=this._truncateToN(new i(e,16)),r=this.keyFromPublic(r,n);var o=(t=new h(t,"hex")).r,a=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var s,f=a.invm(this.n),c=f.mul(e).umod(this.n),d=f.mul(o).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(c,r.getPublic(),d)).isInfinity()&&s.eqXToP(o):!(s=this.g.mulAdd(c,r.getPublic(),d)).isInfinity()&&0===s.getX().umod(this.n).cmp(o)},d.prototype.recoverPubKey=function(e,t,r,n){f((3&r)===r,"The recovery param is more than two bits"),t=new h(t,n);var o=this.n,a=new i(e),s=t.r,c=t.s,d=1&r,u=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&u)throw new Error("Unable to find sencond key candinate");s=u?this.curve.pointFromX(s.add(this.curve.n),d):this.curve.pointFromX(s,d);var l=t.r.invm(o),p=o.sub(a).mul(l).umod(o),b=c.mul(l).umod(o);return this.g.mulAdd(p,s,b)},d.prototype.getKeyRecoveryParam=function(e,t,r,i){if(null!==(t=new h(t,i)).recoveryParam)return t.recoveryParam;for(var n=0;n<4;n++){var o;try{o=this.recoverPubKey(e,t,n)}catch(e){continue}if(o.eq(r))return n}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var i=r(44),n=r(76),o=r(6);function a(e){if(!(this instanceof a))return new a(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=n.toArray(e.entropy,e.entropyEnc||"hex"),r=n.toArray(e.nonce,e.nonceEnc||"hex"),i=n.toArray(e.pers,e.persEnc||"hex");o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,i)}e.exports=a,a.prototype._init=function(e,t,r){var i=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var n=0;n<this.V.length;n++)this.K[n]=0,this.V[n]=1;this._update(i),this._reseed=1,this.reseedInterval=281474976710656},a.prototype._hmac=function(){return new i.hmac(this.hash,this.K)},a.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},a.prototype.reseed=function(e,t,r,i){"string"!=typeof t&&(i=r,r=t,t=null),e=n.toArray(e,t),r=n.toArray(r,i),o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},a.prototype.generate=function(e,t,r,i){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(i=r,r=t,t=null),r&&(r=n.toArray(r,i||"hex"),this._update(r));for(var o=[];o.length<e;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var a=o.slice(0,e);return this._update(r),this._reseed++,n.encode(a,t)}},function(e,t,r){"use strict";var i=r(3),n=r(7).assert;function o(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=o,o.fromPublic=function(e,t,r){return t instanceof o?t:new o(e,{pub:t,pubEnc:r})},o.fromPrivate=function(e,t,r){return t instanceof o?t:new o(e,{priv:t,privEnc:r})},o.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},o.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(e,t){this.priv=new i(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?n(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||n(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},o.prototype.derive=function(e){return e.mul(this.priv).getX()},o.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},o.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var i=r(3),n=r(7),o=n.assert;function a(e,t){if(e instanceof a)return e;this._importDER(e,t)||(o(e.r&&e.s,"Signature without r or s"),this.r=new i(e.r,16),this.s=new i(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function s(){this.place=0}function f(e,t){var r=e[t.place++];if(!(128&r))return r;for(var i=15&r,n=0,o=0,a=t.place;o<i;o++,a++)n<<=8,n|=e[a];return t.place=a,n}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function h(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=a,a.prototype._importDER=function(e,t){e=n.toArray(e,t);var r=new s;if(48!==e[r.place++])return!1;if(f(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var o=f(e,r),a=e.slice(r.place,o+r.place);if(r.place+=o,2!==e[r.place++])return!1;var c=f(e,r);if(e.length!==c+r.place)return!1;var h=e.slice(r.place,c+r.place);return 0===a[0]&&128&a[1]&&(a=a.slice(1)),0===h[0]&&128&h[1]&&(h=h.slice(1)),this.r=new i(a),this.s=new i(h),this.recoveryParam=null,!0},a.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var i=[2];h(i,t.length),(i=i.concat(t)).push(2),h(i,r.length);var o=i.concat(r),a=[48];return h(a,o.length),a=a.concat(o),n.encode(a,e)}},function(e,t,r){"use strict";var i=r(44),n=r(43),o=r(7),a=o.assert,s=o.parseBytes,f=r(157),c=r(158);function h(e){if(a("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof h))return new h(e);e=n[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=i.sha512}e.exports=h,h.prototype.sign=function(e,t){e=s(e);var r=this.keyFromSecret(t),i=this.hashInt(r.messagePrefix(),e),n=this.g.mul(i),o=this.encodePoint(n),a=this.hashInt(o,r.pubBytes(),e).mul(r.priv()),f=i.add(a).umod(this.curve.n);return this.makeSignature({R:n,S:f,Rencoded:o})},h.prototype.verify=function(e,t,r){e=s(e),t=this.makeSignature(t);var i=this.keyFromPublic(r),n=this.hashInt(t.Rencoded(),i.pubBytes(),e),o=this.g.mul(t.S());return t.R().add(i.pub().mul(n)).eq(o)},h.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return o.intFromLE(e.digest()).umod(this.curve.n)},h.prototype.keyFromPublic=function(e){return f.fromPublic(this,e)},h.prototype.keyFromSecret=function(e){return f.fromSecret(this,e)},h.prototype.makeSignature=function(e){return e instanceof c?e:new c(this,e)},h.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},h.prototype.decodePoint=function(e){var t=(e=o.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),i=0!=(128&e[t]),n=o.intFromLE(r);return this.curve.pointFromY(n,i)},h.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},h.prototype.decodeInt=function(e){return o.intFromLE(e)},h.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var i=r(7),n=i.assert,o=i.parseBytes,a=i.cachedProperty;function s(e,t){this.eddsa=e,this._secret=o(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=o(t.pub)}s.fromPublic=function(e,t){return t instanceof s?t:new s(e,{pub:t})},s.fromSecret=function(e,t){return t instanceof s?t:new s(e,{secret:t})},s.prototype.secret=function(){return this._secret},a(s,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),a(s,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),a(s,"privBytes",(function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,i=t.slice(0,e.encodingLength);return i[0]&=248,i[r]&=127,i[r]|=64,i})),a(s,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),a(s,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),a(s,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),s.prototype.sign=function(e){return n(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},s.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},s.prototype.getSecret=function(e){return n(this._secret,"KeyPair is public only"),i.encode(this.secret(),e)},s.prototype.getPublic=function(e){return i.encode(this.pubBytes(),e)},e.exports=s},function(e,t,r){"use strict";var i=r(3),n=r(7),o=n.assert,a=n.cachedProperty,s=n.parseBytes;function f(e,t){this.eddsa=e,"object"!=typeof t&&(t=s(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),o(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof i&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}a(f,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),a(f,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),a(f,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),a(f,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),f.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},f.prototype.toHex=function(){return n.encode(this.toBytes(),"hex").toUpperCase()},e.exports=f},function(e,t,r){"use strict";var i=r(23);t.certificate=r(169);var n=i.define("RSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())}));t.RSAPrivateKey=n;var o=i.define("RSAPublicKey",(function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())}));t.RSAPublicKey=o;var a=i.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())}));t.PublicKey=a;var s=i.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())})),f=i.define("PrivateKeyInfo",(function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(s),this.key("subjectPrivateKey").octstr())}));t.PrivateKey=f;var c=i.define("EncryptedPrivateKeyInfo",(function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())}));t.EncryptedPrivateKey=c;var h=i.define("DSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())}));t.DSAPrivateKey=h,t.DSAparam=i.define("DSAparam",(function(){this.int()}));var d=i.define("ECPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(u),this.key("publicKey").optional().explicit(1).bitstr())}));t.ECPrivateKey=d;var u=i.define("ECParameters",(function(){this.choice({namedCurve:this.objid()})}));t.signature=i.define("signature",(function(){this.seq().obj(this.key("r").int(),this.key("s").int())}))},function(e,t,r){var i=r(23),n=r(0);function o(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new o(e,t)},o.prototype._createNamed=function(e){var t;try{t=r(161).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return n(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},o.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(i.decoders[e])),this.decoders[e]},o.prototype.decode=function(e,t,r){return this._getDecoder(t).decode(e,r)},o.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(i.encoders[e])),this.encoders[e]},o.prototype.encode=function(e,t,r){return this._getEncoder(t).encode(e,r)}},function(module,exports){var indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var r=0;r<e.length;r++)if(e[r]===t)return r;return-1},Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,i=r.eval,n=r.execScript;!i&&n&&(n.call(r,"null"),i=r.eval),forEach(Object_keys(e),(function(t){r[t]=e[t]})),forEach(globals,(function(t){e[t]&&(r[t]=e[t])}));var o=Object_keys(r),a=i.call(r,this.code);return forEach(Object_keys(r),(function(t){(t in e||-1===indexOf(o,t))&&(e[t]=r[t])})),forEach(globals,(function(t){t in e||defineProp(e,t,r[t])})),document.body.removeChild(t),a},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return e&&forEach(Object_keys(t),(function(r){e[r]=t[r]})),r},forEach(Object_keys(Script.prototype),(function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}})),exports.isContext=function(e){return e instanceof Context},exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),(function(r){t[r]=e[r]})),t}},function(e,t,r){var i=r(0);function n(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function o(e,t){this.path=e,this.rethrow(t)}t.Reporter=n,n.prototype.isError=function(e){return e instanceof o},n.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},n.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},n.prototype.enterKey=function(e){return this._reporterState.path.push(e)},n.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},n.prototype.leaveKey=function(e,t,r){var i=this._reporterState;this.exitKey(e),null!==i.obj&&(i.obj[t]=r)},n.prototype.path=function(){return this._reporterState.path.join("/")},n.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},n.prototype.leaveObject=function(e){var t=this._reporterState,r=t.obj;return t.obj=e,r},n.prototype.error=function(e){var t,r=this._reporterState,i=e instanceof o;if(t=i?e:new o(r.path.map((function(e){return"["+JSON.stringify(e)+"]"})).join(""),e.message||e,e.stack),!r.options.partial)throw t;return i||r.errors.push(t),t},n.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},i(o,Error),o.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,o),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,r){var i=r(24).Reporter,n=r(24).EncoderBuffer,o=r(24).DecoderBuffer,a=r(6),s=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],f=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(s);function c(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}e.exports=c;var h=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];c.prototype.clone=function(){var e=this._baseState,t={};h.forEach((function(r){t[r]=e[r]}));var r=new this.constructor(t.parent);return r._baseState=t,r},c.prototype._wrap=function(){var e=this._baseState;f.forEach((function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}}),this)},c.prototype._init=function(e){var t=this._baseState;a(null===t.parent),e.call(this),t.children=t.children.filter((function(e){return e._baseState.parent===this}),this),a.equal(t.children.length,1,"Root node can have only one child")},c.prototype._useArgs=function(e){var t=this._baseState,r=e.filter((function(e){return e instanceof this.constructor}),this);e=e.filter((function(e){return!(e instanceof this.constructor)}),this),0!==r.length&&(a(null===t.children),t.children=r,r.forEach((function(e){e._baseState.parent=this}),this)),0!==e.length&&(a(null===t.args),t.args=e,t.reverseArgs=e.map((function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach((function(r){r==(0|r)&&(r|=0);var i=e[r];t[i]=r})),t})))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach((function(e){c.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}})),s.forEach((function(e){c.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return a(null===t.tag),t.tag=e,this._useArgs(r),this}})),c.prototype.use=function(e){a(e);var t=this._baseState;return a(null===t.use),t.use=e,this},c.prototype.optional=function(){return this._baseState.optional=!0,this},c.prototype.def=function(e){var t=this._baseState;return a(null===t.default),t.default=e,t.optional=!0,this},c.prototype.explicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.explicit=e,this},c.prototype.implicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.implicit=e,this},c.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},c.prototype.key=function(e){var t=this._baseState;return a(null===t.key),t.key=e,this},c.prototype.any=function(){return this._baseState.any=!0,this},c.prototype.choice=function(e){var t=this._baseState;return a(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map((function(t){return e[t]}))),this},c.prototype.contains=function(e){var t=this._baseState;return a(null===t.use),t.contains=e,this},c.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var i,n=r.default,a=!0,s=null;if(null!==r.key&&(s=e.enterKey(r.key)),r.optional){var f=null;if(null!==r.explicit?f=r.explicit:null!==r.implicit?f=r.implicit:null!==r.tag&&(f=r.tag),null!==f||r.any){if(a=this._peekTag(e,f,r.any),e.isError(a))return a}else{var c=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),a=!0}catch(e){a=!1}e.restore(c)}}if(r.obj&&a&&(i=e.enterObject()),a){if(null!==r.explicit){var h=this._decodeTag(e,r.explicit);if(e.isError(h))return h;e=h}var d=e.offset;if(null===r.use&&null===r.choice){if(r.any)c=e.save();var u=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(u))return u;r.any?n=e.raw(c):e=u}if(t&&t.track&&null!==r.tag&&t.track(e.path(),d,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),n=r.any?n:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(n))return n;if(r.any||null!==r.choice||null===r.children||r.children.forEach((function(r){r._decode(e,t)})),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var l=new o(n);n=this._getUse(r.contains,e._reporterState.obj)._decode(l,t)}}return r.obj&&a&&(n=e.leaveObject(i)),null===r.key||null===n&&!0!==a?null!==s&&e.exitKey(s):e.leaveKey(s,r.key,n),n},c.prototype._decodeGeneric=function(e,t,r){var i=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,i.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&i.args?this._decodeObjid(t,i.args[0],i.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,i.args&&i.args[0],r):null!==i.use?this._getUse(i.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},c.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),a(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},c.prototype._decodeChoice=function(e,t){var r=this._baseState,i=null,n=!1;return Object.keys(r.choice).some((function(o){var a=e.save(),s=r.choice[o];try{var f=s._decode(e,t);if(e.isError(f))return!1;i={type:o,value:f},n=!0}catch(t){return e.restore(a),!1}return!0}),this),n?i:e.error("Choice not matched")},c.prototype._createEncoderBuffer=function(e){return new n(e,this.reporter)},c.prototype._encode=function(e,t,r){var i=this._baseState;if(null===i.default||i.default!==e){var n=this._encodeValue(e,t,r);if(void 0!==n&&!this._skipDefault(n,t,r))return n}},c.prototype._encodeValue=function(e,t,r){var n=this._baseState;if(null===n.parent)return n.children[0]._encode(e,t||new i);var o=null;if(this.reporter=t,n.optional&&void 0===e){if(null===n.default)return;e=n.default}var a=null,s=!1;if(n.any)o=this._createEncoderBuffer(e);else if(n.choice)o=this._encodeChoice(e,t);else if(n.contains)a=this._getUse(n.contains,r)._encode(e,t),s=!0;else if(n.children)a=n.children.map((function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var i=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var n=r._encode(e[r._baseState.key],t,e);return t.leaveKey(i),n}),this).filter((function(e){return e})),a=this._createEncoderBuffer(a);else if("seqof"===n.tag||"setof"===n.tag){if(!n.args||1!==n.args.length)return t.error("Too many args for : "+n.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var f=this.clone();f._baseState.implicit=null,a=this._createEncoderBuffer(e.map((function(r){var i=this._baseState;return this._getUse(i.args[0],e)._encode(r,t)}),f))}else null!==n.use?o=this._getUse(n.use,r)._encode(e,t):(a=this._encodePrimitive(n.tag,e),s=!0);if(!n.any&&null===n.choice){var c=null!==n.implicit?n.implicit:n.tag,h=null===n.implicit?"universal":"context";null===c?null===n.use&&t.error("Tag could be omitted only for .use()"):null===n.use&&(o=this._encodeComposite(c,s,h,a))}return null!==n.explicit&&(o=this._encodeComposite(n.explicit,!1,"context",o)),o},c.prototype._encodeChoice=function(e,t){var r=this._baseState,i=r.choice[e.type];return i||a(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),i._encode(e.value,t)},c.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},c.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},c.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,r){var i=r(82);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=i._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=i._reverse(t.tag)},function(e,t,r){var i=t;i.der=r(83),i.pem=r(166)},function(e,t,r){var i=r(0),n=r(4).Buffer,o=r(83);function a(e){o.call(this,e),this.enc="pem"}i(a,o),e.exports=a,a.prototype.decode=function(e,t){for(var r=e.toString().split(/[\r\n]+/g),i=t.label.toUpperCase(),a=/^-----(BEGIN|END) ([^-]+)-----$/,s=-1,f=-1,c=0;c<r.length;c++){var h=r[c].match(a);if(null!==h&&h[2]===i){if(-1!==s){if("END"!==h[1])break;f=c;break}if("BEGIN"!==h[1])break;s=c}}if(-1===s||-1===f)throw new Error("PEM section not found for: "+i);var d=r.slice(s+1,f).join("");d.replace(/[^a-z0-9\+\/=]+/gi,"");var u=new n(d,"base64");return o.prototype.decode.call(this,u,t)}},function(e,t,r){var i=t;i.der=r(84),i.pem=r(168)},function(e,t,r){var i=r(0),n=r(84);function o(e){n.call(this,e),this.enc="pem"}i(o,n),e.exports=o,o.prototype.encode=function(e,t){for(var r=n.prototype.encode.call(this,e).toString("base64"),i=["-----BEGIN "+t.label+"-----"],o=0;o<r.length;o+=64)i.push(r.slice(o,o+64));return i.push("-----END "+t.label+"-----"),i.join("\n")}},function(e,t,r){"use strict";var i=r(23),n=i.define("Time",(function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})})),o=i.define("AttributeTypeValue",(function(){this.seq().obj(this.key("type").objid(),this.key("value").any())})),a=i.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional(),this.key("curve").objid().optional())})),s=i.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(a),this.key("subjectPublicKey").bitstr())})),f=i.define("RelativeDistinguishedName",(function(){this.setof(o)})),c=i.define("RDNSequence",(function(){this.seqof(f)})),h=i.define("Name",(function(){this.choice({rdnSequence:this.use(c)})})),d=i.define("Validity",(function(){this.seq().obj(this.key("notBefore").use(n),this.key("notAfter").use(n))})),u=i.define("Extension",(function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())})),l=i.define("TBSCertificate",(function(){this.seq().obj(this.key("version").explicit(0).int().optional(),this.key("serialNumber").int(),this.key("signature").use(a),this.key("issuer").use(h),this.key("validity").use(d),this.key("subject").use(h),this.key("subjectPublicKeyInfo").use(s),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(u).optional())})),p=i.define("X509Certificate",(function(){this.seq().obj(this.key("tbsCertificate").use(l),this.key("signatureAlgorithm").use(a),this.key("signatureValue").bitstr())}));e.exports=p},function(e){e.exports=JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}')},function(e,t,r){var i=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,n=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,o=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,a=r(27),s=r(38),f=r(1).Buffer;e.exports=function(e,t){var r,c=e.toString(),h=c.match(i);if(h){var d="aes"+h[1],u=f.from(h[2],"hex"),l=f.from(h[3].replace(/[\r\n]/g,""),"base64"),p=a(t,u.slice(0,8),parseInt(h[1],10)).key,b=[],y=s.createDecipheriv(d,p,u);b.push(y.update(l)),b.push(y.final()),r=f.concat(b)}else{var v=c.match(o);r=new f(v[2].replace(/[\r\n]/g,""),"base64")}return{tag:c.match(n)[1],data:r}}},function(e,t,r){var i=r(4).Buffer,n=r(3),o=r(42).ec,a=r(29),s=r(85);function f(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,t,r,c,h){var d=a(r);if("ec"===d.type){if("ecdsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var i=s[r.data.algorithm.curve.join(".")];if(!i)throw new Error("unknown curve "+r.data.algorithm.curve.join("."));var n=new o(i),a=r.data.subjectPrivateKey.data;return n.verify(t,e,a)}(e,t,d)}if("dsa"===d.type){if("dsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var i=r.data.p,o=r.data.q,s=r.data.g,c=r.data.pub_key,h=a.signature.decode(e,"der"),d=h.s,u=h.r;f(d,o),f(u,o);var l=n.mont(i),p=d.invm(o);return 0===s.toRed(l).redPow(new n(t).mul(p).mod(o)).fromRed().mul(c.toRed(l).redPow(u.mul(p).mod(o)).fromRed()).mod(i).mod(o).cmp(u)}(e,t,d)}if("rsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");t=i.concat([h,t]);for(var u=d.modulus.byteLength(),l=[1],p=0;t.length+l.length+2<u;)l.push(255),p++;l.push(0);for(var b=-1;++b<t.length;)l.push(t[b]);l=i.from(l);var y=n.mont(d.modulus);e=(e=new n(e).toRed(y)).redPow(new n(d.publicExponent)),e=i.from(e.fromRed().toArray());var v=p<8?1:0;for(u=Math.min(e.length,l.length),e.length!==l.length&&(v=1),b=-1;++b<u;)v|=e[b]^l[b];return 0===v}},function(e,t,r){(function(t){var i=r(42),n=r(3);e.exports=function(e){return new a(e)};var o={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function a(e){this.curveType=o[e],this.curveType||(this.curveType={name:e}),this.curve=new i.ec(this.curveType.name),this.keys=void 0}function s(e,r,i){Array.isArray(e)||(e=e.toArray());var n=new t(e);if(i&&n.length<i){var o=new t(i-n.length);o.fill(0),n=t.concat([o,n])}return r?n.toString(r):n}o.p224=o.secp224r1,o.p256=o.secp256r1=o.prime256v1,o.p192=o.secp192r1=o.prime192v1,o.p384=o.secp384r1,o.p521=o.secp521r1,a.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},a.prototype.computeSecret=function(e,r,i){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),s(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),i,this.curveType.byteLength)},a.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),s(r,e)},a.prototype.getPrivateKey=function(e){return s(this.keys.getPrivate(),e)},a.prototype.setPublicKey=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.keys._importPublic(e),this},a.prototype.setPrivateKey=function(e,r){r=r||"utf8",t.isBuffer(e)||(e=new t(e,r));var i=new n(e);return i=i.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(i),this}}).call(this,r(4).Buffer)},function(e,t,r){t.publicEncrypt=r(175),t.privateDecrypt=r(176),t.privateEncrypt=function(e,r){return t.publicEncrypt(e,r,!0)},t.publicDecrypt=function(e,r){return t.privateDecrypt(e,r,!0)}},function(e,t,r){var i=r(29),n=r(14),o=r(18),a=r(86),s=r(87),f=r(3),c=r(88),h=r(41),d=r(1).Buffer;e.exports=function(e,t,r){var u;u=e.padding?e.padding:r?1:4;var l,p=i(e);if(4===u)l=function(e,t){var r=e.modulus.byteLength(),i=t.length,c=o("sha1").update(d.alloc(0)).digest(),h=c.length,u=2*h;if(i>r-u-2)throw new Error("message too long");var l=d.alloc(r-i-u-2),p=r-h-1,b=n(h),y=s(d.concat([c,l,d.alloc(1,1),t],p),a(b,p)),v=s(b,a(y,h));return new f(d.concat([d.alloc(1),v,y],r))}(p,t);else if(1===u)l=function(e,t,r){var i,o=t.length,a=e.modulus.byteLength();if(o>a-11)throw new Error("message too long");i=r?d.alloc(a-o-3,255):function(e){var t,r=d.allocUnsafe(e),i=0,o=n(2*e),a=0;for(;i<e;)a===o.length&&(o=n(2*e),a=0),(t=o[a++])&&(r[i++]=t);return r}(a-o-3);return new f(d.concat([d.from([0,r?1:2]),i,d.alloc(1),t],a))}(p,t,r);else{if(3!==u)throw new Error("unknown padding");if((l=new f(t)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return r?h(l,p):c(l,p)}},function(e,t,r){var i=r(29),n=r(86),o=r(87),a=r(3),s=r(41),f=r(18),c=r(88),h=r(1).Buffer;e.exports=function(e,t,r){var d;d=e.padding?e.padding:r?1:4;var u,l=i(e),p=l.modulus.byteLength();if(t.length>p||new a(t).cmp(l.modulus)>=0)throw new Error("decryption error");u=r?c(new a(t),l):s(t,l);var b=h.alloc(p-u.length);if(u=h.concat([b,u],p),4===d)return function(e,t){var r=e.modulus.byteLength(),i=f("sha1").update(h.alloc(0)).digest(),a=i.length;if(0!==t[0])throw new Error("decryption error");var s=t.slice(1,a+1),c=t.slice(a+1),d=o(s,n(c,a)),u=o(c,n(d,r-a-1));if(function(e,t){e=h.from(e),t=h.from(t);var r=0,i=e.length;e.length!==t.length&&(r++,i=Math.min(e.length,t.length));var n=-1;for(;++n<i;)r+=e[n]^t[n];return r}(i,u.slice(0,a)))throw new Error("decryption error");var l=a;for(;0===u[l];)l++;if(1!==u[l++])throw new Error("decryption error");return u.slice(l)}(l,u);if(1===d)return function(e,t,r){var i=t.slice(0,2),n=2,o=0;for(;0!==t[n++];)if(n>=t.length){o++;break}var a=t.slice(2,n-1);("0002"!==i.toString("hex")&&!r||"0001"!==i.toString("hex")&&r)&&o++;a.length<8&&o++;if(o)throw new Error("decryption error");return t.slice(n)}(0,u,r);if(3===d)return u;throw new Error("unknown padding")}},function(e,t,r){"use strict";(function(e,i){function n(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=r(1),a=r(14),s=o.Buffer,f=o.kMaxLength,c=e.crypto||e.msCrypto,h=Math.pow(2,32)-1;function d(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>h||e<0)throw new TypeError("offset must be a uint32");if(e>f||e>t)throw new RangeError("offset out of range")}function u(e,t,r){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>h||e<0)throw new TypeError("size must be a uint32");if(e+t>r||e>f)throw new RangeError("buffer too small")}function l(e,t,r,n){if(i.browser){var o=e.buffer,s=new Uint8Array(o,t,r);return c.getRandomValues(s),n?void i.nextTick((function(){n(null,e)})):e}if(!n)return a(r).copy(e,t),e;a(r,(function(r,i){if(r)return n(r);i.copy(e,t),n(null,e)}))}c&&c.getRandomValues||!i.browser?(t.randomFill=function(t,r,i,n){if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof r)n=r,r=0,i=t.length;else if("function"==typeof i)n=i,i=t.length-r;else if("function"!=typeof n)throw new TypeError('"cb" argument must be a function');return d(r,t.length),u(i,r,t.length),l(t,r,i,n)},t.randomFillSync=function(t,r,i){void 0===r&&(r=0);if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');d(r,t.length),void 0===i&&(i=t.length-r);return u(i,r,t.length),l(t,r,i)}):(t.randomFill=n,t.randomFillSync=n)}).call(this,r(8),r(10))},function(e,t,r){var i;e.exports=(i=r(2),function(){if("function"==typeof ArrayBuffer){var e=i.lib.WordArray,t=e.init;(e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var r=e.byteLength,i=[],n=0;n<r;n++)i[n>>>2]|=e[n]<<24-n%4*8;t.call(this,i,r)}else t.apply(this,arguments)}).prototype=e}}(),i.lib.WordArray)},function(e,t,r){var i;e.exports=(i=r(2),function(){var e=i,t=e.lib.WordArray,r=e.enc;function n(e){return e<<8&4278255360|e>>>8&16711935}r.Utf16=r.Utf16BE={stringify:function(e){for(var t=e.words,r=e.sigBytes,i=[],n=0;n<r;n+=2){var o=t[n>>>2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join("")},parse:function(e){for(var r=e.length,i=[],n=0;n<r;n++)i[n>>>1]|=e.charCodeAt(n)<<16-n%2*16;return t.create(i,2*r)}},r.Utf16LE={stringify:function(e){for(var t=e.words,r=e.sigBytes,i=[],o=0;o<r;o+=2){var a=n(t[o>>>2]>>>16-o%4*8&65535);i.push(String.fromCharCode(a))}return i.join("")},parse:function(e){for(var r=e.length,i=[],o=0;o<r;o++)i[o>>>1]|=n(e.charCodeAt(o)<<16-o%2*16);return t.create(i,2*r)}}}(),i.enc.Utf16)},function(e,t,r){var i,n,o,a,s,f;e.exports=(f=r(2),r(89),n=(i=f).lib.WordArray,o=i.algo,a=o.SHA256,s=o.SHA224=a.extend({_doReset:function(){this._hash=new n.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=a._doFinalize.call(this);return e.sigBytes-=4,e}}),i.SHA224=a._createHelper(s),i.HmacSHA224=a._createHmacHelper(s),f.SHA224)},function(e,t,r){var i,n,o,a,s,f,c,h;e.exports=(h=r(2),r(30),r(90),n=(i=h).x64,o=n.Word,a=n.WordArray,s=i.algo,f=s.SHA512,c=s.SHA384=f.extend({_doReset:function(){this._hash=new a.init([new o.init(3418070365,3238371032),new o.init(1654270250,914150663),new o.init(2438529370,812702999),new o.init(355462360,4144912697),new o.init(1731405415,4290775857),new o.init(2394180231,1750603025),new o.init(3675008525,1694076839),new o.init(1203062813,3204075428)])},_doFinalize:function(){var e=f._doFinalize.call(this);return e.sigBytes-=16,e}}),i.SHA384=f._createHelper(c),i.HmacSHA384=f._createHmacHelper(c),h.SHA384)},function(e,t,r){var i;e.exports=(i=r(2),r(30),function(e){var t=i,r=t.lib,n=r.WordArray,o=r.Hasher,a=t.x64.Word,s=t.algo,f=[],c=[],h=[];!function(){for(var e=1,t=0,r=0;r<24;r++){f[e+5*t]=(r+1)*(r+2)/2%64;var i=(2*e+3*t)%5;e=t%5,t=i}for(e=0;e<5;e++)for(t=0;t<5;t++)c[e+5*t]=t+(2*e+3*t)%5*5;for(var n=1,o=0;o<24;o++){for(var s=0,d=0,u=0;u<7;u++){if(1&n){var l=(1<<u)-1;l<32?d^=1<<l:s^=1<<l-32}128&n?n=n<<1^113:n<<=1}h[o]=a.create(s,d)}}();var d=[];!function(){for(var e=0;e<25;e++)d[e]=a.create()}();var u=s.SHA3=o.extend({cfg:o.cfg.extend({outputLength:512}),_doReset:function(){for(var e=this._state=[],t=0;t<25;t++)e[t]=new a.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(e,t){for(var r=this._state,i=this.blockSize/2,n=0;n<i;n++){var o=e[t+2*n],a=e[t+2*n+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),(B=r[n]).high^=a,B.low^=o}for(var s=0;s<24;s++){for(var u=0;u<5;u++){for(var l=0,p=0,b=0;b<5;b++)l^=(B=r[u+5*b]).high,p^=B.low;var y=d[u];y.high=l,y.low=p}for(u=0;u<5;u++){var v=d[(u+4)%5],g=d[(u+1)%5],m=g.high,_=g.low;for(l=v.high^(m<<1|_>>>31),p=v.low^(_<<1|m>>>31),b=0;b<5;b++)(B=r[u+5*b]).high^=l,B.low^=p}for(var w=1;w<25;w++){var S=(B=r[w]).high,E=B.low,M=f[w];M<32?(l=S<<M|E>>>32-M,p=E<<M|S>>>32-M):(l=E<<M-32|S>>>64-M,p=S<<M-32|E>>>64-M);var k=d[c[w]];k.high=l,k.low=p}var A=d[0],x=r[0];for(A.high=x.high,A.low=x.low,u=0;u<5;u++)for(b=0;b<5;b++){var B=r[w=u+5*b],I=d[w],R=d[(u+1)%5+5*b],C=d[(u+2)%5+5*b];B.high=I.high^~R.high&C.high,B.low=I.low^~R.low&C.low}B=r[0];var P=h[s];B.high^=P.high,B.low^=P.low}},_doFinalize:function(){var t=this._data,r=t.words,i=(this._nDataBytes,8*t.sigBytes),o=32*this.blockSize;r[i>>>5]|=1<<24-i%32,r[(e.ceil((i+1)/o)*o>>>5)-1]|=128,t.sigBytes=4*r.length,this._process();for(var a=this._state,s=this.cfg.outputLength/8,f=s/8,c=[],h=0;h<f;h++){var d=a[h],u=d.high,l=d.low;u=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8),l=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8),c.push(l),c.push(u)}return new n.init(c,s)},clone:function(){for(var e=o.clone.call(this),t=e._state=this._state.slice(0),r=0;r<25;r++)t[r]=t[r].clone();return e}});t.SHA3=o._createHelper(u),t.HmacSHA3=o._createHmacHelper(u)}(Math),i.SHA3)},function(e,t,r){var i;e.exports=(i=r(2),
/** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
function(e){var t=i,r=t.lib,n=r.WordArray,o=r.Hasher,a=t.algo,s=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),f=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),c=n.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),h=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),d=n.create([0,1518500249,1859775393,2400959708,2840853838]),u=n.create([1352829926,1548603684,1836072691,2053994217,0]),l=a.RIPEMD160=o.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=0;r<16;r++){var i=t+r,n=e[i];e[i]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o,a,l,_,w,S,E,M,k,A,x,B=this._hash.words,I=d.words,R=u.words,C=s.words,P=f.words,T=c.words,O=h.words;for(S=o=B[0],E=a=B[1],M=l=B[2],k=_=B[3],A=w=B[4],r=0;r<80;r+=1)x=o+e[t+C[r]]|0,x+=r<16?p(a,l,_)+I[0]:r<32?b(a,l,_)+I[1]:r<48?y(a,l,_)+I[2]:r<64?v(a,l,_)+I[3]:g(a,l,_)+I[4],x=(x=m(x|=0,T[r]))+w|0,o=w,w=_,_=m(l,10),l=a,a=x,x=S+e[t+P[r]]|0,x+=r<16?g(E,M,k)+R[0]:r<32?v(E,M,k)+R[1]:r<48?y(E,M,k)+R[2]:r<64?b(E,M,k)+R[3]:p(E,M,k)+R[4],x=(x=m(x|=0,O[r]))+A|0,S=A,A=k,k=m(M,10),M=E,E=x;x=B[1]+l+k|0,B[1]=B[2]+_+A|0,B[2]=B[3]+w+S|0,B[3]=B[4]+o+E|0,B[4]=B[0]+a+M|0,B[0]=x},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;t[i>>>5]|=128<<24-i%32,t[14+(i+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),e.sigBytes=4*(t.length+1),this._process();for(var n=this._hash,o=n.words,a=0;a<5;a++){var s=o[a];o[a]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return n},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});function p(e,t,r){return e^t^r}function b(e,t,r){return e&t|~e&r}function y(e,t,r){return(e|~t)^r}function v(e,t,r){return e&r|t&~r}function g(e,t,r){return e^(t|~r)}function m(e,t){return e<<t|e>>>32-t}t.RIPEMD160=o._createHelper(l),t.HmacRIPEMD160=o._createHmacHelper(l)}(Math),i.RIPEMD160)},function(e,t,r){var i,n,o,a,s,f,c,h,d;e.exports=(d=r(2),r(45),r(46),n=(i=d).lib,o=n.Base,a=n.WordArray,s=i.algo,f=s.SHA1,c=s.HMAC,h=s.PBKDF2=o.extend({cfg:o.extend({keySize:4,hasher:f,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r=this.cfg,i=c.create(r.hasher,e),n=a.create(),o=a.create([1]),s=n.words,f=o.words,h=r.keySize,d=r.iterations;s.length<h;){var u=i.update(t).finalize(o);i.reset();for(var l=u.words,p=l.length,b=u,y=1;y<d;y++){b=i.finalize(b),i.reset();for(var v=b.words,g=0;g<p;g++)l[g]^=v[g]}n.concat(u),f[0]++}return n.sigBytes=4*h,n}}),i.PBKDF2=function(e,t,r){return h.create(r).compute(e,t)},d.PBKDF2)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.mode.CFB=function(){var e=i.lib.BlockCipherMode.extend();function t(e,t,r,i){var n,o=this._iv;o?(n=o.slice(0),this._iv=void 0):n=this._prevBlock,i.encryptBlock(n,0);for(var a=0;a<r;a++)e[t+a]^=n[a]}return e.Encryptor=e.extend({processBlock:function(e,r){var i=this._cipher,n=i.blockSize;t.call(this,e,r,n,i),this._prevBlock=e.slice(r,r+n)}}),e.Decryptor=e.extend({processBlock:function(e,r){var i=this._cipher,n=i.blockSize,o=e.slice(r,r+n);t.call(this,e,r,n,i),this._prevBlock=o}}),e}(),i.mode.CFB)},function(e,t,r){var i,n,o;e.exports=(o=r(2),r(5),o.mode.CTR=(i=o.lib.BlockCipherMode.extend(),n=i.Encryptor=i.extend({processBlock:function(e,t){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var a=o.slice(0);r.encryptBlock(a,0),o[i-1]=o[i-1]+1|0;for(var s=0;s<i;s++)e[t+s]^=a[s]}}),i.Decryptor=n,i),o.mode.CTR)},function(e,t,r){var i;e.exports=(i=r(2),r(5),
/** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   */
i.mode.CTRGladman=function(){var e=i.lib.BlockCipherMode.extend();function t(e){if(255==(e>>24&255)){var t=e>>16&255,r=e>>8&255,i=255&e;255===t?(t=0,255===r?(r=0,255===i?i=0:++i):++r):++t,e=0,e+=t<<16,e+=r<<8,e+=i}else e+=1<<24;return e}var r=e.Encryptor=e.extend({processBlock:function(e,r){var i=this._cipher,n=i.blockSize,o=this._iv,a=this._counter;o&&(a=this._counter=o.slice(0),this._iv=void 0),function(e){0===(e[0]=t(e[0]))&&(e[1]=t(e[1]))}(a);var s=a.slice(0);i.encryptBlock(s,0);for(var f=0;f<n;f++)e[r+f]^=s[f]}});return e.Decryptor=r,e}(),i.mode.CTRGladman)},function(e,t,r){var i,n,o;e.exports=(o=r(2),r(5),o.mode.OFB=(i=o.lib.BlockCipherMode.extend(),n=i.Encryptor=i.extend({processBlock:function(e,t){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var a=0;a<i;a++)e[t+a]^=o[a]}}),i.Decryptor=n,i),o.mode.OFB)},function(e,t,r){var i,n;e.exports=(n=r(2),r(5),n.mode.ECB=((i=n.lib.BlockCipherMode.extend()).Encryptor=i.extend({processBlock:function(e,t){this._cipher.encryptBlock(e,t)}}),i.Decryptor=i.extend({processBlock:function(e,t){this._cipher.decryptBlock(e,t)}}),i),n.mode.ECB)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.pad.AnsiX923={pad:function(e,t){var r=e.sigBytes,i=4*t,n=i-r%i,o=r+n-1;e.clamp(),e.words[o>>>2]|=n<<24-o%4*8,e.sigBytes+=n},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},i.pad.Ansix923)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.pad.Iso10126={pad:function(e,t){var r=4*t,n=r-e.sigBytes%r;e.concat(i.lib.WordArray.random(n-1)).concat(i.lib.WordArray.create([n<<24],1))},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},i.pad.Iso10126)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.pad.Iso97971={pad:function(e,t){e.concat(i.lib.WordArray.create([2147483648],1)),i.pad.ZeroPadding.pad(e,t)},unpad:function(e){i.pad.ZeroPadding.unpad(e),e.sigBytes--}},i.pad.Iso97971)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.pad.ZeroPadding={pad:function(e,t){var r=4*t;e.clamp(),e.sigBytes+=r-(e.sigBytes%r||r)},unpad:function(e){var t=e.words,r=e.sigBytes-1;for(r=e.sigBytes-1;r>=0;r--)if(t[r>>>2]>>>24-r%4*8&255){e.sigBytes=r+1;break}}},i.pad.ZeroPadding)},function(e,t,r){var i;e.exports=(i=r(2),r(5),i.pad.NoPadding={pad:function(){},unpad:function(){}},i.pad.NoPadding)},function(e,t,r){var i,n,o,a;e.exports=(a=r(2),r(5),n=(i=a).lib.CipherParams,o=i.enc.Hex,i.format.Hex={stringify:function(e){return e.ciphertext.toString(o)},parse:function(e){var t=o.parse(e);return n.create({ciphertext:t})}},a.format.Hex)},function(e,t,r){var i;e.exports=(i=r(2),r(16),r(17),r(13),r(5),function(){var e=i,t=e.lib.BlockCipher,r=e.algo,n=[],o=[],a=[],s=[],f=[],c=[],h=[],d=[],u=[],l=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var r=0,i=0;for(t=0;t<256;t++){var p=i^i<<1^i<<2^i<<3^i<<4;p=p>>>8^255&p^99,n[r]=p,o[p]=r;var b=e[r],y=e[b],v=e[y],g=257*e[p]^16843008*p;a[r]=g<<24|g>>>8,s[r]=g<<16|g>>>16,f[r]=g<<8|g>>>24,c[r]=g,g=16843009*v^65537*y^257*b^16843008*r,h[p]=g<<24|g>>>8,d[p]=g<<16|g>>>16,u[p]=g<<8|g>>>24,l[p]=g,r?(r=b^e[e[e[v^b]]],i^=e[e[i]]):r=i=1}}();var p=[0,1,2,4,8,16,32,64,128,27,54],b=r.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,r=e.sigBytes/4,i=4*((this._nRounds=r+6)+1),o=this._keySchedule=[],a=0;a<i;a++)a<r?o[a]=t[a]:(c=o[a-1],a%r?r>6&&a%r==4&&(c=n[c>>>24]<<24|n[c>>>16&255]<<16|n[c>>>8&255]<<8|n[255&c]):(c=n[(c=c<<8|c>>>24)>>>24]<<24|n[c>>>16&255]<<16|n[c>>>8&255]<<8|n[255&c],c^=p[a/r|0]<<24),o[a]=o[a-r]^c);for(var s=this._invKeySchedule=[],f=0;f<i;f++){if(a=i-f,f%4)var c=o[a];else c=o[a-4];s[f]=f<4||a<=4?c:h[n[c>>>24]]^d[n[c>>>16&255]]^u[n[c>>>8&255]]^l[n[255&c]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,a,s,f,c,n)},decryptBlock:function(e,t){var r=e[t+1];e[t+1]=e[t+3],e[t+3]=r,this._doCryptBlock(e,t,this._invKeySchedule,h,d,u,l,o),r=e[t+1],e[t+1]=e[t+3],e[t+3]=r},_doCryptBlock:function(e,t,r,i,n,o,a,s){for(var f=this._nRounds,c=e[t]^r[0],h=e[t+1]^r[1],d=e[t+2]^r[2],u=e[t+3]^r[3],l=4,p=1;p<f;p++){var b=i[c>>>24]^n[h>>>16&255]^o[d>>>8&255]^a[255&u]^r[l++],y=i[h>>>24]^n[d>>>16&255]^o[u>>>8&255]^a[255&c]^r[l++],v=i[d>>>24]^n[u>>>16&255]^o[c>>>8&255]^a[255&h]^r[l++],g=i[u>>>24]^n[c>>>16&255]^o[h>>>8&255]^a[255&d]^r[l++];c=b,h=y,d=v,u=g}b=(s[c>>>24]<<24|s[h>>>16&255]<<16|s[d>>>8&255]<<8|s[255&u])^r[l++],y=(s[h>>>24]<<24|s[d>>>16&255]<<16|s[u>>>8&255]<<8|s[255&c])^r[l++],v=(s[d>>>24]<<24|s[u>>>16&255]<<16|s[c>>>8&255]<<8|s[255&h])^r[l++],g=(s[u>>>24]<<24|s[c>>>16&255]<<16|s[h>>>8&255]<<8|s[255&d])^r[l++],e[t]=b,e[t+1]=y,e[t+2]=v,e[t+3]=g},keySize:8});e.AES=t._createHelper(b)}(),i.AES)},function(e,t,r){var i;e.exports=(i=r(2),r(16),r(17),r(13),r(5),function(){var e=i,t=e.lib,r=t.WordArray,n=t.BlockCipher,o=e.algo,a=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],s=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],f=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],c=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],h=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],d=o.DES=n.extend({_doReset:function(){for(var e=this._key.words,t=[],r=0;r<56;r++){var i=a[r]-1;t[r]=e[i>>>5]>>>31-i%32&1}for(var n=this._subKeys=[],o=0;o<16;o++){var c=n[o]=[],h=f[o];for(r=0;r<24;r++)c[r/6|0]|=t[(s[r]-1+h)%28]<<31-r%6,c[4+(r/6|0)]|=t[28+(s[r+24]-1+h)%28]<<31-r%6;for(c[0]=c[0]<<1|c[0]>>>31,r=1;r<7;r++)c[r]=c[r]>>>4*(r-1)+3;c[7]=c[7]<<5|c[7]>>>27}var d=this._invSubKeys=[];for(r=0;r<16;r++)d[r]=n[15-r]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(e,t,r){this._lBlock=e[t],this._rBlock=e[t+1],u.call(this,4,252645135),u.call(this,16,65535),l.call(this,2,858993459),l.call(this,8,16711935),u.call(this,1,1431655765);for(var i=0;i<16;i++){for(var n=r[i],o=this._lBlock,a=this._rBlock,s=0,f=0;f<8;f++)s|=c[f][((a^n[f])&h[f])>>>0];this._lBlock=a,this._rBlock=o^s}var d=this._lBlock;this._lBlock=this._rBlock,this._rBlock=d,u.call(this,1,1431655765),l.call(this,8,16711935),l.call(this,2,858993459),u.call(this,16,65535),u.call(this,4,252645135),e[t]=this._lBlock,e[t+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function u(e,t){var r=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=r,this._lBlock^=r<<e}function l(e,t){var r=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=r,this._rBlock^=r<<e}e.DES=n._createHelper(d);var p=o.TripleDES=n.extend({_doReset:function(){var e=this._key.words;if(2!==e.length&&4!==e.length&&e.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var t=e.slice(0,2),i=e.length<4?e.slice(0,2):e.slice(2,4),n=e.length<6?e.slice(0,2):e.slice(4,6);this._des1=d.createEncryptor(r.create(t)),this._des2=d.createEncryptor(r.create(i)),this._des3=d.createEncryptor(r.create(n))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2});e.TripleDES=n._createHelper(p)}(),i.TripleDES)},function(e,t,r){var i;e.exports=(i=r(2),r(16),r(17),r(13),r(5),function(){var e=i,t=e.lib.StreamCipher,r=e.algo,n=r.RC4=t.extend({_doReset:function(){for(var e=this._key,t=e.words,r=e.sigBytes,i=this._S=[],n=0;n<256;n++)i[n]=n;n=0;for(var o=0;n<256;n++){var a=n%r,s=t[a>>>2]>>>24-a%4*8&255;o=(o+i[n]+s)%256;var f=i[n];i[n]=i[o],i[o]=f}this._i=this._j=0},_doProcessBlock:function(e,t){e[t]^=o.call(this)},keySize:8,ivSize:0});function o(){for(var e=this._S,t=this._i,r=this._j,i=0,n=0;n<4;n++){r=(r+e[t=(t+1)%256])%256;var o=e[t];e[t]=e[r],e[r]=o,i|=e[(e[t]+e[r])%256]<<24-8*n}return this._i=t,this._j=r,i}e.RC4=t._createHelper(n);var a=r.RC4Drop=n.extend({cfg:n.cfg.extend({drop:192}),_doReset:function(){n._doReset.call(this);for(var e=this.cfg.drop;e>0;e--)o.call(this)}});e.RC4Drop=t._createHelper(a)}(),i.RC4)},function(e,t,r){var i;e.exports=(i=r(2),r(16),r(17),r(13),r(5),function(){var e=i,t=e.lib.StreamCipher,r=e.algo,n=[],o=[],a=[],s=r.Rabbit=t.extend({_doReset:function(){for(var e=this._key.words,t=this.cfg.iv,r=0;r<4;r++)e[r]=16711935&(e[r]<<8|e[r]>>>24)|4278255360&(e[r]<<24|e[r]>>>8);var i=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],n=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];for(this._b=0,r=0;r<4;r++)f.call(this);for(r=0;r<8;r++)n[r]^=i[r+4&7];if(t){var o=t.words,a=o[0],s=o[1],c=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),d=c>>>16|4294901760&h,u=h<<16|65535&c;for(n[0]^=c,n[1]^=d,n[2]^=h,n[3]^=u,n[4]^=c,n[5]^=d,n[6]^=h,n[7]^=u,r=0;r<4;r++)f.call(this)}},_doProcessBlock:function(e,t){var r=this._X;f.call(this),n[0]=r[0]^r[5]>>>16^r[3]<<16,n[1]=r[2]^r[7]>>>16^r[5]<<16,n[2]=r[4]^r[1]>>>16^r[7]<<16,n[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)n[i]=16711935&(n[i]<<8|n[i]>>>24)|4278255360&(n[i]<<24|n[i]>>>8),e[t+i]^=n[i]},blockSize:4,ivSize:2});function f(){for(var e=this._X,t=this._C,r=0;r<8;r++)o[r]=t[r];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<o[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<o[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<o[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<o[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<o[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<o[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<o[6]>>>0?1:0)|0,this._b=t[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var i=e[r]+t[r],n=65535&i,s=i>>>16,f=((n*n>>>17)+n*s>>>15)+s*s,c=((4294901760&i)*i|0)+((65535&i)*i|0);a[r]=f^c}e[0]=a[0]+(a[7]<<16|a[7]>>>16)+(a[6]<<16|a[6]>>>16)|0,e[1]=a[1]+(a[0]<<8|a[0]>>>24)+a[7]|0,e[2]=a[2]+(a[1]<<16|a[1]>>>16)+(a[0]<<16|a[0]>>>16)|0,e[3]=a[3]+(a[2]<<8|a[2]>>>24)+a[1]|0,e[4]=a[4]+(a[3]<<16|a[3]>>>16)+(a[2]<<16|a[2]>>>16)|0,e[5]=a[5]+(a[4]<<8|a[4]>>>24)+a[3]|0,e[6]=a[6]+(a[5]<<16|a[5]>>>16)+(a[4]<<16|a[4]>>>16)|0,e[7]=a[7]+(a[6]<<8|a[6]>>>24)+a[5]|0}e.Rabbit=t._createHelper(s)}(),i.Rabbit)},function(e,t,r){var i;e.exports=(i=r(2),r(16),r(17),r(13),r(5),function(){var e=i,t=e.lib.StreamCipher,r=e.algo,n=[],o=[],a=[],s=r.RabbitLegacy=t.extend({_doReset:function(){var e=this._key.words,t=this.cfg.iv,r=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],i=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];this._b=0;for(var n=0;n<4;n++)f.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(t){var o=t.words,a=o[0],s=o[1],c=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),d=c>>>16|4294901760&h,u=h<<16|65535&c;for(i[0]^=c,i[1]^=d,i[2]^=h,i[3]^=u,i[4]^=c,i[5]^=d,i[6]^=h,i[7]^=u,n=0;n<4;n++)f.call(this)}},_doProcessBlock:function(e,t){var r=this._X;f.call(this),n[0]=r[0]^r[5]>>>16^r[3]<<16,n[1]=r[2]^r[7]>>>16^r[5]<<16,n[2]=r[4]^r[1]>>>16^r[7]<<16,n[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)n[i]=16711935&(n[i]<<8|n[i]>>>24)|4278255360&(n[i]<<24|n[i]>>>8),e[t+i]^=n[i]},blockSize:4,ivSize:2});function f(){for(var e=this._X,t=this._C,r=0;r<8;r++)o[r]=t[r];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<o[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<o[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<o[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<o[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<o[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<o[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<o[6]>>>0?1:0)|0,this._b=t[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var i=e[r]+t[r],n=65535&i,s=i>>>16,f=((n*n>>>17)+n*s>>>15)+s*s,c=((4294901760&i)*i|0)+((65535&i)*i|0);a[r]=f^c}e[0]=a[0]+(a[7]<<16|a[7]>>>16)+(a[6]<<16|a[6]>>>16)|0,e[1]=a[1]+(a[0]<<8|a[0]>>>24)+a[7]|0,e[2]=a[2]+(a[1]<<16|a[1]>>>16)+(a[0]<<16|a[0]>>>16)|0,e[3]=a[3]+(a[2]<<8|a[2]>>>24)+a[1]|0,e[4]=a[4]+(a[3]<<16|a[3]>>>16)+(a[2]<<16|a[2]>>>16)|0,e[5]=a[5]+(a[4]<<8|a[4]>>>24)+a[3]|0,e[6]=a[6]+(a[5]<<16|a[5]>>>16)+(a[4]<<16|a[4]>>>16)|0,e[7]=a[7]+(a[6]<<8|a[6]>>>24)+a[5]|0}e.RabbitLegacy=t._createHelper(s)}(),i.RabbitLegacy)},function(e,t,r){"use strict";r.r(t),r.d(t,"XAuthService",(function(){return A})),r.d(t,"initializeXAuth",(function(){return x}));var i=r(91),n=r.n(i);r(47),r(48);var o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function a(e){return function(t){var r=t||{},i=r.width?String(r.width):e.defaultWidth;return e.formats[i]||e.formats[e.defaultWidth]}}var s={date:a({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:a({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:a({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},f={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function c(e){return function(t,r){var i,n=r||{};if("formatting"===(n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=n.width?String(n.width):o;i=e.formattingValues[a]||e.formattingValues[o]}else{var s=e.defaultWidth,f=n.width?String(n.width):e.defaultWidth;i=e.values[f]||e.values[s]}return i[e.argumentCallback?e.argumentCallback(t):t]}}function h(e){return function(t,r){var i=String(t),n=r||{},o=n.width,a=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],s=i.match(a);if(!s)return null;var f,c=s[0],h=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return f="[object Array]"===Object.prototype.toString.call(h)?function(e,t){for(var r=0;r<e.length;r++)if(t(e[r]))return r}(h,(function(e){return e.test(c)})):function(e,t){for(var r in e)if(e.hasOwnProperty(r)&&t(e[r]))return r}(h,(function(e){return e.test(c)})),f=e.valueCallback?e.valueCallback(f):f,{value:f=n.valueCallback?n.valueCallback(f):f,rest:i.slice(c.length)}}}var d;c({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),c({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),c({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),c({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),c({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"}),d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"});var u={ACCESS_TOKEN:"accessToken",REFRESH_TOKEN:"refreshToken",USER:"user",ACCESS_TOKEN_PAYLOAD:"accessTokenPayload",LAST_CONNECTION:"lastProviderConnection",STATE_KEY:"stateKey"};var l=["openid","profile","picture","name","email","offline_access"];p=g((function*(e,t){const r=yield fetch(t,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({code:e})});if(!r.ok)throw r;return r.json()}));var p;b=g((function*(e,t){const r=yield fetch(t,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({refreshToken:e})});if(!r.ok)throw r;return r.json()}));var b;y=g((function*(e,t,{method:r="log",debuggger:i=console}={}){e&&i[r](t)}));var y;function v(e,t,r,i,n,o,a){try{var s=e[o](a),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(i,n)}function g(e){return function(){var t=this,r=arguments;return new Promise((function(i,n){var o=e.apply(t,r);function a(e){v(o,i,n,a,s,"next",e)}function s(e){v(o,i,n,a,s,"throw",e)}a(void 0)}))}}const m={Scopes:l,StorageKeys:u,Events:{ACCESS_RENEWED:"AUTH_ACCESS_RENEWED",ACCESS_RENEWING:"AUTH_ACCESS_RENEWING",ACCESS_DENIED:"AUTH_ACCESS_DENIED"},CrossStorageCommands:{ACCESS_TOKEN:"ACCESS_TOKEN",ACCESS_TOKEN_PAYLOAD:"ACCESS_TOKEN_PAYLOAD",USER:"USER",REFRESH_TOKEN:"REFRESH_TOKEN",STATE_KEY:"STATE_KEY",LAST_CONNECTION:"LAST_CONNECTION"}},{CrossStorageCommands:_}=m;var w=class{constructor(e){this.sendCommand=e}static get PROVIDER(){return"Auth0"}get accessToken(){return this.sendCommand(_.ACCESS_TOKEN)}get accessTokenPayload(){return this.sendCommand(_.ACCESS_TOKEN_PAYLOAD)}get user(){return this.sendCommand(_.USER)}get refreshToken(){return this.sendCommand(_.REFRESH_TOKEN)}get stateKey(){return this.sendCommand(_.STATE_KEY)}get lastProviderConnection(){return this.sendCommand(_.LAST_CONNECTION)}};function S(e,t,r,i,n,o,a){try{var s=e[o](a),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(i,n)}function E(e){return function(){var t=this,r=arguments;return new Promise((function(i,n){var o=e.apply(t,r);function a(e){S(o,i,n,a,s,"next",e)}function s(e){S(o,i,n,a,s,"throw",e)}a(void 0)}))}}const{Events:M,StorageKeys:k}=m;class A{constructor({loginAppUrl:e,onAuthSuccess:t,onAuthProgress:r,onAuthError:i,xauthRoute:n="/xauth",injectWindow:o=!0,isInitialized:a=!1,initializedStorage:s=null,copyToStorage:f=window.localStorage,storageKeys:c=k}={}){a&&(this.storage=s||window.xauth),this.xauthUrl=`${e}${n}`,this.storage=null,this.injectWindow=o,this.storageKeys=c,this.copyToStorage=f,this.onAuthSuccess=t,this.onAuthProgress=r,this.onAuthError=i}initialize(){return E((function*(){var e=this;return this.storage=yield n.a.initializeClient(this.xauthUrl,{iframeId:"xauth-iframe",initialProvider:w}),this.injectWindow&&(window.xauth=this.storage),yield this.copyAllToStorage(),window.addEventListener("message",(function(t){Object.keys(M).includes(t)&&e.copyAllToStorage().then((function(){switch(t.data.event){case M.ACCESS_RENEWED:return e.onAuthSuccess();case M.ACCESS_RENEWING:return e.onAuthProgress();case M.ACCESS_DENIED:return e.onAuthError(t.data.data);default:return}}))})),this}))()}copyAllToStorage(){return E((function*(){if(this.copyToStorage)for(const e in this.storageKeys){const t=this.storageKeys[e];this.copyToStorage[t]=yield this.storage[t]}}))()}}let x=(()=>{var e=E((function*(e){return new A(e).initialize()}));return function(t){return e.apply(this,arguments)}})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvY29yZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9jaXBoZXItY29yZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9ldnBrZGYuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLWJhc2U2NC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL21kNS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMveDY0LWNvcmUuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21kNS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jaXBoZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL2htYWMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4uL3NyYy9TaW1wbGVDcnlwdG8udHMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2p3dGlueS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3Jvc3Mtc3RvcmFnZS1wbHVzL3NyYy9Mb2NhbFNlc3Npb25TdG9yYWdlUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Nyb3NzLXN0b3JhZ2UtcGx1cy9zcmMvQ29va2llUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Nyb3NzLXN0b3JhZ2UtcGx1cy9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wYmtkZjIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9wcmVjb25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvZGVmYXVsdC1lbmNvZGluZy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9zeW5jLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9kZXMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvaW5jcjMyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taWxsZXItcmFiaW4vbGliL21yLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvNTEyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvYnVmZmVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9tZ2YuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3hvci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3Jvc3Mtc3RvcmFnZS1wbHVzL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcm9zcy1zdG9yYWdlLXBsdXMvc3JjL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvanMtY29va2llL3NyYy9qcy5jb29raWUuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Nyb3NzLXN0b3JhZ2UtcGx1cy9zcmMvc2VydmVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMzg0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9kdXBsZXgtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9sZWdhY3kuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9hbGdvcy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9hc3luYy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2VkZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL21vZGVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9kaC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3NpZ24uanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9zaG9ydC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL21vbnQuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjI0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9wcmVjb21wdXRlZC9zZWNwMjU2azEuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hc24xLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2FwaS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL3JlcG9ydGVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2Uvbm9kZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvY2VydGlmaWNhdGUuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvdmVyaWZ5LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9wdWJsaWNFbmNyeXB0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9wcml2YXRlRGVjcnlwdC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmFuZG9tZmlsbC9icm93c2VyLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbGliLXR5cGVkYXJyYXlzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLXV0ZjE2LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMjI0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMzg0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3JpcGVtZDE2MC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3Bia2RmMi5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL21vZGUtY2ZiLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1jdHIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9tb2RlLWN0ci1nbGFkbWFuLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1vZmIuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9tb2RlLWVjYi5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1hbnNpeDkyMy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1pc28xMDEyNi5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1pc285Nzk3MS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC16ZXJvcGFkZGluZy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1ub3BhZGRpbmcuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9mb3JtYXQtaGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvYWVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvdHJpcGxlZGVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmM0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmFiYml0LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmFiYml0LWxlZ2FjeS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGF1dGgwLWtpdHMvY2xpZW50L3NyYy9zdG9yYWdlLWtleXMuanMiLCJ3ZWJwYWNrOi8vQGF1dGgwLWtpdHMvdnVlLWNyb3NzLXN0b3JhZ2UtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BhdXRoMC1raXRzL2NsaWVudC9zcmMvc2NvcGVzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXV0aDAta2l0cy9jbGllbnQvc3JjL0F1dGgwU2VydmljZS5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGF1dGgwLWtpdHMvY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AYXV0aDAta2l0cy9jbGllbnQvc3JjL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGF1dGgwLWtpdHMvY2xpZW50L3NyYy9jcm9zcy1zdG9yYWdlLWNvbW1hbmRzLmpzIiwid2VicGFjazovL0BhdXRoMC1raXRzL3Z1ZS1jcm9zcy1zdG9yYWdlLWNsaWVudC8uL3NyYy9BdXRoMFN0b3JhZ2VQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9AYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQvLi9zcmMvWEF1dGhTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsImZyb20iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiYWxsb2NVbnNhZmVTbG93IiwiVHlwZUVycm9yIiwic2l6ZSIsImZpbGwiLCJlbmNvZGluZyIsImJ1ZiIsInVuZGVmaW5lZCIsIlNsb3dCdWZmZXIiLCJDcnlwdG9KUyIsIk1hdGgiLCJjcnlwdG8iLCJ3aW5kb3ciLCJtc0NyeXB0byIsImdsb2JhbCIsImVyciIsImNyeXB0b1NlY3VyZVJhbmRvbUludCIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwicmFuZG9tQnl0ZXMiLCJyZWFkSW50MzJMRSIsIkVycm9yIiwiRiIsIm9iaiIsInN1YnR5cGUiLCJDIiwiQ19saWIiLCJsaWIiLCJCYXNlIiwiZXh0ZW5kIiwib3ZlcnJpZGVzIiwidGhpcyIsIm1peEluIiwiaW5pdCIsIiRzdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiaW5zdGFuY2UiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHlOYW1lIiwidG9TdHJpbmciLCJjbG9uZSIsIldvcmRBcnJheSIsIndvcmRzIiwic2lnQnl0ZXMiLCJlbmNvZGVyIiwiSGV4Iiwic3RyaW5naWZ5IiwiY29uY2F0Iiwid29yZEFycmF5IiwidGhpc1dvcmRzIiwidGhhdFdvcmRzIiwidGhpc1NpZ0J5dGVzIiwidGhhdFNpZ0J5dGVzIiwiY2xhbXAiLCJ0aGF0Qnl0ZSIsImNlaWwiLCJzbGljZSIsInJhbmRvbSIsIm5CeXRlcyIsInB1c2giLCJDX2VuYyIsImVuYyIsImhleENoYXJzIiwiYml0ZSIsImpvaW4iLCJwYXJzZSIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsInBhcnNlSW50Iiwic3Vic3RyIiwiTGF0aW4xIiwibGF0aW4xQ2hhcnMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsYXRpbjFTdHIiLCJsYXRpbjFTdHJMZW5ndGgiLCJjaGFyQ29kZUF0IiwiVXRmOCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImUiLCJ1dGY4U3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJCdWZmZXJlZEJsb2NrQWxnb3JpdGhtIiwicmVzZXQiLCJfZGF0YSIsIl9uRGF0YUJ5dGVzIiwiX2FwcGVuZCIsImRhdGEiLCJfcHJvY2VzcyIsImRvRmx1c2giLCJwcm9jZXNzZWRXb3JkcyIsImRhdGFXb3JkcyIsImRhdGFTaWdCeXRlcyIsImJsb2NrU2l6ZSIsIm5CbG9ja3NSZWFkeSIsIm5Xb3Jkc1JlYWR5IiwibWF4IiwiX21pbkJ1ZmZlclNpemUiLCJuQnl0ZXNSZWFkeSIsIm1pbiIsIm9mZnNldCIsIl9kb1Byb2Nlc3NCbG9jayIsInNwbGljZSIsIkNfYWxnbyIsIkhhc2hlciIsImNmZyIsIl9kb1Jlc2V0IiwidXBkYXRlIiwibWVzc2FnZVVwZGF0ZSIsImZpbmFsaXplIiwiX2RvRmluYWxpemUiLCJfY3JlYXRlSGVscGVyIiwiaGFzaGVyIiwibWVzc2FnZSIsIl9jcmVhdGVIbWFjSGVscGVyIiwiSE1BQyIsImFsZ28iLCJhc3NlcnQiLCJ2YWwiLCJtc2ciLCJpbmhlcml0cyIsIkJOIiwibnVtYmVyIiwiYmFzZSIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsInJlZCIsIl9pbml0Iiwid29yZFNpemUiLCJwYXJzZUhleCIsInN0ciIsInN0YXJ0IiwiZW5kIiwibGVuIiwieiIsImIiLCJwYXJzZUJhc2UiLCJtdWwiLCJtb3ZlIiwiZGVzdCIsImluc3BlY3QiLCJudW0iLCJBcnJheSIsImlzQXJyYXkiLCJsZWZ0IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJyZXBsYWNlIiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsIl9zdHJpcCIsInRvQXJyYXkiLCJqIiwidyIsIm9mZiIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJtb2QiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJwb3ciLCJjb3B5IiwiX21vdmUiLCJfZXhwYW5kIiwiX25vcm1TaWduIiwiZm9yIiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInBhZGRpbmciLCJvdXQiLCJjYXJyeSIsImdyb3VwU2l6ZSIsImdyb3VwQmFzZSIsImlzWmVybyIsIm1vZHJuIiwiaWRpdm4iLCJ0b051bWJlciIsInJldCIsInRvSlNPTiIsInRvQnVmZmVyIiwidG9BcnJheUxpa2UiLCJzbWFsbE11bFRvIiwic2VsZiIsImEiLCJsbyIsImsiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJBcnJheVR5cGUiLCJieXRlTGVuZ3RoIiwicmVxTGVuZ3RoIiwicmVzIiwiYWxsb2NhdGUiLCJfdG9BcnJheUxpa2VMRSIsInBvc2l0aW9uIiwic2hpZnQiLCJfdG9BcnJheUxpa2VCRSIsImNsejMyIiwiX2NvdW50Qml0cyIsIl96ZXJvQml0cyIsImJpdExlbmd0aCIsImhpIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImFicyIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpc05lZyIsIm5lZyIsIml1b3IiLCJpb3IiLCJvciIsInVvciIsIml1YW5kIiwiaWFuZCIsImFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJiaXQiLCJ3Yml0IiwiaWFkZCIsImlzdWIiLCJhZGQiLCJzdWIiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJiaWdNdWxUbyIsImhuY2FycnkiLCJqdW1ib011bFRvIiwiRkZUTSIsIngiLCJ5IiwibXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwidHJhbnNmb3JtIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJtdWxwIiwiXyIsInJ3c3QiLCJpd3N0IiwibnJ3cyIsIm5yd3N0Iiwibml3c3QiLCJybXdzIiwibXVsZiIsImlzTmVnTnVtIiwibXVsbiIsInNxciIsImlzcXIiLCJ0b0JpdEFycmF5IiwicSIsIml1c2hsbiIsImJpdHMiLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaXVzaHJuIiwiaGludCIsImV4dGVuZGVkIiwiaCIsIm1hc2siLCJtYXNrZWRXb3JkcyIsImlzaHJuIiwic2hsbiIsInVzaGxuIiwic2hybiIsInVzaHJuIiwiaW1hc2tuIiwibWFza24iLCJpc3VibiIsImFkZG4iLCJzdWJuIiwiaWFicyIsIl9pc2hsbnN1Ym11bCIsIl93b3JkRGl2IiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhbmRsbiIsImFjYyIsIm1vZG4iLCJlZ2NkIiwiQSIsIkIiLCJEIiwiZyIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwidG1wIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsInByaW1lIiwiX3ByaW1lIiwiTW9udCIsImltb2QiLCJyaW52IiwibWludiIsImlyZWR1Y2UiLCJybGVuIiwic3BsaXQiLCJpbXVsSyIsImlucHV0Iiwib3V0cHV0Iiwib3V0TGVuIiwicHJldiIsIm5leHQiLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJpbnYiLCJ3bmQiLCJjdXJyZW50IiwiY3VycmVudExlbiIsIm1vbnQiLCJ1IiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwiY2hlY2tlZCIsInR5cGUiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsIm1hdGNoIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJfYXJyIiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsIkJhc2U2NCIsIkV2cEtERiIsIkNpcGhlciIsIkNfbW9kZSIsIkJsb2NrQ2lwaGVyTW9kZSIsIkNCQyIsIlBrY3M3IiwiQ2lwaGVyUGFyYW1zIiwiT3BlblNTTEZvcm1hdHRlciIsIlNlcmlhbGl6YWJsZUNpcGhlciIsIk9wZW5TU0xLZGYiLCJQYXNzd29yZEJhc2VkQ2lwaGVyIiwiY3JlYXRlRW5jcnlwdG9yIiwiX0VOQ19YRk9STV9NT0RFIiwiY3JlYXRlRGVjcnlwdG9yIiwiX0RFQ19YRk9STV9NT0RFIiwieGZvcm1Nb2RlIiwiX3hmb3JtTW9kZSIsIl9rZXkiLCJwcm9jZXNzIiwiZGF0YVVwZGF0ZSIsImtleVNpemUiLCJpdlNpemUiLCJzZWxlY3RDaXBoZXJTdHJhdGVneSIsImNpcGhlciIsImVuY3J5cHQiLCJkZWNyeXB0IiwiY2lwaGVydGV4dCIsIlN0cmVhbUNpcGhlciIsIml2IiwiRW5jcnlwdG9yIiwiRGVjcnlwdG9yIiwiX2NpcGhlciIsIl9pdiIsInhvckJsb2NrIiwiYmxvY2siLCJfcHJldkJsb2NrIiwicHJvY2Vzc0Jsb2NrIiwiZW5jcnlwdEJsb2NrIiwidGhpc0Jsb2NrIiwiZGVjcnlwdEJsb2NrIiwicGFkIiwiYmxvY2tTaXplQnl0ZXMiLCJuUGFkZGluZ0J5dGVzIiwicGFkZGluZ1dvcmQiLCJwYWRkaW5nV29yZHMiLCJ1bnBhZCIsIkJsb2NrQ2lwaGVyIiwibW9kZUNyZWF0b3IiLCJfbW9kZSIsIl9fY3JlYXRvciIsImZpbmFsUHJvY2Vzc2VkQmxvY2tzIiwiY2lwaGVyUGFyYW1zIiwiZm9ybWF0dGVyIiwiZm9ybWF0IiwiT3BlblNTTCIsInNhbHQiLCJvcGVuU1NMU3RyIiwiY2lwaGVydGV4dFdvcmRzIiwiZW5jcnlwdG9yIiwiY2lwaGVyQ2ZnIiwiYWxnb3JpdGhtIiwiX3BhcnNlIiwia2RmIiwiZXhlY3V0ZSIsInBhc3N3b3JkIiwiY29tcHV0ZSIsImRlcml2ZWRQYXJhbXMiLCJlcXVhbCIsInV0aWxzIiwibWluQXNzZXJ0IiwibWluVXRpbHMiLCJ6ZXJvMiIsImVuY29kZSIsImdldE5BRiIsIm5hZiIsImdldEpTRiIsImsxIiwiazIiLCJqc2YiLCJkMSIsImQyIiwidTEiLCJ1MiIsIm04IiwibTE0IiwibTI0IiwiY2FjaGVkUHJvcGVydHkiLCJjb21wdXRlciIsInBhcnNlQnl0ZXMiLCJpbnRGcm9tTEUiLCJGdW5jdGlvbiIsImlzU3Vycm9nYXRlUGFpciIsImh0b25sIiwiemVybzgiLCJ0b0hleDMyIiwiam9pbjMyIiwic3BsaXQzMiIsInJvdHIzMiIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJzdW0zMl81Iiwic3VtNjQiLCJhaCIsImFsIiwiYmgiLCJzdW02NF9oaSIsImJsIiwic3VtNjRfbG8iLCJzdW02NF80X2hpIiwiY2giLCJjbCIsImRoIiwiZGwiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsImVoIiwiZWwiLCJzdW02NF81X2xvIiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiVHJhbnNmb3JtIiwiU3RyaW5nRGVjb2RlciIsIkNpcGhlckJhc2UiLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiZmluYWwiLCJfZmluYWwiLCJfX2ZpbmFsIiwiX2RlY29kZXIiLCJfZW5jb2RpbmciLCJpbnB1dEVuYyIsIm91dHB1dEVuYyIsIm91dERhdGEiLCJfdXBkYXRlIiwiX3RvU3RyaW5nIiwic2V0QXV0b1BhZGRpbmciLCJnZXRBdXRoVGFnIiwic2V0QXV0aFRhZyIsInNldEFBRCIsIl90cmFuc2Zvcm0iLCJfZmx1c2giLCJkb25lIiwiZmluIiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJEdXBsZXgiLCJ1dGlsIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInYiLCJtZXRob2QiLCJvcHRpb25zIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY2IiLCJNRDUiLCJpdGVyYXRpb25zIiwiZGVyaXZlZEtleSIsImRlcml2ZWRLZXlXb3JkcyIsImdlbmVyYXRlZCIsIkhhc2giLCJmaW5hbFNpemUiLCJfYmxvY2siLCJfZmluYWxTaXplIiwiX2Jsb2NrU2l6ZSIsIl9sZW4iLCJhY2N1bSIsImFzc2lnbmVkIiwicmVtYWluZGVyIiwiZGlnZXN0IiwicmVtIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiaGFzaCIsIl9oYXNoIiwibWFwIiwiX21hcCIsImJhc2U2NENoYXJzIiwidHJpcGxldCIsImNoYXJBdCIsInBhZGRpbmdDaGFyIiwiYmFzZTY0U3RyIiwiYmFzZTY0U3RyTGVuZ3RoIiwicmV2ZXJzZU1hcCIsIl9yZXZlcnNlTWFwIiwicGFkZGluZ0luZGV4IiwiYml0czEiLCJiaXRzMiIsImJpdHNDb21iaW5lZCIsInBhcnNlTG9vcCIsIlQiLCJNIiwib2Zmc2V0X2kiLCJNX29mZnNldF9pIiwiSCIsIk1fb2Zmc2V0XzAiLCJNX29mZnNldF8xIiwiTV9vZmZzZXRfMiIsIk1fb2Zmc2V0XzMiLCJNX29mZnNldF80IiwiTV9vZmZzZXRfNSIsIk1fb2Zmc2V0XzYiLCJNX29mZnNldF83IiwiTV9vZmZzZXRfOCIsIk1fb2Zmc2V0XzkiLCJNX29mZnNldF8xMCIsIk1fb2Zmc2V0XzExIiwiTV9vZmZzZXRfMTIiLCJNX29mZnNldF8xMyIsIk1fb2Zmc2V0XzE0IiwiTV9vZmZzZXRfMTUiLCJGRiIsIkdHIiwiSEgiLCJJSSIsIm5CaXRzVG90YWwiLCJuQml0c0xlZnQiLCJuQml0c1RvdGFsSCIsIm5CaXRzVG90YWxMIiwiSF9pIiwiSG1hY01ENSIsIlJJUEVNRDE2MCIsInNoYSIsImFsZyIsIlN0cmVhbSIsIlBhc3NUaHJvdWdoIiwib2JqZWN0VG9TdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImlzVW5kZWZpbmVkIiwiaXNSZWdFeHAiLCJpc09iamVjdCIsImlzRGF0ZSIsImlzRXJyb3IiLCJpc0Z1bmN0aW9uIiwiaXNQcmltaXRpdmUiLCJCbG9ja0hhc2giLCJwZW5kaW5nIiwicGVuZGluZ1RvdGFsIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsIl9kZWx0YTgiLCJfZGVsdGEzMiIsIl9wYWQiLCJfZGlnZXN0IiwiYXNuMSIsImJpZ251bSIsImRlZmluZSIsImNvbnN0YW50cyIsImRlY29kZXJzIiwiZW5jb2RlcnMiLCJSZXBvcnRlciIsIkRlY29kZXJCdWZmZXIiLCJFbmNvZGVyQnVmZmVyIiwiTm9kZSIsImZuIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYXNVSW50MzJBcnJheSIsInNjcnViVmVjIiwiY3J5cHRCbG9jayIsImtleVNjaGVkdWxlIiwiU1VCX01JWCIsIlNCT1giLCJuUm91bmRzIiwidDAiLCJ0MSIsInQyIiwidDMiLCJTVUJfTUlYMCIsIlNVQl9NSVgxIiwiU1VCX01JWDIiLCJTVUJfTUlYMyIsInMwIiwiczEiLCJzMiIsInMzIiwia3NSb3ciLCJSQ09OIiwiRyIsIklOVl9TQk9YIiwiSU5WX1NVQl9NSVgiLCJ4aSIsInN4IiwieDQiLCJ4OCIsIkFFUyIsIl9yZXNldCIsImtleVdvcmRzIiwia3NSb3dzIiwiaW52S2V5U2NoZWR1bGUiLCJpayIsImtzUiIsInR0IiwiX25Sb3VuZHMiLCJfa2V5U2NoZWR1bGUiLCJfaW52S2V5U2NoZWR1bGUiLCJlbmNyeXB0QmxvY2tSYXciLCJtMSIsInNjcnViIiwia2V5Qml0cyIsIml2TGVuIiwia2V5TGVuIiwidXNlZCIsImtleVN0YXJ0IiwiaXZTdGFydCIsIkJhc2VDdXJ2ZSIsImNvbmYiLCJ6ZXJvIiwidHdvIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiX2JpdExlbmd0aCIsImFkanVzdENvdW50IiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJCYXNlUG9pbnQiLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJzdGVwIiwicmVwciIsIm5hZlciLCJqcG9pbnQiLCJtaXhlZEFkZCIsInBvaW50cyIsInRvUCIsIl93bmFmTXVsIiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsImRibHAiLCJfd25hZk11bEFkZCIsImRlZlciLCJjb2VmZnMiLCJqYWNvYmlhblJlc3VsdCIsInduZFdpZHRoIiwiY29tYiIsInRvSiIsImluZGV4IiwiamEiLCJqYiIsImRlY29kZVBvaW50IiwicG9pbnRGcm9tWCIsImVuY29kZUNvbXByZXNzZWQiLCJfZW5jb2RlIiwiY29tcGFjdCIsImdldFgiLCJnZXRZIiwicHJlY29tcHV0ZSIsInBvd2VyIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJkYmwiLCJhZXNpZCIsImZpeFByb2MiLCJjaXBoZXJzIiwiY29tcGF0IiwicGFyc2VLZXlzIiwicGFzc3BocmFzZSIsIm5kYXRhIiwic3RyaXBwZWQiLCJ0YWciLCJjZXJ0aWZpY2F0ZSIsImRlY29kZSIsInRic0NlcnRpZmljYXRlIiwic3ViamVjdFB1YmxpY0tleUluZm8iLCJQdWJsaWNLZXkiLCJSU0FQdWJsaWNLZXkiLCJzdWJqZWN0UHVibGljS2V5Iiwic3ViamVjdFByaXZhdGVLZXkiLCJwYXJhbXMiLCJwdWJfa2V5IiwiRFNBcGFyYW0iLCJrZGUiLCJrZGVwYXJhbXMiLCJpdGVycyIsImNpcGhlclRleHQiLCJrZXlsZW4iLCJwYmtkZjJTeW5jIiwiY3JlYXRlRGVjaXBoZXJpdiIsIkVuY3J5cHRlZFByaXZhdGVLZXkiLCJQcml2YXRlS2V5IiwiUlNBUHJpdmF0ZUtleSIsInByaXZhdGVLZXkiLCJFQ1ByaXZhdGVLZXkiLCJwcml2X2tleSIsIkRTQVByaXZhdGVLZXkiLCJwYXJhbWV0ZXJzIiwic2lnbmF0dXJlIiwiWDMyV29yZEFycmF5IiwiQ194NjQiLCJ4NjQiLCJXb3JkIiwiaGlnaCIsImxvdyIsInRvWDMyIiwieDY0V29yZHMiLCJ4NjRXb3Jkc0xlbmd0aCIsIngzMldvcmRzIiwieDY0V29yZCIsIndvcmRzTGVuZ3RoIiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJyb3RsIiwiZm5GIiwiZm5HIiwiZm5IIiwiZm5JIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJfZ2V0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsImVtaXR0ZXIiLCJjb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwiY29udGV4dCIsImhhbmRsZXIiLCJvcmlnaW5hbExpc3RlbmVyIiwicG9wIiwic3BsaWNlT25lIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIkNvcmtlZFJlcXVlc3QiLCJfdGhpcyIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwic2V0SW1tZWRpYXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZGVzdHJveSIsImRvV3JpdGUiLCJjaHVuayIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJwcmVmaW5pc2giLCJnZXRCdWZmZXIiLCJoYXNJbnN0YW5jZSIsInBpcGUiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJsYXN0Iiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJuYiIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ0ZXh0IiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiemwiLCJ6ciIsInNsIiwic3IiLCJobCIsImhyIiwiX2UiLCJmbjEiLCJmbjIiLCJmbjMiLCJmbjQiLCJmbjUiLCJhciIsImJyIiwiY3IiLCJkciIsInRsIiwidHIiLCJBbGdvcml0aG0iLCJzaGExIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIiwiYnVmZmVyT2ZmIiwiX3VwZGF0ZURlY3J5cHQiLCJfdXBkYXRlRW5jcnlwdCIsIl9idWZmZXIiLCJfZmx1c2hCdWZmZXIiLCJpbnB1dE9mZiIsIm91dHB1dE9mZiIsImZpcnN0IiwiX2ZpbmFsRW5jcnlwdCIsIl9maW5hbERlY3J5cHQiLCJfdW5wYWQiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiRGVjaXBoZXJpdiIsImxpc3RDaXBoZXJzIiwiZ2V0Q2lwaGVycyIsIm1vZGVNb2R1bGVzIiwiRUNCIiwiQ0ZCIiwiQ0ZCOCIsIkNGQjEiLCJPRkIiLCJDVFIiLCJHQ00iLCJSYW5kIiwicmFuZCIsImdlbmVyYXRlIiwiX3JhbmQiLCJnZXRCeXRlcyIsImdldEJ5dGUiLCJibiIsImNydCIsInByaXYiLCJibGluZHMiLCJnZXRyIiwiYmxpbmRlciIsIm1vZHVsdXMiLCJwdWJsaWNFeHBvbmVudCIsInVuYmxpbmRlciIsImJsaW5kIiwiYmxpbmRlZCIsImMxIiwicHJpbWUxIiwiYzIiLCJwcmltZTIiLCJxaW52IiwiY29lZmZpY2llbnQiLCJleHBvbmVudDEiLCJtMiIsImV4cG9uZW50MiIsImVsbGlwdGljIiwiY3VydmVzIiwiZWMiLCJlZGRzYSIsInByZSIsIlByZXNldEN1cnZlIiwic2hvcnQiLCJlZHdhcmRzIiwiaXNJbmZpbml0eSIsImRlZmluZUN1cnZlIiwibGFtYmRhIiwiYmFzaXMiLCJjb21tb24iLCJyaXBlbWQiLCJobWFjIiwicmlwZW1kMTYwIiwiVyIsIlNIQTEiLCJIbWFjU0hBMSIsIl9oYXNoZXIiLCJoYXNoZXJCbG9ja1NpemUiLCJoYXNoZXJCbG9ja1NpemVCeXRlcyIsIm9LZXkiLCJfb0tleSIsImlLZXkiLCJfaUtleSIsIm9LZXlXb3JkcyIsImlLZXlXb3JkcyIsImlubmVySGFzaCIsInBhcnNlSnd0IiwidG9rZW4iLCJKU09OIiwiYXRvYiIsImlzRXhwaXJlZCIsInRva2VuUGF5bG9hZCIsImV4cGlyZWQiLCJleHAiLCJEYXRlIiwibm93IiwiQ29tbWFuZHMiLCJHRVRfSVRFTSIsIlNFVF9JVEVNIiwiUkVNT1ZFX0lURU0iLCJDTEVBUiIsInNlcnZlciIsIiRsb2NhbFN0b3JhZ2UiLCJzdG9yYWdlIiwicHJvY2Vzc0NvbW1hbmQiLCJjb21tYW5kIiwiY29tbWFuZEFyZ3VtZW50cyIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiY2xpZW50Iiwic2VuZENvbW1hbmRGdW5jdGlvbiIsInNlbmRDb21tYW5kIiwiQ29va2llcyIsIkdFVCIsIlNFVCIsIlJFTU9WRSIsIkdFVF9KU09OIiwicmVtb3ZlIiwiZ2V0SlNPTiIsIklGUkFNRV9JRCIsIkV2ZW50cyIsIkNPTU1BTkQiLCJSRVBMWSIsIkludGVybmFsQ29tbWFuZHMiLCJQSU5HIiwiTElTVF9QUk9WSURFUlMiLCJfZmluYWxpemVkIiwicHJlZml4IiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsImRlYnVnIiwiZGVidWdsb2ciLCJCdWZmZXJMaXN0Iiwia1Byb3h5RXZlbnRzIiwicmVhZGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImhhc1N0cmluZ3MiLCJ0YWlsIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsImZyb21MaXN0UGFydGlhbCIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibk9yaWciLCJkb1JlYWQiLCJwaXBlT3B0cyIsImVuZEZuIiwic3Rkb3V0Iiwic3RkZXJyIiwidW5waXBlIiwib251bnBpcGUiLCJ1bnBpcGVJbmZvIiwiaGFzVW5waXBlZCIsIm9uY2xvc2UiLCJvbmZpbmlzaCIsIm9uZHJhaW4iLCJvbmVycm9yIiwib25kYXRhIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwicGF1c2UiLCJldmVudCIsInJlc3VtZSIsImRlc3RzIiwiZXYiLCJ3cmFwIiwicGF1c2VkIiwiX2Zyb21MaXN0IiwiZW1pdEVycm9yTlQiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsIl90cmFuc2Zvcm1TdGF0ZSIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJycyIsIm5lZWRUcmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwiZmx1c2giLCJfdGhpczIiLCJlcnIyIiwiSyIsIlNoYTI1NiIsIl93IiwibWFqIiwic2lnbWEwIiwic2lnbWExIiwiZ2FtbWEwIiwiX2YiLCJfZyIsIl9oIiwiZiIsIlQxIiwiVDIiLCJTaGE1MTIiLCJDaCIsInhsIiwiR2FtbWEwIiwiR2FtbWEwbCIsIkdhbW1hMSIsIkdhbW1hMWwiLCJnZXRDYXJyeSIsIl9haCIsIl9iaCIsIl9jaCIsIl9kaCIsIl9laCIsIl9maCIsIl9naCIsIl9oaCIsIl9hbCIsIl9ibCIsIl9jbCIsIl9kbCIsIl9lbCIsIl9mbCIsIl9nbCIsIl9obCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTEiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsInBia2RmMiIsIk1BWF9BTExPQyIsImNoZWNrQnVmZmVyIiwiY2hlY2tQYXJhbWV0ZXJzIiwic2l6ZXMiLCJybWQxNjAiLCJzYWx0TGVuIiwic2hhRnVuYyIsImdldERpZ2VzdCIsImlwYWQxIiwiaXBhZDIiLCJESyIsImJsb2NrMSIsImRlc3RQb3MiLCJoTGVuIiwiVSIsImlwIiwiaW5MIiwiaW5SIiwib3V0TCIsIm91dFIiLCJyaXAiLCJwYzEiLCJyMjhzaGwiLCJwYzJ0YWJsZSIsInBjMiIsImV4cGFuZCIsInNUYWJsZSIsInN1YnN0aXR1dGUiLCJwZXJtdXRlVGFibGUiLCJwYWRTcGxpdCIsImdyb3VwIiwiREVTU3RhdGUiLCJERVMiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwic2hpZnRUYWJsZSIsImtMIiwia1IiLCJpbnAiLCJpbk9mZiIsIm91dE9mZiIsIl9lbmNyeXB0IiwiX2RlY3J5cHQiLCJsU3RhcnQiLCJyU3RhcnQiLCJrZXlMIiwia2V5UiIsImluY3IzMiIsImdldEJsb2NrIiwiX3ByZXYiLCJjaHVua051bSIsIl9jYWNoZSIsIml0ZW0iLCJhZXMiLCJHSEFTSCIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9hbGVuIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwicnVtcCIsInhvclRlc3QiLCJmaW5kUHJpbWUiLCJzaW1wbGVTaWV2ZSIsImZlcm1hdFRlc3QiLCJUV0VOVFlGT1VSIiwibWlsbGVyUmFiaW4iLCJPTkUiLCJUV08iLCJGSVZFIiwiVEVOIiwiVEhSRUUiLCJFTEVWRU4iLCJGT1VSIiwiX2dldFByaW1lcyIsImdlbiIsIm4yIiwidGVzdCIsImJyb3JhbmQiLCJNaWxsZXJSYWJpbiIsIl9yYW5kYmVsb3ciLCJtaW5fYnl0ZXMiLCJfcmFuZHJhbmdlIiwic3RvcCIsInJvbmUiLCJuMSIsInJuMSIsImdldERpdmlzb3IiLCJjaDMyIiwibWFqMzIiLCJwMzIiLCJmdF8xIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Iiwic2hhQ29tbW9uIiwic2hhMjU2X0siLCJTSEEyNTYiLCJzaGE1MTJfSyIsIlNIQTUxMiIsImNoNjRfaGkiLCJ5aCIsInlsIiwiemgiLCJjaDY0X2xvIiwibWFqNjRfaGkiLCJtYWo2NF9sbyIsInMwXzUxMl9oaSIsInMwXzUxMl9sbyIsInMxXzUxMl9oaSIsInMxXzUxMl9sbyIsImcwXzUxMl9oaSIsImcwXzUxMl9sbyIsImcxXzUxMl9oaSIsImcxXzUxMl9sbyIsIl9wcmVwYXJlQmxvY2siLCJjMF9oaSIsImMwX2xvIiwiYzFfaGkiLCJjMV9sbyIsImMyX2hpIiwiYzJfbG8iLCJjM19oaSIsImMzX2xvIiwiYzRfaGkiLCJjNF9sbyIsIlQxX2hpIiwiVDFfbG8iLCJUMl9oaSIsIlQyX2xvIiwicmVwb3J0ZXIiLCJzYXZlIiwicmVzdG9yZSIsImlzRW1wdHkiLCJmYWlsIiwic2tpcCIsIl9yZXBvcnRlclN0YXRlIiwicmF3IiwiZm9yRWFjaCIsIl9yZXZlcnNlIiwiZGVyIiwiREVSRGVjb2RlciIsImVudGl0eSIsInRyZWUiLCJERVJOb2RlIiwiYm9keSIsInBhcmVudCIsImRlckRlY29kZVRhZyIsImNscyIsInRhZ0NsYXNzIiwicHJpbWl0aXZlIiwib2N0IiwidGFnU3RyIiwiZGVyRGVjb2RlTGVuIiwiX2RlY29kZSIsIl9wZWVrVGFnIiwiYW55IiwiZGVjb2RlZFRhZyIsIl9kZWNvZGVUYWciLCJfc2tpcFVudGlsRW5kIiwiX2RlY29kZUxpc3QiLCJyZXN1bHQiLCJwb3NzaWJsZUVuZCIsIl9kZWNvZGVTdHIiLCJ1bnVzZWQiLCJudW1zdHIiLCJfaXNOdW1zdHIiLCJwcmludHN0ciIsIl9pc1ByaW50c3RyIiwiX2RlY29kZU9iamlkIiwidmFsdWVzIiwicmVsYXRpdmUiLCJpZGVudGlmaWVycyIsImlkZW50Iiwic3ViaWRlbnQiLCJzZWNvbmQiLCJfZGVjb2RlVGltZSIsInllYXIiLCJtb24iLCJkYXkiLCJob3VyIiwic2VjIiwiVVRDIiwiX2RlY29kZU51bGwiLCJfZGVjb2RlQm9vbCIsIl9kZWNvZGVJbnQiLCJfdXNlIiwiX2dldERlY29kZXIiLCJERVJFbmNvZGVyIiwiX2VuY29kZUNvbXBvc2l0ZSIsImNvbnRlbnQiLCJoZWFkZXIiLCJlbmNvZGVkVGFnIiwidGFnQnlOYW1lIiwidGFnQ2xhc3NCeU5hbWUiLCJlbmNvZGVUYWciLCJfY3JlYXRlRW5jb2RlckJ1ZmZlciIsImxlbk9jdGV0cyIsIl9lbmNvZGVTdHIiLCJfZW5jb2RlT2JqaWQiLCJpZCIsIm9iamlkIiwiX2VuY29kZVRpbWUiLCJ0aW1lIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIl9lbmNvZGVOdWxsIiwiX2VuY29kZUludCIsIm51bUFycmF5Iiwic2lnbiIsIl9lbmNvZGVCb29sIiwiX2dldEVuY29kZXIiLCJfc2tpcERlZmF1bHQiLCJkYXRhQnVmZmVyIiwiX2Jhc2VTdGF0ZSIsImRlZmF1bHRCdWZmZXIiLCJfZW5jb2RlVmFsdWUiLCJjcmVhdGVIYXNoIiwiaTJvcHMiLCJzZWVkIiwicGFkZGVkTXNnIiwiaXNQcmltZSIsInNxcnROIiwiZmFjdG9yIiwiZ2V0RnJhY3Rpb25hbEJpdHMiLCJuUHJpbWUiLCJnYW1tYTB4IiwiZ2FtbWExeCIsIkhtYWNTSEEyNTYiLCJYNjRXb3JkIiwiWDY0V29yZEFycmF5IiwiWDY0V29yZF9jcmVhdGUiLCJIMCIsIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiIsIkg3IiwiSDBoIiwiSDBsIiwiSDFoIiwiSDFsIiwiSDJoIiwiSDJsIiwiSDNoIiwiSDNsIiwiSDRoIiwiSDRsIiwiSDVoIiwiSDVsIiwiSDZoIiwiSDZsIiwiSDdoIiwiSDdsIiwiV2kiLCJnYW1tYTB4aCIsImdhbW1hMHhsIiwiZ2FtbWEwaCIsImdhbW1hMXhoIiwiZ2FtbWExeGwiLCJnYW1tYTFoIiwiV2k3IiwiV2kxNiIsIktpIiwiSG1hY1NIQTUxMiIsImluaXRpYWxpemVDbGllbnQiLCJpbml0aWFsaXplU2VydmVyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lciIsInByb3ZpZGVyIiwiaWZyYW1lSWQiLCIkd2luZG93IiwiYWxsb3dlZERvbWFpbnMiLCJpZnJhbWUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29udGVudFdpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvcmlnaW4iLCJmaW5kIiwiX2lzQWxsb3dlZE9yaWdpbiIsInBvc3RNZXNzYWdlIiwic2VydmVyVXJsIiwiZWxlbSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImNzc1RleHQiLCJhcHBlbmRDaGlsZCIsInNsZWVwIiwicGluZ1Byb21pc2UiLCJfc2VuZENvbW1hbmQiLCJyYWNlIiwiaWZyYW1lVGltZW91dCIsImluaXRpYWxQcm92aWRlciIsIklOSVRJQUxfUFJPVklERVIiLCJQUk9WSURFUiIsIl9jcmVhdGVJZnJhbWVJZk5vdEV4aXN0cyIsIl9zZW5kUGluZ0FuZFdhaXRSZXBseSIsIkNyb3NzU3RvcmFnZUNsaWVudCIsImFkZFByb3ZpZGVyIiwibG9jYWxTdG9yYWdlUHJvdmlkZXIiLCJjb29raWVQcm92aWRlciIsIl9zZXREZWZhdWx0UHJvdmlkZXJzIiwiZ2V0UHJvdmlkZXIiLCJwcm92aWRlcnMiLCJfbmFtZSIsIl9wcm92aWRlciIsIl9vcHRpb25zIiwibmV3UHJvdmlkZXIiLCJsaXN0UHJvdmlkZXJzIiwiZmFjdG9yeSIsIk9sZENvb2tpZXMiLCJhcGkiLCJub0NvbmZsaWN0IiwiYXR0cmlidXRlcyIsImNvbnZlcnRlciIsInBhdGgiLCJkZWZhdWx0cyIsImV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsInN0cmluZ2lmaWVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZU5hbWUiLCJjb29raWUiLCJqc29uIiwiamFyIiwiY29va2llcyIsInBhcnRzIiwid2l0aENvbnZlcnRlciIsIl9yZXBseUNvbW1hbmQiLCJDcm9zc1N0b3JhZ2VTZXJ2ZXIiLCJvbkNvbW1hbmQiLCJwcm92aWRlcnNOYW1lcyIsImluaXRpYWxpemUiLCJfYmluZENvbW1hbmRMaXN0ZW5lciIsImFsbFByb3ZpZGVycyIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiX2dldERlZmF1bHRQcm92aWRlcnMiLCJybmciLCJwc2V1ZG9SYW5kb21CeXRlcyIsInBybmciLCJjcmVhdGVIbWFjIiwiYWxnb3MiLCJhbGdvS2V5cyIsImhhc2hlcyIsImdldEhhc2hlcyIsIkRpZmZpZUhlbGxtYW5Hcm91cCIsImNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCIsImdldERpZmZpZUhlbGxtYW4iLCJjcmVhdGVEaWZmaWVIZWxsbWFuIiwiRGlmZmllSGVsbG1hbiIsImNyZWF0ZVNpZ24iLCJTaWduIiwiY3JlYXRlVmVyaWZ5IiwiVmVyaWZ5IiwiY3JlYXRlRUNESCIsInB1YmxpY0VuY3J5cHQiLCJwcml2YXRlRW5jcnlwdCIsInB1YmxpY0RlY3J5cHQiLCJwcml2YXRlRGVjcnlwdCIsInJmIiwicmFuZG9tRmlsbCIsInJhbmRvbUZpbGxTeW5jIiwiY3JlYXRlQ3JlZGVudGlhbHMiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiaXNMRSIsIm1MZW4iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImxvZyIsIkxOMiIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiY3VzdG9tIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiaHRtbCIsImNoYW5uZWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsInNvdXJjZSIsImF0dGFjaEV2ZW50IiwidGFzayIsImNvbmZpZyIsInRyYWNlIiwiU2hhIiwicm90bDMwIiwiZnQiLCJTaGExIiwicm90bDUiLCJTaGEyMjQiLCJTaGEzODQiLCJFRSIsIl9pc1N0ZGlvIiwiZGlkT25FbmQiLCJjbGVhbnVwIiwiWkVST19CVUYiLCJzdWJ0bGUiLCJ0b0Jyb3dzZXIiLCJjaGVja3MiLCJicm93c2VyUGJrZGYyIiwiaW1wb3J0S2V5IiwidGhlbiIsImRlcml2ZUJpdHMiLCJwcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCJwcm9tIiwiY2F0Y2giLCJjaGVja05hdGl2ZSIsInJlc3AiLCJhZXNNb2RlcyIsImRlc01vZGVzIiwiZWJ0ayIsInN1aXRlIiwiZGVzIiwiaW5zdGFudGlhdGUiLCJFREUiLCJvcHRzIiwibW9kZU5hbWUiLCJfZGVzIiwiZGVzMyIsInByb3RvIiwiQ0JDU3RhdGUiLCJfY2JjSW5pdCIsIl9jYmNTdGF0ZSIsInN1cGVyUHJvdG8iLCJFREVTdGF0ZSIsImszIiwiX2VkZVN0YXRlIiwiTU9ERVMiLCJBdXRoQ2lwaGVyIiwiU3BsaXR0ZXIiLCJfYXV0b3BhZGRpbmciLCJ0aGluZyIsIlBBRERJTkciLCJjYWNoZSIsInNldFRvIiwicGFkQnVmZiIsImVuY3J5cHRTdGFydCIsImVuY3J5cHRCeXRlIiwiYnl0ZVBhcmFtIiwic2hpZnRJbiIsIlpFUk9FUyIsImZyb21BcnJheSIsIl9tdWx0aXBseSIsImxzYlZpIiwiVmkiLCJaaSIsImFibCIsIl9sYXN0IiwicGFkZGVkIiwiYXV0b1BhZGRpbmciLCJnZW5lcmF0ZVByaW1lIiwiREgiLCJFTkNPRElOR1MiLCJnZW5lcmF0b3IiLCJnZW5jIiwid2VicGFja1BvbHlmaWxsIiwicGF0aHMiLCJjaGlsZHJlbiIsIlNFVkVOIiwic2V0UHVibGljS2V5IiwicHViIiwiX3B1YiIsInNldFByaXZhdGVLZXkiLCJfcHJpdiIsInByaW1lQ2FjaGUiLCJtYWxsZWFibGUiLCJzZXRHZW5lcmF0b3IiLCJfX3ByaW1lIiwiX3ByaW1lTGVuIiwiX3ByaW1lQ29kZSIsImZvcm1hdFJldHVyblZhbHVlIiwiaGV4IiwiY2hlY2tQcmltZSIsIl9fZ2VuIiwiZ2VuZXJhdGVLZXlzIiwiX2dlbiIsImdldFB1YmxpY0tleSIsImNvbXB1dGVTZWNyZXQiLCJvdGhlciIsInNlY3JldCIsImdldFByaW1lIiwiZnJvbnQiLCJnZXRQcml2YXRlS2V5IiwiZ2V0R2VuZXJhdG9yIiwidmVyaWZ5IiwiYWxnb3JpdGhtcyIsIl9oYXNoVHlwZSIsIl90YWciLCJfc2lnblR5cGUiLCJzaWciLCJFQyIsImdldEtleSIsImhsZW4iLCJoYml0cyIsImJpdHMyaW50IiwiYml0czJvY3RldHMiLCJvYml0cyIsIm1ha2VLZXkiLCJrdiIsIm1ha2VSIiwiaGFzaFR5cGUiLCJzaWduVHlwZSIsImN1cnZlSWQiLCJrZXlGcm9tUHJpdmF0ZSIsInRvREVSIiwiZWNTaWduIiwiZHNhU2lnbiIsIlNob3J0Q3VydmUiLCJ0aW52IiwiemVyb0EiLCJ0aHJlZUEiLCJlbmRvIiwiX2dldEVuZG9tb3JwaGlzbSIsIl9lbmRvV25hZlQxIiwiX2VuZG9XbmFmVDIiLCJQb2ludCIsImlzUmVkIiwiaW5mIiwiSlBvaW50Iiwiek9uZSIsImJldGFzIiwiX2dldEVuZG9Sb290cyIsImxhbWJkYXMiLCJ2ZWMiLCJfZ2V0RW5kb0Jhc2lzIiwibnRpbnYiLCJwcmV2UiIsImFwcnhTcXJ0IiwieTEiLCJ5MiIsImxlbjEiLCJfZW5kb1NwbGl0IiwidjEiLCJ2MiIsInAxIiwicDIiLCJxMSIsInEyIiwiYXgiLCJyaHMiLCJfZW5kb1duYWZNdWxBZGQiLCJucG9pbnRzIiwibmNvZWZmcyIsImZyb21KU09OIiwiZW5kb011bCIsIm9iajJwb2ludCIsIm54IiwibnkiLCJ5czEiLCJkeWludiIsIm11bEFkZCIsImptdWxBZGQiLCJfcHJlY29tcHV0ZSIsIm5lZ2F0ZSIsInppbnYiLCJ6aW52MiIsImF5IiwicHoyIiwiejIiLCJoMiIsImgzIiwibnoiLCJqeCIsImp5IiwianoiLCJqejQiLCJqeWQiLCJqeDIiLCJqeWQyIiwianlkNCIsImRueSIsIl96ZXJvRGJsIiwiX3RocmVlRGJsIiwiX2RibCIsInh4IiwieXkiLCJ5eXl5IiwieXl5eTgiLCJjOCIsImdhbW1hIiwiYWxwaGEiLCJiZXRhNCIsImJldGE4IiwiZ2dhbW1hOCIsImp5MiIsImp4ZDQiLCJqeWQ4IiwidHJwbCIsInp6IiwibW0iLCJlZSIsInl5dTQiLCJrYmFzZSIsInozIiwicHozIiwiZXFYVG9QIiwienMiLCJ4YyIsIk1vbnRDdXJ2ZSIsImk0IiwiYTI0Iiwibm9ybWFsaXplIiwiYWEiLCJiYiIsImRpZmZBZGQiLCJkYSIsImp1bWxBZGQiLCJFZHdhcmRzQ3VydmUiLCJ0d2lzdGVkIiwibU9uZUEiLCJkZCIsIm9uZUMiLCJfbXVsQSIsIl9tdWxDIiwibGhzIiwicG9pbnRGcm9tWSIsIl9leHREYmwiLCJudCIsIl9wcm9qRGJsIiwiX2V4dEFkZCIsIl9wcm9qQWRkIiwiemkiLCJzaGExX0siLCJTSEEyMjQiLCJTSEEzODQiLCJLaCIsIkUiLCJBaCIsIkJoIiwiRGgiLCJFaCIsInJoIiwic2giLCJpbm5lciIsIm91dGVyIiwiSG1hY0RSQkciLCJLZXlQYWlyIiwiU2lnbmF0dXJlIiwibmgiLCJrZXlQYWlyIiwiZnJvbVByaXZhdGUiLCJrZXlGcm9tUHVibGljIiwiZnJvbVB1YmxpYyIsImdlbktleVBhaXIiLCJkcmJnIiwicGVycyIsInBlcnNFbmMiLCJlbnRyb3B5IiwiZW50cm9weUVuYyIsIm5vbmNlIiwibnMyIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNPbmx5IiwiYmtleSIsImdldFByaXZhdGUiLCJuczEiLCJpdGVyIiwia3AiLCJrcFgiLCJyZWNvdmVyeVBhcmFtIiwiY2Fub25pY2FsIiwic2ludiIsImdldFB1YmxpYyIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsInByZWRSZXNpc3QiLCJtaW5FbnRyb3B5IiwiX3Jlc2VlZCIsInJlc2VlZEludGVydmFsIiwiViIsIm5vbmNlRW5jIiwiX2htYWMiLCJrbWFjIiwicmVzZWVkIiwiYWRkRW5jIiwidGVtcCIsIl9pbXBvcnRQcml2YXRlIiwicHJpdkVuYyIsIl9pbXBvcnRQdWJsaWMiLCJwdWJFbmMiLCJyZWFzb24iLCJkZXJpdmUiLCJfaW1wb3J0REVSIiwiUG9zaXRpb24iLCJwbGFjZSIsImdldExlbmd0aCIsImluaXRpYWwiLCJvY3RldExlbiIsInJtUGFkZGluZyIsImNvbnN0cnVjdExlbmd0aCIsIm9jdGV0cyIsInNsZW4iLCJiYWNrSGFsZiIsIkVERFNBIiwicG9pbnRDbGFzcyIsImVuY29kaW5nTGVuZ3RoIiwia2V5RnJvbVNlY3JldCIsImhhc2hJbnQiLCJSZW5jb2RlZCIsImVuY29kZVBvaW50Iiwic18iLCJwdWJCeXRlcyIsIlMiLCJtYWtlU2lnbmF0dXJlIiwiU0ciLCJmcm9tU2VjcmV0IiwibGFzdEl4Iiwibm9ybWVkIiwieElzT2RkIiwiZW5jb2RlSW50IiwiZGVjb2RlSW50IiwiaXNQb2ludCIsIl9zZWNyZXQiLCJfcHViQnl0ZXMiLCJwcml2Qnl0ZXMiLCJnZXRTZWNyZXQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwidG9VcHBlckNhc2UiLCJzZXEiLCJpbnQiLCJ1c2UiLCJBbGdvcml0aG1JZGVudGlmaWVyIiwiYml0c3RyIiwibnVsbF8iLCJvcHRpb25hbCIsIlByaXZhdGVLZXlJbmZvIiwib2N0c3RyIiwiRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8iLCJleHBsaWNpdCIsIkVDUGFyYW1ldGVycyIsImNob2ljZSIsIm5hbWVkQ3VydmUiLCJFbnRpdHkiLCJfY3JlYXRlTmFtZWQiLCJuYW1lZCIsInJ1bkluVGhpc0NvbnRleHQiLCJfaW5pdE5hbWVkIiwiT2JqZWN0X2tleXMiLCJkZWZpbmVQcm9wIiwiZ2xvYmFscyIsIkNvbnRleHQiLCJTY3JpcHQiLCJydW5JbkNvbnRleHQiLCJkaXNwbGF5Iiwid2luIiwid0V2YWwiLCJldmFsIiwid0V4ZWNTY3JpcHQiLCJleGVjU2NyaXB0Iiwid2luS2V5cyIsInJ1bkluTmV3Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJpc0NvbnRleHQiLCJjcmVhdGVTY3JpcHQiLCJlcnJvcnMiLCJSZXBvcnRlckVycm9yIiwicmV0aHJvdyIsInBhdGhMZW4iLCJlbnRlcktleSIsImV4aXRLZXkiLCJsZWF2ZUtleSIsImVudGVyT2JqZWN0IiwibGVhdmVPYmplY3QiLCJpbmhlcml0ZWQiLCJzdGFjayIsInBhcnRpYWwiLCJ3cmFwUmVzdWx0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0YWdzIiwibWV0aG9kcyIsInJldmVyc2VBcmdzIiwidXNlRGVjb2RlciIsImltcGxpY2l0IiwiY29udGFpbnMiLCJfd3JhcCIsInN0YXRlUHJvcHMiLCJjc3RhdGUiLCJwcm9wIiwiZmlsdGVyIiwiY2hpbGQiLCJfdXNlQXJncyIsImRlZiIsIm5ld0tleSIsInByZXZPYmoiLCJwcmVzZW50IiwicHJldktleSIsIl9kZWNvZGVHZW5lcmljIiwiX2RlY29kZUNob2ljZSIsInRyYWNrIiwiX2dldFVzZSIsInNvbWUiLCJub2RlIiwiX2VuY29kZUNob2ljZSIsIl9lbmNvZGVQcmltaXRpdmUiLCIwIiwiMSIsIjIiLCIzIiwicGVtIiwiUEVNRGVjb2RlciIsImxpbmVzIiwibGFiZWwiLCJQRU1FbmNvZGVyIiwiYXNuIiwiVGltZSIsInV0Y1RpbWUiLCJ1dGN0aW1lIiwiZ2VuZXJhbFRpbWUiLCJnZW50aW1lIiwiQXR0cmlidXRlVHlwZVZhbHVlIiwiU3ViamVjdFB1YmxpY0tleUluZm8iLCJSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lIiwic2V0b2YiLCJSRE5TZXF1ZW5jZSIsInNlcW9mIiwiTmFtZSIsInJkblNlcXVlbmNlIiwiVmFsaWRpdHkiLCJFeHRlbnNpb24iLCJib29sIiwiVEJTQ2VydGlmaWNhdGUiLCJYNTA5Q2VydGlmaWNhdGUiLCJmaW5kUHJvYyIsInN0YXJ0UmVnZXgiLCJmdWxsUmVnZXgiLCJldnAiLCJva2V5IiwiZGVjcnlwdGVkIiwiY2lwaGVyS2V5IiwibWF0Y2gyIiwiY2hlY2tWYWx1ZSIsInB1YmtleSIsImVjVmVyaWZ5IiwidW5wYWNrZWQiLCJtb250cCIsImRzYVZlcmlmeSIsInBhZE51bSIsIkVDREgiLCJhbGlhc2VzIiwic2VjcDI1NmsxIiwic2VjcDIyNHIxIiwicHJpbWUyNTZ2MSIsInByaW1lMTkydjEiLCJlZDI1NTE5Iiwic2VjcDM4NHIxIiwic2VjcDUyMXIxIiwiY3VydmVUeXBlIiwicDI1NiIsInNlY3AyNTZyMSIsInNlY3AxOTJyMSIsInAzODQiLCJwNTIxIiwiaW5lbmMiLCJtZ2YiLCJ3aXRoUHVibGljIiwicHVibGljS2V5IiwicmV2ZXJzZSIsImlIYXNoIiwiaExlbjIiLCJwcyIsImRibGVuIiwibWFza2VkRGIiLCJtYXNrZWRTZWVkIiwib2FlcCIsImN1ciIsIm5vblplcm8iLCJwa2NzMSIsInpCdWZmZXIiLCJkYiIsImRpZiIsInN0YXR1cyIsIm9sZEJyb3dzZXIiLCJzYWZlQnVmZmVyIiwicmFuZG9tYnl0ZXMiLCJrQnVmZmVyTWF4TGVuZ3RoIiwia01heFVpbnQzMiIsImFzc2VydE9mZnNldCIsImFjdHVhbEZpbGwiLCJvdXJCdWYiLCJ1aW50Iiwic3VwZXJJbml0IiwidHlwZWRBcnJheSIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsInR5cGVkQXJyYXlCeXRlTGVuZ3RoIiwic3dhcEVuZGlhbiIsIlV0ZjE2IiwiVXRmMTZCRSIsInV0ZjE2Q2hhcnMiLCJ1dGYxNlN0ciIsInV0ZjE2U3RyTGVuZ3RoIiwiVXRmMTZMRSIsIkhtYWNTSEEyMjQiLCJIbWFjU0hBMzg0IiwiUkhPX09GRlNFVFMiLCJQSV9JTkRFWEVTIiwiUk9VTkRfQ09OU1RBTlRTIiwibmV3WSIsIkxGU1IiLCJyb3VuZENvbnN0YW50TXN3Iiwicm91bmRDb25zdGFudExzdyIsImJpdFBvc2l0aW9uIiwiU0hBMyIsIm91dHB1dExlbmd0aCIsIl9zdGF0ZSIsIm5CbG9ja1NpemVMYW5lcyIsIk0yaSIsIk0yaTEiLCJsYW5lIiwidE1zdyIsInRMc3ciLCJUeCIsIlR4NCIsIlR4MSIsIlR4MU1zdyIsIlR4MUxzdyIsImxhbmVJbmRleCIsImxhbmVNc3ciLCJsYW5lTHN3IiwicmhvT2Zmc2V0IiwiVFBpTGFuZSIsIlQwIiwic3RhdGUwIiwiVExhbmUiLCJUeDFMYW5lIiwiVHgyTGFuZSIsInJvdW5kQ29uc3RhbnQiLCJibG9ja1NpemVCaXRzIiwib3V0cHV0TGVuZ3RoQnl0ZXMiLCJvdXRwdXRMZW5ndGhMYW5lcyIsImhhc2hXb3JkcyIsIkhtYWNTSEEzIiwiX3psIiwiX3pyIiwiX3NsIiwiX3NyIiwiX2hyIiwiZjEiLCJmMiIsImYzIiwiZjQiLCJmNSIsIkhtYWNSSVBFTUQxNjAiLCJQQktERjIiLCJibG9ja0luZGV4IiwiYmxvY2tJbmRleFdvcmRzIiwiYmxvY2tXb3JkcyIsImJsb2NrV29yZHNMZW5ndGgiLCJpbnRlcm1lZGlhdGUiLCJpbnRlcm1lZGlhdGVXb3JkcyIsImdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdCIsImtleXN0cmVhbSIsImNvdW50ZXIiLCJfY291bnRlciIsIkNUUkdsYWRtYW4iLCJpbmNXb3JkIiwiaW5jQ291bnRlciIsIl9rZXlzdHJlYW0iLCJBbnNpWDkyMyIsImxhc3RCeXRlUG9zIiwiQW5zaXg5MjMiLCJJc28xMDEyNiIsIklzbzk3OTcxIiwiWmVyb1BhZGRpbmciLCJOb1BhZGRpbmciLCJTVUJfTUlYXzAiLCJTVUJfTUlYXzEiLCJTVUJfTUlYXzIiLCJTVUJfTUlYXzMiLCJJTlZfU1VCX01JWF8wIiwiSU5WX1NVQl9NSVhfMSIsIklOVl9TVUJfTUlYXzIiLCJJTlZfU1VCX01JWF8zIiwiX2tleVByaW9yUmVzZXQiLCJpbnZLc1JvdyIsIl9kb0NyeXB0QmxvY2siLCJQQzEiLCJQQzIiLCJCSVRfU0hJRlRTIiwiU0JPWF9QIiwiU0JPWF9NQVNLIiwia2V5Qml0UG9zIiwic3ViS2V5cyIsIl9zdWJLZXlzIiwiblN1YktleSIsInN1YktleSIsImJpdFNoaWZ0IiwiaW52U3ViS2V5cyIsIl9pbnZTdWJLZXlzIiwiX2xCbG9jayIsIl9yQmxvY2siLCJleGNoYW5nZUxSIiwiZXhjaGFuZ2VSTCIsImxCbG9jayIsInJCbG9jayIsIlRyaXBsZURFUyIsImtleTEiLCJrZXkyIiwia2V5MyIsIl9kZXMxIiwiX2RlczIiLCJfZGVzMyIsIlJDNCIsImtleVNpZ0J5dGVzIiwia2V5Qnl0ZUluZGV4Iiwia2V5Qnl0ZSIsIl9pIiwiX2oiLCJnZW5lcmF0ZUtleXN0cmVhbVdvcmQiLCJrZXlzdHJlYW1Xb3JkIiwiUkM0RHJvcCIsImRyb3AiLCJDXyIsIlJhYmJpdCIsIlgiLCJfWCIsIl9DIiwibmV4dFN0YXRlIiwiSVYiLCJJVl8wIiwiSVZfMSIsImkwIiwiaTIiLCJpMSIsImkzIiwiZ3giLCJnYSIsImdiIiwiUmFiYml0TGVnYWN5IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJkaXJ0eU9wdGlvbnMiLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXRzIiwiZm9ybWF0TG9uZyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwiZGF0ZVRpbWUiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsImRpcnR5U3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwicGF0dGVybiIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsIlN0b3JhZ2UiLCJBQ0NFU1NfVE9LRU4iLCJSRUZSRVNIX1RPS0VOIiwiVVNFUiIsIkFDQ0VTU19UT0tFTl9QQVlMT0FEIiwiTEFTVF9DT05ORUNUSU9OIiwiU1RBVEVfS0VZIiwiU0NPUEVTIiwiYXV0aENvZGVVcmwiLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIkFjY2VwdCIsIm9rIiwicmVmcmVzaFRva2VuIiwicmVmcmVzaFRva2VuVXJsIiwiZmxhZyIsImRlYnVnZ2dlciIsIkRlZmF1bHRzIiwiU2NvcGVzIiwiU3RvcmFnZUtleXMiLCJBQ0NFU1NfUkVORVdFRCIsIkFDQ0VTU19SRU5FV0lORyIsIkFDQ0VTU19ERU5JRUQiLCJDcm9zc1N0b3JhZ2VDb21tYW5kcyIsIkF1dGgwQ2xpZW50IiwiWEF1dGhTZXJ2aWNlIiwibG9naW5BcHBVcmwiLCJvbkF1dGhTdWNjZXNzIiwib25BdXRoUHJvZ3Jlc3MiLCJvbkF1dGhFcnJvciIsInhhdXRoUm91dGUiLCJpbmplY3RXaW5kb3ciLCJpc0luaXRpYWxpemVkIiwiaW5pdGlhbGl6ZWRTdG9yYWdlIiwiY29weVRvU3RvcmFnZSIsInN0b3JhZ2VLZXlzIiwieGF1dGgiLCJ4YXV0aFVybCIsIkNyb3NzU3RvcmFnZSIsIkF1dGgwU3RvcmFnZVByb3ZpZGVyIiwiY29weUFsbFRvU3RvcmFnZSIsImVudW1JdGVtIl0sIm1hcHBpbmdzIjoiNERBQ0UsSUFBSUEsRUFBbUIs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LEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUNsRCxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUNuRCxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUNsRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUNuRCxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUdoREMsRUFBSyxDQUNQLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hEQyxFQUFLLENBQ1AsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDckQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FDcEQsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDckQsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDcEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FHbkRDLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUNwRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUNyRCxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUNyRCxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxJQUdsREMsRUFBSyxDQUFDLEVBQVksV0FBWSxXQUFZLFdBQVksWUFDdERDLEVBQUssQ0FBQyxXQUFZLFdBQVksV0FBWSxXQUFZLEdBRTFELFNBQVNsWCxJQUNQb00sRUFBU3hxQyxLQUFLK0UsS0FBTSxJQUdwQkEsS0FBSzJsQyxHQUFLLFdBQ1YzbEMsS0FBSzRsQyxHQUFLLFdBQ1Y1bEMsS0FBSzZsQyxH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QUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDakQsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDcEQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDakQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FFcEQsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFDbkQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFDbkQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDcEQsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFakQsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFDcEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFDbEQsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FDbkQsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFFbEQsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDbkQsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFDbkQsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FDbEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FFbEQsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FDbkQsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDbEQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDcEQsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFakQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFDbkQsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFDbkQsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFH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LEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDbkQsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FDbEQsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFDbkQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksSUFHaER1MEUsRUFBSyxDQUNQLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hEdHpFLEVBQUksQ0FDTixHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNyRCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FB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LG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLGtFQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxzRUFJTmhVLElBQUssQ0FDSGhQLElBQUssRUFDTGdqQixPQUFRLENBQ04sQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxpRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNF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SSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUlwQkMsRUFBYSxDQUFDLEVBQUksRUFBSSxFQUFJLEVBQUksRUFBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBRzFFQyxFQUFTLENBQ1QsQ0FDSTlMLEVBQUssUUFDTCxVQUFZLE1BQ1osVUFBWSxRQUNaLFVBQVksRUFDWixXQUFZLElBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLFFBQ1osV0FBWSxJQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLFFBQ1osV0FBWSxFQUNaLFdBQVksTUFDWixVQUFXLEVBQ1gsVUFBWSxRQUNaLFVBQVksTUFDWixVQUFZLE1BQ1osV0FBWSxRQUNaLFdBQVksSUFDWixXQUFZLFFBQ1osV0FBWSxFQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLFFBQ1osV0FBWSxNQUNaLFdBQVksSUFDWixXQUFZLFFBQ1osRUFBSyxNQUNMLFVBQVksRUFDWixVQUFZLFFBQ1osVUFBWSxRQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxJQUNaLFdBQVksUUFDWixXQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxJQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxFQUNaLFVBQVcsUUFDWCxVQUFZLFFBQ1osVUFBWSxRQUNaLFVBQVksSUFDWixXQUFZLE1BQ1osV0FBWSxRQUNaLFdBQVksRUFDWixXQUFZLE1BQ1osV0FBWSxNQUNaLFdBQVksUUFDWixXQUFZLElBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLEVBQ1osV0FBWSxNQUNaLFdBQVksU0FFaEIsQ0FDSUEsRUFBSyxXQUNMLFNBQVcsTUFDWCxTQUFXLE9BQ1gsU0FBVyxXQUNYLFNBQVcsV0FDWCxTQUFXLFdBQ1gsVUFBVyxXQUNYLFVBQVcsR0FDWCxVQUFXLE9BQ1gsVUFBVyxXQUNYLFVBQVcsV0FDWCxVQUFXLE9BQ1gsVUFBVyxPQUNYLFVBQVcsRUFDWCxVQUFXLE1BQ1gsVUFBVyxXQUNYLFFBQVUsV0FDVixTQUFXLE9BQ1gsU0FBVyxHQUNYLFNBQVcsV0FDWCxTQUFXLFdBQ1gsU0FBVyxXQUNYLFVBQVcsT0FDWCxVQUFXLFdBQ1gsVUFBVyxPQUNYLFVBQVcsRUFDWCxVQUFXLE1BQ1gsVUFBVyxXQUNYLFVBQVcsV0FDWCxVQUFXLE9BQ1gsVUFBVyxXQUNYLFVBQVcsTUFDWCxVQUFZLEVBQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxXQUNaLFVBQVksR0FDWixVQUFZLE9BQ1osVUFBWSxNQUNaLFVBQVksTUFDWixVQUFZLE9BQ1osVUFBWSxPQUNaLFVBQVksV0FDWixVQUFZLE9BQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxPQUNaLFVBQVksT0FDWixVQUFZLFdBQ1osVUFBWSxNQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxHQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLE9BQ1osVUFBWSxFQUNaLFVBQVksTUFDWixVQUFZLFdBQ1osVUFBWSxRQUVoQixDQUNJQSxFQUFLLElBQ0wsUUFBVSxFQUNWLFFBQVUsU0FDVixRQUFVLE1BQ1YsUUFBVSxNQUNWLFFBQVUsU0FDVixRQUFVLFNBQ1YsUUFBVSxTQUNWLFFBQVUsU0FDVixRQUFVLFNBQ1YsU0FBVSxNQUNWLFNBQVUsU0FDVixTQUFVLFNBQ1YsU0FBVSxNQUNWLFNBQVUsRUFDVixTQUFVLElBQ1YsT0FBUyxTQUNULFFBQVUsU0FDVixRQUFVLEVBQ1YsUUFBVSxTQUNWLFFBQVUsU0FDVixRQUFVLE1BQ1YsUUFBVSxNQUNWLFFBQVUsSUFDVixRQUFVLEVBQ1YsUUFBVSxJQUNWLFNBQVUsU0FDVixTQUFVLE1BQ1YsU0FBVSxNQUNWLFNBQVUsU0FDVixTQUFVLFNBQ1YsU0FBVSxTQUNWLFNBQVcsU0FDWCxTQUFXLE1BQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLElBQ1gsU0FBVyxTQUNYLFNBQVcsU0FDWCxTQUFXLEVBQ1gsU0FBVyxTQUNYLFNBQVcsU0FDWCxTQUFXLEVBQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLElBQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLFNBQ1gsU0FBVyxJQUNYLFNBQVcsU0FDWCxTQUFXLEVBQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLElBQ1gsU0FBVyxTQUNYLFNBQVcsTUFDWCxTQUFXLFNBQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLFNBQ1gsU0FBVyxTQUNYLFNBQVcsRUFDWCxTQUFXLE9BRWYsQ0FDSUEsRUFBSyxXQUNMLE1BQVMsV0FDVCxPQUFTLFFBQ1QsT0FBUyxXQUNULE9BQVMsRUFDVCxPQUFTLFFBQ1QsT0FBUyxXQUNULE9BQVMsUUFDVCxPQUFTLFdBQ1QsT0FBUyxRQUNULE9BQVMsR0FDVCxPQUFTLFdBQ1QsT0FBUyxXQUNULE9BQVMsS0FDVCxPQUFTLEtBQ1QsT0FBUyxXQUNULE1BQVEsV0FDUixNQUFTLEdBQ1QsT0FBUyxXQUNULE9BQVMsV0FDVCxPQUFTLFFBQ1QsT0FBUyxXQUNULE9BQVMsRUFDVCxPQUFTLFdBQ1QsT0FBUyxLQUNULE9BQVMsV0FDVCxPQUFTLFFBQ1QsT0FBUyxLQUNULE9BQVMsV0FDVCxPQUFTLFFBQ1QsT0FBUyxRQUNULFFBQVMsV0FDVCxRQUFVLFFBQ1YsUUFBVSxRQUNWLFFBQVUsV0FDVixRQUFVLEVBQ1YsUUFBVSxLQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxXQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxXQUNWLFFBQVUsUUFDVixRQUFVLFdBQ1YsUUFBVSxRQUNWLFFBQVUsR0FDVixRQUFVLEtBQ1YsUUFBVSxXQUNWLFFBQVUsV0FDVixRQUFVLEVBQ1YsUUFBVSxRQUNWLFFBQVUsUUFDVixRQUFVLFdBQ1YsUUFBVSxXQUNWLFFBQVUsR0FDVixRQUFVLFdBQ1YsUUFBVSxLQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxLQUNWLFFBQVUsV0FDVixRQUFVLFFBQ1YsUUFBVSxTQUVkLENBQ0lBLEVBQUssSUFDTCxLQUFRLFNBQ1IsS0FBUSxPQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxTQUNSLE1BQVEsVUFDUixNQUFRLE9BQ1IsTUFBUSxTQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxVQUNSLE1BQVEsVUFDUixNQUFRLEVBQ1IsTUFBUSxTQUNSLE1BQVEsVUFDUixLQUFPLFNBQ1AsS0FBUSxVQUNSLE1BQVEsSUFDUixNQUFRLFNBQ1IsTUFBUSxPQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxVQUNSLE1BQVEsVUFDUixNQUFRLEVBQ1IsTUFBUSxVQUNSLE1BQVEsU0FDUixNQUFRLFVBQ1IsTUFBUSxVQUNSLE1BQVEsU0FDUixNQUFRLE9BQ1IsTUFBUyxPQUNULE1BQVMsSUFDVCxNQUFTLFVBQ1QsTUFBUyxVQUNULE1BQVMsU0FDVCxNQUFTLFVBQ1QsTUFBUyxVQUNULE1BQVMsU0FDVCxNQUFTLFVBQ1QsT0FBUyxVQUNULE9BQVMsU0FDVCxPQUFTLFVBQ1QsT0FBUyxPQUNULE9BQVMsVUFDVCxPQUFTLEVBQ1QsT0FBUyxTQUNULE1BQVMsVUFDVCxNQUFTLFNBQ1QsTUFBUyxTQUNULE1BQVMsVUFDVCxNQUFTLFVBQ1QsTUFBUyxTQUNULE1BQVMsSUFDVCxNQUFTLFVBQ1QsT0FBUyxPQUNULE9BQVMsVUFDVCxPQUFTLEVBQ1QsT0FBUyxVQUNULE9BQVMsU0FDVCxPQUFTLE9BQ1QsT0FBUyxVQUNULE9BQVMsV0FFYixDQUNJQSxFQUFLLFVBQ0wsSUFBTyxLQUNQLElBQU8sVUFDUCxJQUFPLFVBQ1AsS0FBTyxVQUNQLEtBQU8sUUFDUCxLQUFPLFFBQ1AsS0FBTyxVQUNQLEtBQU8sRUFDUCxLQUFPLFVBQ1AsS0FBTyxRQUNQLEtBQU8sRUFDUCxLQUFPLFVBQ1AsS0FBTyxRQUNQLEtBQU8sS0FDUCxLQUFPLFVBQ1AsSUFBTSxVQUNOLElBQU8sVUFDUCxJQUFPLEVBQ1AsSUFBTyxRQUNQLEtBQU8sUUFDUCxLQUFPLFVBQ1AsS0FBTyxVQUNQLEtBQU8sS0FDUCxLQUFPLFFBQ1AsS0FBTyxLQUNQLEtBQU8sVUFDUCxLQUFPLFVBQ1AsS0FBTyxFQUNQLEtBQU8sVUFDUCxLQUFPLFFBQ1AsS0FBTyxVQUNQLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxVQUNSLEtBQVEsVUFDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsRUFDUixLQUFRLEVBQ1IsS0FBUSxVQUNSLEtBQVEsS0FDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsUUFDUixLQUFRLEVBQ1IsS0FBUSxRQUNSLEtBQVEsUUFDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsS0FDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxFQUNSLEtBQVEsVUFDUixLQUFRLFdBRVosQ0FDSUEsRUFBSyxRQUNMLEdBQU0sU0FDTixHQUFNLEtBQ04sR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLEVBQ04sR0FBTSxFQUNOLElBQU0sU0FDTixJQUFNLFNBQ04sSUFBTSxRQUNOLElBQU0sU0FDTixJQUFNLFNBQ04sSUFBTSxTQUNOLElBQU0sS0FDTixJQUFNLFFBQ04sSUFBTSxTQUNOLEVBQUssU0FDTCxHQUFNLEVBQ04sR0FBTSxTQUNOLEdBQU0sU0FDTixHQUFNLFFBQ04sR0FBTSxTQUNOLElBQU0sU0FDTixJQUFNLEtBQ04sSUFBTSxRQUNOLElBQU0sU0FDTixJQUFNLFNBQ04sSUFBTSxRQUNOLElBQU0sS0FDTixJQUFNLFNBQ04sSUFBTSxFQUNOLElBQU0sUUFDTixJQUFPLFNBQ1AsSUFBTyxRQUNQLElBQU8sU0FDUCxJQUFPLFNBQ1AsSUFBTyxRQUNQLElBQU8sU0FDUCxJQUFPLFNBQ1AsSUFBTyxRQUNQLElBQU8sS0FDUCxJQUFPLFNBQ1AsSUFBTyxRQUNQLElBQU8sRUFDUCxJQUFPLEVBQ1AsSUFB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Q3JDLFFBQ0UsY0FNSDNELE9BMUJVLEdBNkJiMndGLG1CQUFtQixzQkFDdkIsR0FBSTN3RixLQUFLcXdGLGNBQ1AsSUFBSyxNQUFNTyxLQUFZNXdGLEtBQUtzd0YsWUFBYSxDQUN2QyxNQUFNajBGLEVBQU0yRCxLQUFLc3dGLFlBQVlNLEdBRTdCNXdGLEtBQUtxd0YsY0FBY2gwRixTQUFhMkQsS0FBSyszQyxRQUFRMTdDLE1BTDFCLElBcUJwQixZQUFQLFNBQU8sVUFBK0JrNEIsR0FHcEMsT0FGZ0IsSUFBSXE3RCxFQUFhcjdELEdBRWxCeWxDLGdCQUhqQixvREFBTyIsImZpbGUiOiJAYXV0aDAta2l0cy92dWUtY3Jvc3Mtc3RvcmFnZS1jbGllbnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIwMSk7XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdHJvb3QuQ3J5cHRvSlMgPSBmYWN0b3J5KCk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdC8qZ2xvYmFscyB3aW5kb3csIGdsb2JhbCwgcmVxdWlyZSovXG5cblx0LyoqXG5cdCAqIENyeXB0b0pTIGNvcmUgY29tcG9uZW50cy5cblx0ICovXG5cdHZhciBDcnlwdG9KUyA9IENyeXB0b0pTIHx8IChmdW5jdGlvbiAoTWF0aCwgdW5kZWZpbmVkKSB7XG5cblx0ICAgIHZhciBjcnlwdG87XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHdpbmRvdy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSAoZXhwZXJpbWVudGFsIElFIDExKSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubXNDcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cubXNDcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSBnbG9iYWwgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICB9XG5cblx0ICAgIC8qXG5cdCAgICAgKiBDcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3Jcblx0ICAgICAqXG5cdCAgICAgKiBBcyBNYXRoLnJhbmRvbSgpIGlzIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBzYWZlIHRvIHVzZVxuXHQgICAgICovXG5cdCAgICB2YXIgY3J5cHRvU2VjdXJlUmFuZG9tSW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChjcnlwdG8pIHtcblx0ICAgICAgICAgICAgLy8gVXNlIGdldFJhbmRvbVZhbHVlcyBtZXRob2QgKEJyb3dzZXIpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gVXNlIHJhbmRvbUJ5dGVzIG1ldGhvZCAoTm9kZUpTKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZSBjcnlwdG8gbW9kdWxlIGNvdWxkIG5vdCBiZSB1c2VkIHRvIGdldCBzZWN1cmUgcmFuZG9tIG51bWJlci4nKTtcblx0ICAgIH07XG5cblx0ICAgIC8qXG5cdCAgICAgKiBMb2NhbCBwb2x5ZmlsbCBvZiBPYmplY3QuY3JlYXRlXG5cblx0ICAgICAqL1xuXHQgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBGKCkge31cblxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgIHZhciBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xuXG5cdCAgICAgICAgICAgIHN1YnR5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICB9O1xuXHQgICAgfSgpKVxuXG5cdCAgICAvKipcblx0ICAgICAqIENyeXB0b0pTIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBMaWJyYXJ5IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfbGliID0gQy5saWIgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHtcblxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyBQcm9wZXJ0aWVzIHRvIGNvcHkgaW50byB0aGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScsXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNwYXduXG5cdCAgICAgICAgICAgICAgICB2YXIgc3VidHlwZSA9IGNyZWF0ZSh0aGlzKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQXVnbWVudFxuXHQgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUubWl4SW4ob3ZlcnJpZGVzKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRlZmF1bHQgaW5pdGlhbGl6ZXJcblx0ICAgICAgICAgICAgICAgIGlmICghc3VidHlwZS5oYXNPd25Qcm9wZXJ0eSgnaW5pdCcpIHx8IHRoaXMuaW5pdCA9PT0gc3VidHlwZS5pbml0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZXIncyBwcm90b3R5cGUgaXMgdGhlIHN1YnR5cGUgb2JqZWN0XG5cdCAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQucHJvdG90eXBlID0gc3VidHlwZTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlIHN1cGVydHlwZVxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogRXh0ZW5kcyB0aGlzIG9iamVjdCBhbmQgcnVucyB0aGUgaW5pdCBtZXRob2QuXG5cdCAgICAgICAgICAgICAqIEFyZ3VtZW50cyB0byBjcmVhdGUoKSB3aWxsIGJlIHBhc3NlZCB0byBpbml0KCkuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBpbnN0YW5jZSA9IE15VHlwZS5jcmVhdGUoKTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5leHRlbmQoKTtcblx0ICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG9iamVjdC5cblx0ICAgICAgICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gYWRkIHNvbWUgbG9naWMgd2hlbiB5b3VyIG9iamVjdHMgYXJlIGNyZWF0ZWQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgICAgIC8vIC4uLlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBpbnRvIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgcHJvcGVydGllcyB0byBtaXggaW4uXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBNeVR5cGUubWl4SW4oe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnXG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIG1peEluOiBmdW5jdGlvbiAocHJvcGVydGllcykge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElFIHdvbid0IGNvcHkgdG9TdHJpbmcgdXNpbmcgdGhlIGxvb3AgYWJvdmVcblx0ICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZyA9IHByb3BlcnRpZXMudG9TdHJpbmc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGluc3RhbmNlLmNsb25lKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10pO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddLCA2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgd29yZCBhcnJheSB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlciAoT3B0aW9uYWwpIFRoZSBlbmNvZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IENyeXB0b0pTLmVuYy5IZXhcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGVuY29kZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIChlbmNvZGVyIHx8IEhleCkuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheTEuY29uY2F0KHdvcmRBcnJheTIpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbmNhdDogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHRoaXNXb3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGF0V29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGlzU2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHRoaXMuY2xhbXAoKTtcblxuXHQgICAgICAgICAgICAvLyBDb25jYXRcblx0ICAgICAgICAgICAgaWYgKHRoaXNTaWdCeXRlcyAlIDQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIGJ5dGUgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXRCeXRlID0gKHRoYXRXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gfD0gdGhhdEJ5dGUgPDwgKDI0IC0gKCh0aGlzU2lnQnl0ZXMgKyBpKSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSB3b3JkIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdID0gdGhhdFdvcmRzW2kgPj4+IDJdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgKz0gdGhhdFNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVtb3ZlcyBpbnNpZ25pZmljYW50IGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsYW1wOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wXG5cdCAgICAgICAgICAgIHdvcmRzW3NpZ0J5dGVzID4+PiAyXSAmPSAweGZmZmZmZmZmIDw8ICgzMiAtIChzaWdCeXRlcyAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIHdvcmRzLmxlbmd0aCA9IE1hdGguY2VpbChzaWdCeXRlcyAvIDQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gd29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgd29yZCBhcnJheSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbkJ5dGVzIFRoZSBudW1iZXIgb2YgcmFuZG9tIGJ5dGVzIHRvIGdlbmVyYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcmFuZG9tIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgxNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmFuZG9tOiBmdW5jdGlvbiAobkJ5dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJ5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goY3J5cHRvU2VjdXJlUmFuZG9tSW50KCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbkJ5dGVzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBFbmNvZGVyIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGhleENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhleENoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGhleCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0ciBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChoZXhTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXhTdHJMZW5ndGg7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gM10gfD0gcGFyc2VJbnQoaGV4U3RyLnN1YnN0cihpLCAyKSwgMTYpIDw8ICgyNCAtIChpICUgOCkgKiA0KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGhleFN0ckxlbmd0aCAvIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGF0aW4xIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBsYXRpbjFDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGxhdGluMUNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiaXRlKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbGF0aW4xQ2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF0aW4xU3RyIFRoZSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5MYXRpbjEucGFyc2UobGF0aW4xU3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xU3RyTGVuZ3RoID0gbGF0aW4xU3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGluMVN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSAobGF0aW4xU3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBsYXRpbjFTdHJMZW5ndGgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmOCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmOFN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGY4LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpKSk7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFVURi04IGRhdGEnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi04IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmOFN0ciBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHV0ZjhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmOFN0cikge1xuXHQgICAgICAgICAgICByZXR1cm4gTGF0aW4xLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh1dGY4U3RyKSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYnVmZmVyZWQgYmxvY2sgYWxnb3JpdGhtIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIFRoZSBwcm9wZXJ0eSBibG9ja1NpemUgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9taW5CdWZmZXJTaXplIFRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgc2hvdWxkIGJlIGtlcHQgdW5wcm9jZXNzZWQgaW4gdGhlIGJ1ZmZlci4gRGVmYXVsdDogMFxuXHQgICAgICovXG5cdCAgICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgZGF0YSBidWZmZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFdvcmRBcnJheS5pbml0KCk7XG5cdCAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgPSAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIG5ldyBkYXRhIHRvIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgYnVmZmVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2FwcGVuZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGRhdGEgPSBVdGY4LnBhcnNlKGRhdGEpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEuY29uY2F0KGRhdGEpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzICs9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFByb2Nlc3NlcyBhdmFpbGFibGUgZGF0YSBibG9ja3MuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIF9kb1Byb2Nlc3NCbG9jayhvZmZzZXQpLCB3aGljaCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGEgY29uY3JldGUgc3VidHlwZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9GbHVzaCBXaGV0aGVyIGFsbCBibG9ja3MgYW5kIHBhcnRpYWwgYmxvY2tzIHNob3VsZCBiZSBwcm9jZXNzZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwcm9jZXNzZWQgZGF0YS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCk7XG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9wcm9jZXNzOiBmdW5jdGlvbiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkV29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gdGhpcy5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYmxvY2tzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tzUmVhZHkgPSBkYXRhU2lnQnl0ZXMgLyBibG9ja1NpemVCeXRlcztcblx0ICAgICAgICAgICAgaWYgKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwIHRvIGluY2x1ZGUgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgZG93biB0byBpbmNsdWRlIG9ubHkgZnVsbCBibG9ja3MsXG5cdCAgICAgICAgICAgICAgICAvLyBsZXNzIHRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgbXVzdCByZW1haW4gaW4gdGhlIGJ1ZmZlclxuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5tYXgoKG5CbG9ja3NSZWFkeSB8IDApIC0gdGhpcy5fbWluQnVmZmVyU2l6ZSwgMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudCB3b3JkcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbldvcmRzUmVhZHkgPSBuQmxvY2tzUmVhZHkgKiBibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYnl0ZXMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CeXRlc1JlYWR5ID0gTWF0aC5taW4obldvcmRzUmVhZHkgKiA0LCBkYXRhU2lnQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgYmxvY2tzXG5cdCAgICAgICAgICAgIGlmIChuV29yZHNSZWFkeSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWFsZ29yaXRobSBsb2dpY1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvUHJvY2Vzc0Jsb2NrKGRhdGFXb3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICAgICAgcHJvY2Vzc2VkV29yZHMgPSBkYXRhV29yZHMuc3BsaWNlKDAsIG5Xb3Jkc1JlYWR5KTtcblx0ICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQocHJvY2Vzc2VkV29yZHMsIG5CeXRlc1JlYWR5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2RhdGEgPSB0aGlzLl9kYXRhLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfbWluQnVmZmVyU2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBoYXNoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDE2ICg1MTIgYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaGVyID0gQ3J5cHRvSlMuYWxnby5TSEEyNTYuY3JlYXRlKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBoYXNoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXG5cdCAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xuXHQgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVwZGF0ZXMgdGhpcyBoYXNoZXIgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SGFzaGVyfSBUaGlzIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBoYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaFxuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24uXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBGaW5hbCBtZXNzYWdlIHVwZGF0ZVxuXHQgICAgICAgICAgICBpZiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNTEyLzMyLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIGEgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIFNIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGNmZykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZSBpbiB0aGlzIEhNQUMgaGVscGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIEhtYWNTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSG1hY0hlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDX2FsZ28uSE1BQy5pbml0KGhhc2hlciwga2V5KS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbGdvcml0aG0gbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge307XG5cblx0ICAgIHJldHVybiBDO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUztcblxufSkpOyIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtudW1iZXIgJiAweDNmZmZmZmZdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFswXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIHZhciB6ID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICB2YXIgYjtcblxuICAgICAgLy8gJ2EnIC0gJ2YnXG4gICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7XG4gICAgICAgIGIgPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgYiA9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiID0gYztcbiAgICAgIH1cblxuICAgICAgciB8PSBiO1xuICAgICAgeiB8PSBiO1xuICAgIH1cblxuICAgIGFzc2VydCghKHogJiAweGYwKSwgJ0ludmFsaWQgY2hhcmFjdGVyIGluICcgKyBzdHIpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBiID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICBiID0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICBiID0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIgPSBjO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGMgPj0gMCAmJiBiIDwgbXVsLCAnSW52YWxpZCBjaGFyYWN0ZXInKTtcbiAgICAgIHIgKz0gYjtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWzBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBtb3ZlIChkZXN0LCBzcmMpIHtcbiAgICBkZXN0LndvcmRzID0gc3JjLndvcmRzO1xuICAgIGRlc3QubGVuZ3RoID0gc3JjLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gc3JjLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gc3JjLnJlZDtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fbW92ZSA9IGZ1bmN0aW9uIF9tb3ZlIChkZXN0KSB7XG4gICAgbW92ZShkZXN0LCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLl9zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBDaGVjayBTeW1ib2wuZm9yIGJlY2F1c2Ugbm90IGV2ZXJ5d2hlcmUgd2hlcmUgU3ltYm9sIGRlZmluZWRcbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N5bWJvbCNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgQk4ucHJvdG90eXBlW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gaW5zcGVjdDtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGluc3BlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfVxuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZHJuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2LCAyKTtcbiAgfTtcblxuICBpZiAoQnVmZmVyKSB7XG4gICAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gYWxsb2NhdGUgKEFycmF5VHlwZSwgc2l6ZSkge1xuICAgIGlmIChBcnJheVR5cGUuYWxsb2NVbnNhZmUpIHtcbiAgICAgIHJldHVybiBBcnJheVR5cGUuYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlUeXBlKHNpemUpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdGhpcy5fc3RyaXAoKTtcblxuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHZhciByZXMgPSBhbGxvY2F0ZShBcnJheVR5cGUsIHJlcUxlbmd0aCk7XG4gICAgdmFyIHBvc3RmaXggPSBlbmRpYW4gPT09ICdsZScgPyAnTEUnIDogJ0JFJztcbiAgICB0aGlzWydfdG9BcnJheUxpa2UnICsgcG9zdGZpeF0ocmVzLCBieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fdG9BcnJheUxpa2VMRSA9IGZ1bmN0aW9uIF90b0FycmF5TGlrZUxFIChyZXMsIGJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdvcmQgPSAodGhpcy53b3Jkc1tpXSA8PCBzaGlmdCkgfCBjYXJyeTtcblxuICAgICAgcmVzW3Bvc2l0aW9uKytdID0gd29yZCAmIDB4ZmY7XG4gICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gMTYpICYgMHhmZjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoaWZ0ID09PSA2KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDtcbiAgICAgICAgc2hpZnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICByZXNbcG9zaXRpb24rK10gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlQkUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VCRSAocmVzLCBieXRlTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBzaGlmdCA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd29yZCA9ICh0aGlzLndvcmRzW2ldIDw8IHNoaWZ0KSB8IGNhcnJ5O1xuXG4gICAgICByZXNbcG9zaXRpb24tLV0gPSB3b3JkICYgMHhmZjtcbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDE2KSAmIDB4ZmY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGlmdCA9PT0gNikge1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgICBzaGlmdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHdvcmQgPj4+IDI0O1xuICAgICAgICBzaGlmdCArPSAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICByZXNbcG9zaXRpb24tLV0gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdID4+PiB3Yml0KSAmIDB4MDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgLy8gVGVtcG9yYXJ5IGRpc2FibGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy9pc3N1ZXMvMjExXG4gICAgLy8gdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIC8vIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICAgIHJldHVybiBiaWdNdWxUbyhzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICB2YXIgaXNOZWdOdW0gPSBudW0gPCAwO1xuICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTtcblxuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8PSBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLl9zdHJpcCgpO1xuICAgIH1cbiAgICBhLl9zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RybihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCAocjIgPT09IDEgJiYgY21wID09PSAwKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kcm4gPSBmdW5jdGlvbiBtb2RybiAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZWdOdW0gPyAtYWNjIDogYWNjO1xuICB9O1xuXG4gIC8vIFdBUk5JTkc6IERFUFJFQ0FURURcbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5tb2RybihudW0pO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuX3N0cmlwKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICBtb3ZlKGEsIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9ldnBrZGZcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDaXBoZXIgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0Q3J5cHRvSlMubGliLkNpcGhlciB8fCAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoaXMgY2lwaGVyJ3Mga2V5IHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl2U2l6ZSBUaGlzIGNpcGhlcidzIElWIHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0RFQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGRlY3J5cHRpb24gbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVFbmNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVEZWNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTdG9yZSB0cmFuc2Zvcm0gbW9kZSBhbmQga2V5XG5cdCAgICAgICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTtcblx0ICAgICAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGNpcGhlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBkYXRhIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3MoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGF2YWlsYWJsZSBibG9ja3Ncblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gcHJvY2Vzcy5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBmaW5hbCBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgZmluYWwgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkRGF0YTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsXG5cblx0ICAgICAgICBfREVDX1hGT1JNX01PREU6IDIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHNob3J0Y3V0IGZ1bmN0aW9ucyB0byBhIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggZW5jcnlwdCBhbmQgZGVjcnlwdCBzaG9ydGN1dCBmdW5jdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBBRVMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5BRVMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGFzc3dvcmRCYXNlZENpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNlcmlhbGl6YWJsZUNpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2lwaGVyKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5lbmNyeXB0KGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0oKSlcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2Ugc3RyZWFtIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxICgzMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDFcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGUgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19tb2RlID0gQy5tb2RlID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBkZWNyeXB0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRGVjcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGVjcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlciA9IGNpcGhlcjtcblx0ICAgICAgICAgICAgdGhpcy5faXYgPSBpdjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENCQyA9IENfbW9kZS5DQkMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBlbmNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkVuY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFhPUiBhbmQgZW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBkZWNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRGVjcnlwdCBhbmQgWE9SXG5cdCAgICAgICAgICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIGJlY29tZXMgdGhlIHByZXZpb3VzIGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIGZ1bmN0aW9uIHhvckJsb2NrKHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICB2YXIgYmxvY2s7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cblx0ICAgICAgICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9ja1xuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrID0gaXY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9wcmV2QmxvY2s7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBYT1IgYmxvY2tzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGJsb2NrW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIENCQztcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogUGFkZGluZyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX3BhZCA9IEMucGFkID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogUEtDUyAjNS83IHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBQa2NzNyA9IENfcGFkLlBrY3M3ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFBhZHMgZGF0YSB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gcGFkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG11bHRpcGxlIHRoYXQgdGhlIGRhdGEgc2hvdWxkIGJlIHBhZGRlZCB0by5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnBhZCh3b3JkQXJyYXksIDQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZyB3b3JkXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nV29yZCA9IChuUGFkZGluZ0J5dGVzIDw8IDI0KSB8IChuUGFkZGluZ0J5dGVzIDw8IDE2KSB8IChuUGFkZGluZ0J5dGVzIDw8IDgpIHwgblBhZGRpbmdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ1dvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgblBhZGRpbmdCeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nV29yZHMucHVzaChwYWRkaW5nV29yZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBXb3JkQXJyYXkuY3JlYXRlKHBhZGRpbmdXb3JkcywgblBhZGRpbmdCeXRlcyk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YS5jb25jYXQocGFkZGluZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVucGFkcyBkYXRhIHRoYXQgaGFkIGJlZW4gcGFkZGVkIHVzaW5nIHRoZSBhbGdvcml0aG0gZGVmaW5lZCBpbiBQS0NTICM1LzcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byB1bnBhZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnVucGFkKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbW92ZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlciA9IENpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB0byB1c2UuIERlZmF1bHQ6IENCQ1xuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IFBrY3M3XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBDaXBoZXIuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIG1vZGU6IENCQyxcblx0ICAgICAgICAgICAgcGFkZGluZzogUGtjczdcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBtb2RlQ3JlYXRvcjtcblxuXHQgICAgICAgICAgICAvLyBSZXNldCBjaXBoZXJcblx0ICAgICAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gY2ZnLml2O1xuXHQgICAgICAgICAgICB2YXIgbW9kZSA9IGNmZy5tb2RlO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGJsb2NrIG1vZGVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZUVuY3J5cHRvcjtcblx0ICAgICAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHtcblx0ICAgICAgICAgICAgICAgIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVEZWNyeXB0b3I7XG5cdCAgICAgICAgICAgICAgICAvLyBLZWVwIGF0IGxlYXN0IG9uZSBibG9jayBpbiB0aGUgYnVmZmVyIGZvciB1bnBhZGRpbmdcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21pbkJ1ZmZlclNpemUgPSAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHRoaXMuX21vZGUgJiYgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPT0gbW9kZUNyZWF0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuaW5pdCh0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLl9fY3JlYXRvciA9IG1vZGVDcmVhdG9yO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHRoaXMuY2ZnLnBhZGRpbmc7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWxpemVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgLy8gUGFkIGRhdGFcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmcucGFkKHRoaXMuX2RhdGEsIHRoaXMuYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVbnBhZCBkYXRhXG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nLnVucGFkKGZpbmFsUHJvY2Vzc2VkQmxvY2tzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2Nrcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMjgvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY29sbGVjdGlvbiBvZiBjaXBoZXIgcGFyYW1ldGVycy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gY2lwaGVydGV4dCBUaGUgcmF3IGNpcGhlcnRleHQuXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkgdG8gdGhpcyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGl2IFRoZSBJViB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IHNhbHQgVGhlIHNhbHQgdXNlZCB3aXRoIGEga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge0NpcGhlcn0gYWxnb3JpdGhtIFRoZSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICogQHByb3BlcnR5IHtNb2RlfSBtb2RlIFRoZSBibG9jayBtb2RlIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc2NoZW1lIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBibG9jayBzaXplIG9mIHRoZSBjaXBoZXIuXG5cdCAgICAgKiBAcHJvcGVydHkge0Zvcm1hdH0gZm9ybWF0dGVyIFRoZSBkZWZhdWx0IGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gY29udmVydCB0aGlzIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgc3RyaW5nLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaXBoZXJQYXJhbXMgQW4gb2JqZWN0IHdpdGggYW55IG9mIHRoZSBwb3NzaWJsZSBjaXBoZXIgcGFyYW1ldGVycy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmxpYi5DaXBoZXJQYXJhbXMuY3JlYXRlKHtcblx0ICAgICAgICAgKiAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHRXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBrZXk6IGtleVdvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIGl2OiBpdldvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIHNhbHQ6IHNhbHRXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBhbGdvcml0aG06IENyeXB0b0pTLmFsZ28uQUVTLFxuXHQgICAgICAgICAqICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG5cdCAgICAgICAgICogICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUEtDUzcsXG5cdCAgICAgICAgICogICAgICAgICBibG9ja1NpemU6IDQsXG5cdCAgICAgICAgICogICAgICAgICBmb3JtYXR0ZXI6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMXG5cdCAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgdGhpcy5taXhJbihjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtGb3JtYXR9IGZvcm1hdHRlciAoT3B0aW9uYWwpIFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIGNpcGhlciBwYXJhbXMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAdGhyb3dzIEVycm9yIElmIG5laXRoZXIgdGhlIGZvcm1hdHRlciBub3IgdGhlIGRlZmF1bHQgZm9ybWF0dGVyIGlzIHNldC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcyArICcnO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMudG9TdHJpbmcoQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZm9ybWF0dGVyIHx8IHRoaXMuZm9ybWF0dGVyKS5zdHJpbmdpZnkodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRm9ybWF0IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBPcGVuU1NMIGZvcm1hdHRpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBPcGVuU1NMRm9ybWF0dGVyID0gQ19mb3JtYXQuT3BlblNTTCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc30gY2lwaGVyUGFyYW1zIFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBvcGVuU1NMU3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wuc3RyaW5naWZ5KGNpcGhlclBhcmFtcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHZhciB3b3JkQXJyYXk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIHZhciBzYWx0ID0gY2lwaGVyUGFyYW1zLnNhbHQ7XG5cblx0ICAgICAgICAgICAgLy8gRm9ybWF0XG5cdCAgICAgICAgICAgIGlmIChzYWx0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRBcnJheSA9IGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gd29yZEFycmF5LnRvU3RyaW5nKEJhc2U2NCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcGVuU1NMU3RyIFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5wYXJzZShvcGVuU1NMU3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKG9wZW5TU0xTdHIpIHtcblx0ICAgICAgICAgICAgdmFyIHNhbHQ7XG5cblx0ICAgICAgICAgICAgLy8gUGFyc2UgYmFzZTY0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gQmFzZTY0LnBhcnNlKG9wZW5TU0xTdHIpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0V29yZHMgPSBjaXBoZXJ0ZXh0LndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFRlc3QgZm9yIHNhbHRcblx0ICAgICAgICAgICAgaWYgKGNpcGhlcnRleHRXb3Jkc1swXSA9PSAweDUzNjE2Yzc0ICYmIGNpcGhlcnRleHRXb3Jkc1sxXSA9PSAweDY1NjQ1ZjVmKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHNhbHRcblx0ICAgICAgICAgICAgICAgIHNhbHQgPSBXb3JkQXJyYXkuY3JlYXRlKGNpcGhlcnRleHRXb3Jkcy5zbGljZSgyLCA0KSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzYWx0IGZyb20gY2lwaGVydGV4dFxuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dFdvcmRzLnNwbGljZSgwLCA0KTtcblx0ICAgICAgICAgICAgICAgIGNpcGhlcnRleHQuc2lnQnl0ZXMgLT0gMTY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQsIHNhbHQ6IHNhbHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNpcGhlciB3cmFwcGVyIHRoYXQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICovXG5cdCAgICB2YXIgU2VyaWFsaXphYmxlQ2lwaGVyID0gQ19saWIuU2VyaWFsaXphYmxlQ2lwaGVyID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gY29udmVydCBjaXBoZXIgcGFyYW0gb2JqZWN0cyB0byBhbmQgZnJvbSBhIHN0cmluZy4gRGVmYXVsdDogT3BlblNTTFxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBmb3JtYXQ6IE9wZW5TU0xGb3JtYXR0ZXJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEVuY3J5cHRzIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYgfSk7XG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIHZhciBlbmNyeXB0b3IgPSBjaXBoZXIuY3JlYXRlRW5jcnlwdG9yKGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBlbmNyeXB0b3IuZmluYWxpemUobWVzc2FnZSk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlckNmZyA9IGVuY3J5cHRvci5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoe1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCxcblx0ICAgICAgICAgICAgICAgIGtleToga2V5LFxuXHQgICAgICAgICAgICAgICAgaXY6IGNpcGhlckNmZy5pdixcblx0ICAgICAgICAgICAgICAgIGFsZ29yaXRobTogY2lwaGVyLFxuXHQgICAgICAgICAgICAgICAgbW9kZTogY2lwaGVyQ2ZnLm1vZGUsXG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nOiBjaXBoZXJDZmcucGFkZGluZyxcblx0ICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogY2lwaGVyLmJsb2NrU2l6ZSxcblx0ICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogY2ZnLmZvcm1hdFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwbGFpbnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY2lwaGVyLmNyZWF0ZURlY3J5cHRvcihrZXksIGNmZykuZmluYWxpemUoY2lwaGVydGV4dC5jaXBoZXJ0ZXh0KTtcblxuXHQgICAgICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdG8gQ2lwaGVyUGFyYW1zLFxuXHQgICAgICAgICAqIGVsc2UgYXNzdW1lZCBDaXBoZXJQYXJhbXMgYWxyZWFkeSBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IHVuY2hhbmdlZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKiBAcGFyYW0ge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZSB0byBwYXJzZSBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSB1bnNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLl9wYXJzZShjaXBoZXJ0ZXh0U3RyaW5nT3JQYXJhbXMsIGZvcm1hdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX3BhcnNlOiBmdW5jdGlvbiAoY2lwaGVydGV4dCwgZm9ybWF0KSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY2lwaGVydGV4dCA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5wYXJzZShjaXBoZXJ0ZXh0LCB0aGlzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogS2V5IGRlcml2YXRpb24gZnVuY3Rpb24gbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19rZGYgPSBDLmtkZiA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIE9wZW5TU0wga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgKi9cblx0ICAgIHZhciBPcGVuU1NMS2RmID0gQ19rZGYuT3BlblNTTCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIHRvIGRlcml2ZSBmcm9tLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBrZXlTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBrZXkgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGl2U2l6ZSBUaGUgc2l6ZSBpbiB3b3JkcyBvZiB0aGUgSVYgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IChPcHRpb25hbCkgQSA2NC1iaXQgc2FsdCB0byB1c2UuIElmIG9taXR0ZWQsIGEgc2FsdCB3aWxsIGJlIGdlbmVyYXRlZCByYW5kb21seS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdCB3aXRoIHRoZSBrZXksIElWLCBhbmQgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyLCAnc2FsdHNhbHQnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIGtleVNpemUsIGl2U2l6ZSwgc2FsdCkge1xuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSByYW5kb20gc2FsdFxuXHQgICAgICAgICAgICBpZiAoIXNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHNhbHQgPSBXb3JkQXJyYXkucmFuZG9tKDY0LzgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgSVZcblx0ICAgICAgICAgICAgdmFyIGtleSA9IEV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiBrZXlTaXplICsgaXZTaXplIH0pLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXG5cdCAgICAgICAgICAgIC8vIFNlcGFyYXRlIGtleSBhbmQgSVZcblx0ICAgICAgICAgICAgdmFyIGl2ID0gV29yZEFycmF5LmNyZWF0ZShrZXkud29yZHMuc2xpY2Uoa2V5U2l6ZSksIGl2U2l6ZSAqIDQpO1xuXHQgICAgICAgICAgICBrZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gcGFyYW1zXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsga2V5OiBrZXksIGl2OiBpdiwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgc2VyaWFsaXphYmxlIGNpcGhlciB3cmFwcGVyIHRoYXQgZGVyaXZlcyB0aGUga2V5IGZyb20gYSBwYXNzd29yZCxcblx0ICAgICAqIGFuZCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBQYXNzd29yZEJhc2VkQ2lwaGVyID0gQ19saWIuUGFzc3dvcmRCYXNlZENpcGhlciA9IFNlcmlhbGl6YWJsZUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7S0RGfSBrZGYgVGhlIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIHRvIHVzZSB0byBnZW5lcmF0ZSBhIGtleSBhbmQgSVYgZnJvbSBhIHBhc3N3b3JkLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBTZXJpYWxpemFibGVDaXBoZXIuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtkZjogT3BlblNTTEtkZlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlIHVzaW5nIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJyk7XG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIG90aGVyIHBhcmFtc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBJViB0byBjb25maWdcblx0ICAgICAgICAgICAgY2ZnLml2ID0gZGVyaXZlZFBhcmFtcy5pdjtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIG1lc3NhZ2UsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIE1peCBpbiBkZXJpdmVkIHBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0Lm1peEluKGRlcml2ZWRQYXJhbXMpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBwYXNzd29yZCwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXNcblx0ICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpO1xuXG5cdCAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIG90aGVyIHBhcmFtc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUsIGNpcGhlcnRleHQuc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIERlY3J5cHRcblx0ICAgICAgICAgICAgdmFyIHBsYWludGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBjaXBoZXJ0ZXh0LCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cbn0pKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbWluQXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIG1pblV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xuXG51dGlscy5hc3NlcnQgPSBtaW5Bc3NlcnQ7XG51dGlscy50b0FycmF5ID0gbWluVXRpbHMudG9BcnJheTtcbnV0aWxzLnplcm8yID0gbWluVXRpbHMuemVybzI7XG51dGlscy50b0hleCA9IG1pblV0aWxzLnRvSGV4O1xudXRpbHMuZW5jb2RlID0gbWluVXRpbHMuZW5jb2RlO1xuXG4vLyBSZXByZXNlbnQgbnVtIGluIGEgdy1OQUYgZm9ybVxuZnVuY3Rpb24gZ2V0TkFGKG51bSwgdywgYml0cykge1xuICB2YXIgbmFmID0gbmV3IEFycmF5KE1hdGgubWF4KG51bS5iaXRMZW5ndGgoKSwgYml0cykgKyAxKTtcbiAgbmFmLmZpbGwoMCk7XG5cbiAgdmFyIHdzID0gMSA8PCAodyArIDEpO1xuICB2YXIgayA9IG51bS5jbG9uZSgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmFmLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHo7XG4gICAgdmFyIG1vZCA9IGsuYW5kbG4od3MgLSAxKTtcbiAgICBpZiAoay5pc09kZCgpKSB7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cblxuICAgIG5hZltpXSA9IHo7XG4gICAgay5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4gbmFmO1xufVxudXRpbHMuZ2V0TkFGID0gZ2V0TkFGO1xuXG4vLyBSZXByZXNlbnQgazEsIGsyIGluIGEgSm9pbnQgU3BhcnNlIEZvcm1cbmZ1bmN0aW9uIGdldEpTRihrMSwgazIpIHtcbiAgdmFyIGpzZiA9IFtcbiAgICBbXSxcbiAgICBbXVxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB3aGlsZSAoazEuY21wbigtZDEpID4gMCB8fCBrMi5jbXBuKC1kMikgPiAwKSB7XG5cbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsxLmFuZGxuKDcpICsgZDEpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0yNCA9PT0gMilcbiAgICAgICAgdTEgPSAtbTE0O1xuICAgICAgZWxzZVxuICAgICAgICB1MSA9IG0xNDtcbiAgICB9XG4gICAganNmWzBdLnB1c2godTEpO1xuXG4gICAgdmFyIHUyO1xuICAgIGlmICgobTI0ICYgMSkgPT09IDApIHtcbiAgICAgIHUyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsyLmFuZGxuKDcpICsgZDIpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0xNCA9PT0gMilcbiAgICAgICAgdTIgPSAtbTI0O1xuICAgICAgZWxzZVxuICAgICAgICB1MiA9IG0yNDtcbiAgICB9XG4gICAganNmWzFdLnB1c2godTIpO1xuXG4gICAgLy8gU2Vjb25kIHBoYXNlXG4gICAgaWYgKDIgKiBkMSA9PT0gdTEgKyAxKVxuICAgICAgZDEgPSAxIC0gZDE7XG4gICAgaWYgKDIgKiBkMiA9PT0gdTIgKyAxKVxuICAgICAgZDIgPSAxIC0gZDI7XG4gICAgazEuaXVzaHJuKDEpO1xuICAgIGsyLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG5cbmZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KG9iaiwgbmFtZSwgY29tcHV0ZXIpIHtcbiAgdmFyIGtleSA9ICdfJyArIG5hbWU7XG4gIG9iai5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdGhpc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzW2tleV0gOlxuICAgICAgICAgICB0aGlzW2tleV0gPSBjb21wdXRlci5jYWxsKHRoaXMpO1xuICB9O1xufVxudXRpbHMuY2FjaGVkUHJvcGVydHkgPSBjYWNoZWRQcm9wZXJ0eTtcblxuZnVuY3Rpb24gcGFyc2VCeXRlcyhieXRlcykge1xuICByZXR1cm4gdHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJyA/IHV0aWxzLnRvQXJyYXkoYnl0ZXMsICdoZXgnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXM7XG59XG51dGlscy5wYXJzZUJ5dGVzID0gcGFyc2VCeXRlcztcblxuZnVuY3Rpb24gaW50RnJvbUxFKGJ5dGVzKSB7XG4gIHJldHVybiBuZXcgQk4oYnl0ZXMsICdoZXgnLCAnbGUnKTtcbn1cbnV0aWxzLmludEZyb21MRSA9IGludEZyb21MRTtcblxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5pbmhlcml0cyA9IGluaGVyaXRzO1xuXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSB7XG4gIGlmICgobXNnLmNoYXJDb2RlQXQoaSkgJiAweEZDMDApICE9PSAweEQ4MDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGkgPCAwIHx8IGkgKyAxID49IG1zZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChtc2cuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDA7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgLy8gSW5zcGlyZWQgYnkgc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KCkgaW4gY2xvc3VyZS1saWJyYXJ5IGJ5IEdvb2dsZVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi84NTk4ZDg3MjQyYWY1OWFhYzIzMzI3MDc0MmM4OTg0ZTJiMmJkYmUwL2Nsb3N1cmUvZ29vZy9jcnlwdC9jcnlwdC5qcyNMMTE3LUwxNDNcbiAgICAgIC8vIEFwYWNoZSBMaWNlbnNlIDIuMFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAgdmFyIHAgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IGM7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkpIHtcbiAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAmIDB4MDNGRikgPDwgMTApICsgKG1zZy5jaGFyQ29kZUF0KCsraSkgJiAweDAzRkYpO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTgpIHwgMjQwO1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTIpIHwgMjI0O1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5cbmZ1bmN0aW9uIGh0b25sKHcpIHtcbiAgdmFyIHJlcyA9ICh3ID4+PiAyNCkgfFxuICAgICAgICAgICAgKCh3ID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAgICAgKCh3IDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgICAgICgodyAmIDB4ZmYpIDw8IDI0KTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn1cbmV4cG9ydHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gemVybzgod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDcpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA2KVxuICAgIHJldHVybiAnMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuICcwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDQpXG4gICAgcmV0dXJuICcwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAzKVxuICAgIHJldHVybiAnMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuICcwMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNwbGl0MzIgPSBzcGxpdDMyO1xuXG5mdW5jdGlvbiByb3RyMzIodywgYikge1xuICByZXR1cm4gKHcgPj4+IGIpIHwgKHcgPDwgKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzIgPSBzdW0zMjtcblxuZnVuY3Rpb24gc3VtMzJfMyhhLCBiLCBjKSB7XG4gIHJldHVybiAoYSArIGIgKyBjKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTtcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfbG8oYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2xvID0gc3VtNjRfNF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBlbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfaGkgPSByb3RyNjRfaGk7XG5cbmZ1bmN0aW9uIHJvdHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMuc2hyNjRfbG8gPSBzaHI2NF9sbztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICBpZiAodGhpcy5fZmluYWwpIHtcbiAgICB0aGlzLl9fZmluYWwgPSB0aGlzLl9maW5hbFxuICAgIHRoaXMuX2ZpbmFsID0gbnVsbFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGlucHV0RW5jKVxuICB9XG5cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHJldHVybiB0aGlzXG5cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cblxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH1cblxuICBkb25lKGVycilcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX19maW5hbCgpIHx8IEJ1ZmZlci5hbGxvYygwKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuXG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG5cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW4pIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9zaGExXCIpLCByZXF1aXJlKFwiLi9obWFjXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3NoYTFcIiwgXCIuL2htYWNcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDU7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVGhpcyBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBpcyBtZWFudCB0byBjb25mb3JtIHdpdGggRVZQX0J5dGVzVG9LZXkuXG5cdCAgICAgKiB3d3cub3BlbnNzbC5vcmcvZG9jcy9jcnlwdG8vRVZQX0J5dGVzVG9LZXkuaHRtbFxuXHQgICAgICovXG5cdCAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERiA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gRGVmYXVsdDogTUQ1XG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXHQgICAgICAgICAgICBoYXNoZXI6IE1ENSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9uczogMVxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblxuXHQgICAgICAgICAgICAvLyBJbml0IGhhc2hlclxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gY2ZnLmhhc2hlci5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5XG5cdCAgICAgICAgICAgIHdoaWxlIChkZXJpdmVkS2V5V29yZHMubGVuZ3RoIDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBibG9jayA9IGhhc2hlci51cGRhdGUocGFzc3dvcmQpLmZpbmFsaXplKHNhbHQpO1xuXHQgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnNcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2sgPSBoYXNoZXIuZmluYWxpemUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAqL1xuXHQgICAgQy5FdnBLREYgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykge1xuXHQgICAgICAgIHJldHVybiBFdnBLREYuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLkV2cEtERjtcblxufSkpOyIsIid1c2Ugc3RyaWN0J1xuXG4vLyBsaW1pdCBvZiBDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKClcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DcnlwdG8vZ2V0UmFuZG9tVmFsdWVzXG52YXIgTUFYX0JZVEVTID0gNjU1MzZcblxuLy8gTm9kZSBzdXBwb3J0cyByZXF1ZXN0aW5nIHVwIHRvIHRoaXMgbnVtYmVyIG9mIGJ5dGVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL2NyeXB0by9yYW5kb20uanMjTDQ4XG52YXIgTUFYX1VJTlQzMiA9IDQyOTQ5NjcyOTVcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignU2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cXG5Vc2UgQ2hyb21lLCBGaXJlZm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cblxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXNcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gb2xkQnJvd3NlclxufVxuXG5mdW5jdGlvbiByYW5kb21CeXRlcyAoc2l6ZSwgY2IpIHtcbiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93XG4gIGlmIChzaXplID4gTUFYX1VJTlQzMikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3JlcXVlc3RlZCB0b28gbWFueSByYW5kb20gYnl0ZXMnKVxuXG4gIHZhciBieXRlcyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKVxuXG4gIGlmIChzaXplID4gMCkgeyAgLy8gZ2V0UmFuZG9tVmFsdWVzIGZhaWxzIG9uIElFIGlmIHNpemUgPT0gMFxuICAgIGlmIChzaXplID4gTUFYX0JZVEVTKSB7IC8vIHRoaXMgaXMgdGhlIG1heCBieXRlcyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICAvLyBjYW4gZG8gYXQgb25jZSBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICBmb3IgKHZhciBnZW5lcmF0ZWQgPSAwOyBnZW5lcmF0ZWQgPCBzaXplOyBnZW5lcmF0ZWQgKz0gTUFYX0JZVEVTKSB7XG4gICAgICAgIC8vIGJ1ZmZlci5zbGljZSBhdXRvbWF0aWNhbGx5IGNoZWNrcyBpZiB0aGUgZW5kIGlzIHBhc3QgdGhlIGVuZCBvZlxuICAgICAgICAvLyB0aGUgYnVmZmVyIHNvIHdlIGRvbid0IGhhdmUgdG8gaGVyZVxuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzLnNsaWNlKGdlbmVyYXRlZCwgZ2VuZXJhdGVkICsgTUFYX0JZVEVTKSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcylcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2IobnVsbCwgYnl0ZXMpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IChiaXRzICYgMHhmZmZmZmZmZikgPj4+IDBcbiAgICB2YXIgaGlnaEJpdHMgPSAoYml0cyAtIGxvd0JpdHMpIC8gMHgxMDAwMDAwMDBcblxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShsb3dCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG5cdCAgICAgICAgICAgIHZhciByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcDtcblxuXHQgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdJbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApO1xuXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSdcblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xuXHQgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMSA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSAtIDEpXSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICB2YXIgYml0c0NvbWJpbmVkID0gYml0czEgfCBiaXRzMjtcblx0ICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IGJpdHNDb21iaW5lZCA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBUID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTUQ1IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzZcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMSAgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMiAgPSBNW29mZnNldCArIDJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNCAgPSBNW29mZnNldCArIDRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNSAgPSBNW29mZnNldCArIDVdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNyAgPSBNW29mZnNldCArIDddO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOCAgPSBNW29mZnNldCArIDhdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTAgPSBNW29mZnNldCArIDEwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTMgPSBNW29mZnNldCArIDEzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEsICAxMiwgVFsxXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTcsIFRbMl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA3LCAgVFs0XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAgMTIsIFRbNV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsICAyMiwgVFs3XSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNywgIFRbOF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNywgVFsxMF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEzLCAxMiwgVFsxM10pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE3LCBUWzE0XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTtcblxuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDUsICBUWzE2XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNCwgVFsxOF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMCwgIDIwLCBUWzE5XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEwLCA5LCAgVFsyMV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE0LCBUWzIyXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA1LCAgVFsyNF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTQsIDksICBUWzI1XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzgsICAyMCwgVFsyN10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDUsICBUWzI4XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNCwgVFszMF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSk7XG5cblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pO1xuXG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsICAxMCwgVFs0OV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA2LCAgVFs1Ml0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMywgIDEwLCBUWzUzXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEsICAyMSwgVFs1NV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDYsICBUWzU2XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNSwgVFs1OF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTMsIDIxLCBUWzU5XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzExLCAxMCwgVFs2MV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE1LCBUWzYyXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTtcblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5NRDU7XG5cbn0pKTsiLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBNRDUoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8vIGJhc2VkIG9uIHRoZSBhZXMgaW1wbGltZW50YXRpb24gaW4gdHJpcGxlIHNlY1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tleWJhc2UvdHJpcGxlc2VjXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gYXNVSW50MzJBcnJheSAoYnVmKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcblxuICB2YXIgbGVuID0gKGJ1Zi5sZW5ndGggLyA0KSB8IDBcbiAgdmFyIG91dCA9IG5ldyBBcnJheShsZW4pXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IGJ1Zi5yZWFkVUludDMyQkUoaSAqIDQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNjcnViVmVjICh2KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IHYrKykge1xuICAgIHZbaV0gPSAwXG4gIH1cbn1cblxuZnVuY3Rpb24gY3J5cHRCbG9jayAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gsIG5Sb3VuZHMpIHtcbiAgdmFyIFNVQl9NSVgwID0gU1VCX01JWFswXVxuICB2YXIgU1VCX01JWDEgPSBTVUJfTUlYWzFdXG4gIHZhciBTVUJfTUlYMiA9IFNVQl9NSVhbMl1cbiAgdmFyIFNVQl9NSVgzID0gU1VCX01JWFszXVxuXG4gIHZhciBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICB2YXIgczEgPSBNWzFdIF4ga2V5U2NoZWR1bGVbMV1cbiAgdmFyIHMyID0gTVsyXSBeIGtleVNjaGVkdWxlWzJdXG4gIHZhciBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICB2YXIgdDAsIHQxLCB0MiwgdDNcbiAgdmFyIGtzUm93ID0gNFxuXG4gIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCBuUm91bmRzOyByb3VuZCsrKSB7XG4gICAgdDAgPSBTVUJfTUlYMFtzMCA+Pj4gMjRdIF4gU1VCX01JWDFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MzICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQxID0gU1VCX01JWDBbczEgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVgwW3MyID4+PiAyNF0gXiBTVUJfTUlYMVsoczMgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDMgPSBTVUJfTUlYMFtzMyA+Pj4gMjRdIF4gU1VCX01JWDFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MyICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHMwID0gdDBcbiAgICBzMSA9IHQxXG4gICAgczIgPSB0MlxuICAgIHMzID0gdDNcbiAgfVxuXG4gIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDAgPSB0MCA+Pj4gMFxuICB0MSA9IHQxID4+PiAwXG4gIHQyID0gdDIgPj4+IDBcbiAgdDMgPSB0MyA+Pj4gMFxuXG4gIHJldHVybiBbdDAsIHQxLCB0MiwgdDNdXG59XG5cbi8vIEFFUyBjb25zdGFudHNcbnZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdXG52YXIgRyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENvbXB1dGUgZG91YmxlIHRhYmxlXG4gIHZhciBkID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaiA9IDA7IGogPCAyNTY7IGorKykge1xuICAgIGlmIChqIDwgMTI4KSB7XG4gICAgICBkW2pdID0gaiA8PCAxXG4gICAgfSBlbHNlIHtcbiAgICAgIGRbal0gPSAoaiA8PCAxKSBeIDB4MTFiXG4gICAgfVxuICB9XG5cbiAgdmFyIFNCT1ggPSBbXVxuICB2YXIgSU5WX1NCT1ggPSBbXVxuICB2YXIgU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdmFyIElOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuXG4gIC8vIFdhbGsgR0YoMl44KVxuICB2YXIgeCA9IDBcbiAgdmFyIHhpID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgLy8gQ29tcHV0ZSBzYm94XG4gICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNClcbiAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjNcbiAgICBTQk9YW3hdID0gc3hcbiAgICBJTlZfU0JPWFtzeF0gPSB4XG5cbiAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uXG4gICAgdmFyIHgyID0gZFt4XVxuICAgIHZhciB4NCA9IGRbeDJdXG4gICAgdmFyIHg4ID0gZFt4NF1cblxuICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcbiAgICBTVUJfTUlYWzBdW3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBTVUJfTUlYWzJdW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgU1VCX01JWFszXVt4XSA9IHRcblxuICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMClcbiAgICBJTlZfU1VCX01JWFswXVtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBJTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgSU5WX1NVQl9NSVhbMl1bc3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgSU5WX1NVQl9NSVhbM11bc3hdID0gdFxuXG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHggPSB4aSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxuICAgICAgeGkgXj0gZFtkW3hpXV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFNCT1g6IFNCT1gsXG4gICAgSU5WX1NCT1g6IElOVl9TQk9YLFxuICAgIFNVQl9NSVg6IFNVQl9NSVgsXG4gICAgSU5WX1NVQl9NSVg6IElOVl9TVUJfTUlYXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gQUVTIChrZXkpIHtcbiAgdGhpcy5fa2V5ID0gYXNVSW50MzJBcnJheShrZXkpXG4gIHRoaXMuX3Jlc2V0KClcbn1cblxuQUVTLmJsb2NrU2l6ZSA9IDQgKiA0XG5BRVMua2V5U2l6ZSA9IDI1NiAvIDhcbkFFUy5wcm90b3R5cGUuYmxvY2tTaXplID0gQUVTLmJsb2NrU2l6ZVxuQUVTLnByb3RvdHlwZS5rZXlTaXplID0gQUVTLmtleVNpemVcbkFFUy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIga2V5V29yZHMgPSB0aGlzLl9rZXlcbiAgdmFyIGtleVNpemUgPSBrZXlXb3Jkcy5sZW5ndGhcbiAgdmFyIG5Sb3VuZHMgPSBrZXlTaXplICsgNlxuICB2YXIga3NSb3dzID0gKG5Sb3VuZHMgKyAxKSAqIDRcblxuICB2YXIga2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBrID0gMDsgayA8IGtleVNpemU7IGsrKykge1xuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5V29yZHNba11cbiAgfVxuXG4gIGZvciAoayA9IGtleVNpemU7IGsgPCBrc1Jvd3M7IGsrKykge1xuICAgIHZhciB0ID0ga2V5U2NoZWR1bGVbayAtIDFdXG5cbiAgICBpZiAoayAlIGtleVNpemUgPT09IDApIHtcbiAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG5cbiAgICAgIHQgXj0gUkNPTlsoayAvIGtleVNpemUpIHwgMF0gPDwgMjRcbiAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGsgJSBrZXlTaXplID09PSA0KSB7XG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuICAgIH1cblxuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5U2NoZWR1bGVbayAtIGtleVNpemVdIF4gdFxuICB9XG5cbiAgdmFyIGludktleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgaWsgPSAwOyBpayA8IGtzUm93czsgaWsrKykge1xuICAgIHZhciBrc1IgPSBrc1Jvd3MgLSBpa1xuICAgIHZhciB0dCA9IGtleVNjaGVkdWxlW2tzUiAtIChpayAlIDQgPyAwIDogNCldXG5cbiAgICBpZiAoaWsgPCA0IHx8IGtzUiA8PSA0KSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPSB0dFxuICAgIH0gZWxzZSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPVxuICAgICAgICBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0dCA+Pj4gMjRdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMV1bRy5TQk9YWyh0dCA+Pj4gMTYpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsyXVtHLlNCT1hbKHR0ID4+PiA4KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3R0ICYgMHhmZl1dXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fblJvdW5kcyA9IG5Sb3VuZHNcbiAgdGhpcy5fa2V5U2NoZWR1bGUgPSBrZXlTY2hlZHVsZVxuICB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IGludktleVNjaGVkdWxlXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrUmF3ID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcbiAgcmV0dXJuIGNyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YLCB0aGlzLl9uUm91bmRzKVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBvdXQgPSB0aGlzLmVuY3J5cHRCbG9ja1JhdyhNKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuZGVjcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcblxuICAvLyBzd2FwXG4gIHZhciBtMSA9IE1bMV1cbiAgTVsxXSA9IE1bM11cbiAgTVszXSA9IG0xXG5cbiAgdmFyIG91dCA9IGNyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gsIHRoaXMuX25Sb3VuZHMpXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5zY3J1YiA9IGZ1bmN0aW9uICgpIHtcbiAgc2NydWJWZWModGhpcy5fa2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9rZXkpXG59XG5cbm1vZHVsZS5leHBvcnRzLkFFUyA9IEFFU1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5mdW5jdGlvbiBFVlBfQnl0ZXNUb0tleSAocGFzc3dvcmQsIHNhbHQsIGtleUJpdHMsIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgJ2JpbmFyeScpXG4gIGlmIChzYWx0KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCAnYmluYXJ5JylcbiAgICBpZiAoc2FsdC5sZW5ndGggIT09IDgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzYWx0IHNob3VsZCBiZSBCdWZmZXIgd2l0aCA4IGJ5dGUgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBrZXlMZW4gPSBrZXlCaXRzIC8gOFxuICB2YXIga2V5ID0gQnVmZmVyLmFsbG9jKGtleUxlbilcbiAgdmFyIGl2ID0gQnVmZmVyLmFsbG9jKGl2TGVuIHx8IDApXG4gIHZhciB0bXAgPSBCdWZmZXIuYWxsb2MoMClcblxuICB3aGlsZSAoa2V5TGVuID4gMCB8fCBpdkxlbiA+IDApIHtcbiAgICB2YXIgaGFzaCA9IG5ldyBNRDUoKVxuICAgIGhhc2gudXBkYXRlKHRtcClcbiAgICBoYXNoLnVwZGF0ZShwYXNzd29yZClcbiAgICBpZiAoc2FsdCkgaGFzaC51cGRhdGUoc2FsdClcbiAgICB0bXAgPSBoYXNoLmRpZ2VzdCgpXG5cbiAgICB2YXIgdXNlZCA9IDBcblxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB2YXIga2V5U3RhcnQgPSBrZXkubGVuZ3RoIC0ga2V5TGVuXG4gICAgICB1c2VkID0gTWF0aC5taW4oa2V5TGVuLCB0bXAubGVuZ3RoKVxuICAgICAgdG1wLmNvcHkoa2V5LCBrZXlTdGFydCwgMCwgdXNlZClcbiAgICAgIGtleUxlbiAtPSB1c2VkXG4gICAgfVxuXG4gICAgaWYgKHVzZWQgPCB0bXAubGVuZ3RoICYmIGl2TGVuID4gMCkge1xuICAgICAgdmFyIGl2U3RhcnQgPSBpdi5sZW5ndGggLSBpdkxlblxuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGl2TGVuLCB0bXAubGVuZ3RoIC0gdXNlZClcbiAgICAgIHRtcC5jb3B5KGl2LCBpdlN0YXJ0LCB1c2VkLCB1c2VkICsgbGVuZ3RoKVxuICAgICAgaXZMZW4gLT0gbGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdG1wLmZpbGwoMClcbiAgcmV0dXJuIHsga2V5OiBrZXksIGl2OiBpdiB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZ2V0TkFGID0gdXRpbHMuZ2V0TkFGO1xudmFyIGdldEpTRiA9IHV0aWxzLmdldEpTRjtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJhc2VDdXJ2ZSh0eXBlLCBjb25mKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucCA9IG5ldyBCTihjb25mLnAsIDE2KTtcblxuICAvLyBVc2UgTW9udGdvbWVyeSwgd2hlbiB0aGVyZSBpcyBubyBmYXN0IHJlZHVjdGlvbiBmb3IgdGhlIHByaW1lXG4gIHRoaXMucmVkID0gY29uZi5wcmltZSA/IEJOLnJlZChjb25mLnByaW1lKSA6IEJOLm1vbnQodGhpcy5wKTtcblxuICAvLyBVc2VmdWwgZm9yIG1hbnkgY3VydmVzXG4gIHRoaXMuemVybyA9IG5ldyBCTigwKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMub25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIEN1cnZlIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsXG4gIHRoaXMubiA9IGNvbmYubiAmJiBuZXcgQk4oY29uZi5uLCAxNik7XG4gIHRoaXMuZyA9IGNvbmYuZyAmJiB0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLCBjb25mLmdSZWQpO1xuXG4gIC8vIFRlbXBvcmFyeSBhcnJheXNcbiAgdGhpcy5fd25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDIgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMyA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQ0ID0gbmV3IEFycmF5KDQpO1xuXG4gIHRoaXMuX2JpdExlbmd0aCA9IHRoaXMubiA/IHRoaXMubi5iaXRMZW5ndGgoKSA6IDA7XG5cbiAgLy8gR2VuZXJhbGl6ZWQgR3JlZyBNYXh3ZWxsJ3MgdHJpY2tcbiAgdmFyIGFkanVzdENvdW50ID0gdGhpcy5uICYmIHRoaXMucC5kaXYodGhpcy5uKTtcbiAgaWYgKCFhZGp1c3RDb3VudCB8fCBhZGp1c3RDb3VudC5jbXBuKDEwMCkgPiAwKSB7XG4gICAgdGhpcy5yZWROID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9tYXh3ZWxsVHJpY2sgPSB0cnVlO1xuICAgIHRoaXMucmVkTiA9IHRoaXMubi50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxLCB0aGlzLl9iaXRMZW5ndGgpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcsIHRoaXMuX2JpdExlbmd0aCk7XG5cbiAgLy8gQWRkIGB0aGlzYCooTisxKSBmb3IgZXZlcnkgdy1OQUYgaW5kZXhcbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gbmFmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgLy8gQ291bnQgemVyb2VzXG4gICAgZm9yICh2YXIgayA9IDA7IGkgPj0gMCAmJiBuYWZbaV0gPT09IDA7IGktLSlcbiAgICAgIGsrKztcbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuXG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG4gICAgdmFyIHogPSBuYWZbaV07XG4gICAgYXNzZXJ0KHogIT09IDApO1xuICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7XG4gICAgICAvLyBKICstIFBcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEogKy0gSlxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcC50eXBlID09PSAnYWZmaW5lJyA/IGFjYy50b1AoKSA6IGFjYztcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWxBZGQgPSBmdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2VmZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciB3bmRXaWR0aCA9IHRoaXMuX3duYWZUMTtcbiAgdmFyIHduZCA9IHRoaXMuX3duYWZUMjtcbiAgdmFyIG5hZiA9IHRoaXMuX3duYWZUMztcblxuICAvLyBGaWxsIGFsbCBhcnJheXNcbiAgdmFyIG1heCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKGRlZlcpO1xuICAgIHduZFdpZHRoW2ldID0gbmFmUG9pbnRzLnduZDtcbiAgICB3bmRbaV0gPSBuYWZQb2ludHMucG9pbnRzO1xuICB9XG5cbiAgLy8gQ29tYiBzbWFsbCB3aW5kb3cgTkFGc1xuICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAxOyBpIC09IDIpIHtcbiAgICB2YXIgYSA9IGkgLSAxO1xuICAgIHZhciBiID0gaTtcbiAgICBpZiAod25kV2lkdGhbYV0gIT09IDEgfHwgd25kV2lkdGhbYl0gIT09IDEpIHtcbiAgICAgIG5hZlthXSA9IGdldE5BRihjb2VmZnNbYV0sIHduZFdpZHRoW2FdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0sIHRoaXMuX2JpdExlbmd0aCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmZyb20oYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ0VSVElGSUNBVEUnOlxuICAgICAgbmRhdGEgPSBhc24xLmNlcnRpZmljYXRlLmRlY29kZShkYXRhLCAnZGVyJykudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIGlmICghbmRhdGEpIHtcbiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgbmRhdGEuc3ViamVjdFByaXZhdGVLZXkgPSBuZGF0YS5zdWJqZWN0UHVibGljS2V5XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlYycsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHViX2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdFTkNSWVBURUQgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRW5jcnlwdGVkUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBkYXRhID0gZGVjcnlwdChkYXRhLCBwYXNzd29yZClcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQUklWQVRFIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnZlOiBuZGF0YS5hbGdvcml0aG0uY3VydmUsXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKS5wcml2YXRlS2V5XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBwYXJhbXM6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnZlOiBkYXRhLnBhcmFtZXRlcnMudmFsdWUsXG4gICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleVxuICAgICAgfVxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgfVxufVxucGFyc2VLZXlzLnNpZ25hdHVyZSA9IGFzbjEuc2lnbmF0dXJlXG5mdW5jdGlvbiBkZWNyeXB0IChkYXRhLCBwYXNzd29yZCkge1xuICB2YXIgc2FsdCA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5zYWx0XG4gIHZhciBpdGVycyA9IHBhcnNlSW50KGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLCAxMClcbiAgdmFyIGFsZ28gPSBhZXNpZFtkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5hbGdvLmpvaW4oJy4nKV1cbiAgdmFyIGl2ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuaXZcbiAgdmFyIGNpcGhlclRleHQgPSBkYXRhLnN1YmplY3RQcml2YXRlS2V5XG4gIHZhciBrZXlsZW4gPSBwYXJzZUludChhbGdvLnNwbGl0KCctJylbMV0sIDEwKSAvIDhcbiAgdmFyIGtleSA9IGNvbXBhdC5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVycywga2V5bGVuLCAnc2hhMScpXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBYMzJXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogeDY0IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIDY0LWJpdCB3b3JkLlxuXHQgICAgICovXG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIDY0LWJpdCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggMzIgYml0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93IFRoZSBsb3cgMzIgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHg2NFdvcmQgPSBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhpZ2gsIGxvdykge1xuXHQgICAgICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoO1xuXHQgICAgICAgICAgICB0aGlzLmxvdyA9IGxvdztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE5PVHMgdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIG5lZ2F0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbmVnYXRlZCA9IHg2NFdvcmQubm90KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gbm90OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gfnRoaXMuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IH50aGlzLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gQU5EIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIEFORGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFuZGVkID0geDY0V29yZC5hbmQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFuZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggJiB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyAmIHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIE9SIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3JlZCA9IHg2NFdvcmQub3IoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCB8IHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IHwgd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIFhPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBYT1JpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4b3JlZCA9IHg2NFdvcmQueG9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyB4b3I6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIF4gd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgXiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgPDwgbjtcblx0ICAgICAgICAgICAgLy8gfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5sb3cgPDwgKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTaGlmdHMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gc2hpZnRSOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyBpZiAobiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gKHRoaXMubG93ID4+PiBuKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggPj4+IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5oaWdoID4+PiAobiAtIDMyKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRSKG4pLm9yKHRoaXMuc2hpZnRMKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gYWRkIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIGFkZGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFkZGVkID0geDY0V29yZC5hZGQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFkZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7XG5cdCAgICAgICAgICAgIC8vIHZhciBjYXJyeSA9IChsb3cgPj4+IDApIDwgKHRoaXMubG93ID4+PiAwKSA/IDEgOiAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9ICh0aGlzLmhpZ2ggKyB3b3JkLmhpZ2ggKyBjYXJyeSkgfCAwO1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDY0LWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdKTtcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLFxuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpXG5cdCAgICAgICAgICogICAgIF0sIDEwKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgNjQtYml0IHdvcmQgYXJyYXkgdG8gYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHgzMldvcmRBcnJheSA9IHg2NFdvcmRBcnJheS50b1gzMigpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHNMZW5ndGggPSB4NjRXb3Jkcy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgeDMyV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4NjRXb3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgeDY0V29yZCA9IHg2NFdvcmRzW2ldO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmhpZ2gpO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmxvdyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gWDMyV29yZEFycmF5LmNyZWF0ZSh4MzJXb3JkcywgdGhpcy5zaWdCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB4NjRXb3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgXCJ3b3Jkc1wiIGFycmF5XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0XG5cdCAgICAgICAgICAgIHZhciB3b3Jkc0xlbmd0aCA9IHdvcmRzLmxlbmd0aDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLmNsb25lKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgY3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLnNob3J0KG9wdGlvbnMpO1xuICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09ICdlZHdhcmRzJylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLmVkd2FyZHMob3B0aW9ucyk7XG4gIGVsc2VcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH1cbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjI0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AyMjQnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLFxuICBiOiAnYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjQnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2QnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjEnLFxuICAgICdiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZidcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwNTIxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnMDAwMDAwNTEgOTUzZWI5NjEgOGUxYzlhMWYgOTI5YTIxYTAgYjY4NTQwZWUgYTJkYTcyNWIgJyArXG4gICAgICc5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAnICtcbiAgICAgJzNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJyxcbiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArXG4gICAgICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsXG4gIGhhc2g6IGhhc2guc2hhNTEyLFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICtcbiAgICAnMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgJyArXG4gICAgJ2EyZmZhOGRlIDMzNDhiM2MxIDg1NmE0MjliIGY5N2U3ZTMxIGMyZTViZDY2JyxcbiAgICAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArXG4gICAgJzU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxICcgK1xuICAgICczZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0xIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMSA9IENfYWxnby5TSEExID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LFxuXHQgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3Nixcblx0ICAgICAgICAgICAgICAgIDB4YzNkMmUxZjBcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGEgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgYiA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBjID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIGQgPSBIWzNdO1xuXHQgICAgICAgICAgICB2YXIgZSA9IEhbNF07XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IChuIDw8IDEpIHwgKG4gPj4+IDMxKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGUgKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNDApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpICsgMHg2ZWQ5ZWJhMTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDYwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKSAtIDB4NzBlNDQzMjQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKGkgPCA4MCkgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBlID0gZDtcblx0ICAgICAgICAgICAgICAgIGQgPSBjO1xuXHQgICAgICAgICAgICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9IHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTEgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEExKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEExKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTEgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMTtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEhNQUMgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgSE1BQyA9IENfYWxnby5ITUFDID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBITUFDLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaG1hY0hhc2hlciA9IENyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoQ3J5cHRvSlMuYWxnby5TSEEyNTYsIGtleSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhhc2hlciwga2V5KSB7XG5cdCAgICAgICAgICAgIC8vIEluaXQgaGFzaGVyXG5cdCAgICAgICAgICAgIGhhc2hlciA9IHRoaXMuX2hhc2hlciA9IG5ldyBoYXNoZXIuaW5pdCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IFV0ZjgucGFyc2Uoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplID0gaGFzaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZUJ5dGVzID0gaGFzaGVyQmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBBbGxvdyBhcmJpdHJhcnkgbGVuZ3RoIGtleXNcblx0ICAgICAgICAgICAgaWYgKGtleS5zaWdCeXRlcyA+IGhhc2hlckJsb2NrU2l6ZUJ5dGVzKSB7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSBoYXNoZXIuZmluYWxpemUoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIGtleS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIGtleSBmb3IgaW5uZXIgYW5kIG91dGVyIHBhZHNcblx0ICAgICAgICAgICAgdmFyIG9LZXkgPSB0aGlzLl9vS2V5ID0ga2V5LmNsb25lKCk7XG5cdCAgICAgICAgICAgIHZhciBpS2V5ID0gdGhpcy5faUtleSA9IGtleS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgb0tleVdvcmRzID0gb0tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGlLZXlXb3JkcyA9IGlLZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGtleXMgd2l0aCBwYWQgY29uc3RhbnRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFzaGVyQmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG9LZXlXb3Jkc1tpXSBePSAweDVjNWM1YzVjO1xuXHQgICAgICAgICAgICAgICAgaUtleVdvcmRzW2ldIF49IDB4MzYzNjM2MzY7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgb0tleS5zaWdCeXRlcyA9IGlLZXkuc2lnQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBITUFDIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBSZXNldFxuXHQgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZSh0aGlzLl9pS2V5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVXBkYXRlcyB0aGlzIEhNQUMgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SE1BQ30gVGhpcyBITUFDIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaGVyLnVwZGF0ZShtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgSE1BQyBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIChPcHRpb25hbCkgQSBmaW5hbCBtZXNzYWdlIHVwZGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSB0aGlzLl9oYXNoZXI7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBITUFDXG5cdCAgICAgICAgICAgIHZhciBpbm5lckhhc2ggPSBoYXNoZXIuZmluYWxpemUobWVzc2FnZVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICB2YXIgaG1hYyA9IGhhc2hlci5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGlubmVySGFzaCkpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBobWFjO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cbn0pKTsiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFNpbXBsZUNyeXB0b0pTXG4gKlxuICogU2ltcGxpZmllZCBBRVMgY3J5cHRvZ3JhcGh5IGZvciBzYWZlciBhbmQgZWFzaWVyIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gcHJvY2Vzc2VzXG4gKiBvZiBhbnkgSmF2YVNjcmlwdCBvYmplY3RzLlxuICoqL1xudmFyIGNyeXB0b19qc18xID0gcmVxdWlyZShcImNyeXB0by1qc1wiKTtcbi8qKlxuICogU2ltcGxlQ3J5cHRvXG4gKlxuICogQGNsYXNzXG4gKi9cbnZhciBTaW1wbGVDcnlwdG8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50IGEgU2ltcGxlQ3J5cHRvIGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW1cdHtzdHJpbmd9XHRzZWNyZXRcdFx0VGhlIHNlY3JldCBrZXkgZm9yIGNyeXB0b2dyYXBoaWMgcHJvY2Vzcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTaW1wbGVDcnlwdG8oc2VjcmV0KSB7XG4gICAgICAgIGlmIChzZWNyZXQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2ltcGxlQ3J5cHRvIG9iamVjdCBNVVNUIEJFIGluaXRpYWxpc2VkIHdpdGggYSBTRUNSRVQgS0VZLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhQnVmZmVyID0gXCJcIjtcbiAgICAgICAgdGhpcy5fZW5jb2RlciA9IGNyeXB0b19qc18xLmVuYy5VdGY4O1xuICAgICAgICB0aGlzLl9zZWNyZXQgPSBjcnlwdG9fanNfMS5TSEEzKHR5cGVvZiBzZWNyZXQgPT09IFwic3RyaW5nXCIgPyBzZWNyZXQgOiBzZWNyZXQudG9TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMuX2tleVNpemUgPSAyNTY7XG4gICAgICAgIHRoaXMuX2l0ZXJhdGlvbnMgPSAxMDA7XG4gICAgfVxuICAgIFNpbXBsZUNyeXB0by5zYW5pdGlzZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdm9pZCAwIHx8IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlcmUgaXMgbm8gZGF0YSBwcm92aWRlZC4gUHJvY2VzcyBoYWx0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzYW5pdGlzZWQgPSB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIlxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICAgICAgOiB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgZGF0YSA9PT0gXCJib29sZWFuXCJcbiAgICAgICAgICAgICAgICA/IGRhdGEudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKG51bGwgPT09IHNhbml0aXNlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRhIHR5cGUuIE9ubHkgb2JqZWN0LCBzdHJpbmcsIG51bWJlciBhbmQgYm9vbGVhbiBkYXRhIHR5cGVzIGFyZSBhbGxvd2VkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2FuaXRpc2VkO1xuICAgIH07XG4gICAgU2ltcGxlQ3J5cHRvLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgICAgICAgaWYgKHNyYy50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIiB8fCBzcmMudG9Mb3dlckNhc2UoKSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3JjLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzcmMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChqc29uRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQoc3JjKSkgPyBwYXJzZUludChzcmMpIDogc3JjO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2ltcGxlQ3J5cHRvLCBcImVuY29kZXJzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXJzXG4gICAgICAgICAqXG4gICAgICAgICAqIEdldCBFbmNvZGVyIGluc3RhbmNlIGF2YWlsYWJsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNpbmNlXHRcdDIwMTcuMTAuMTZcbiAgICAgICAgICogQGFjY2Vzc1x0XHRwdWJsaWNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mICAgIFNpbXBsZUNyeXB0b1xuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlICAgICBXb3JkQXJyYXlcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiAge29iamVjdH0gIFJldHVybnMgb2JqZWN0IG9mIEVuY29kZXIgaW5zdGFuY2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oeyBEZWZhdWx0OiBjcnlwdG9fanNfMS5lbmMuVXRmOCB9LCBjcnlwdG9fanNfMS5lbmMpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBSYW5kb21cbiAgICAgKlxuICAgICAqIEdlbmVyYXRlIGEgcmFuZG9tIHN0cmluZyBvciBXb3JkQXJyYXkuXG4gICAgICpcbiAgICAgKiBAc2luY2VcdFx0MjAxNy4xMC4xNlxuICAgICAqIEBhY2Nlc3NcdFx0cHVibGljXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgICAgU2ltcGxlQ3J5cHRvXG4gICAgICpcbiAgICAgKiBAc2VlICAgICBXb3JkQXJyYXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIGxlbmd0aCAgICAgIFx0XHRUaGUgbGVuZ3RoIG9mIHJhbmRvbSB0byBiZSBnZW5lcmF0ZWQuXG4gICAgICogQHBhcmFtICAge2Jvb2xlYW59ICAgZXhwZWN0c1dvcmRBcnJheVx0U2V0IHRvIHRydWUgdG8gcmV0dXJuIFdvcmRBcnJheSBpbnN0YW5jZS5cbiAgICAgKiBEZWZhdWx0IGlzIGZhbHNlIGFuZCByZXR1cm4gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nIHwgV29yZEFycmF5fSAgUmV0dXJucyBhIHJhbmRvbSBzdHJpbmcgb3IgV29yZEFycmF5LlxuICAgICAqL1xuICAgIFNpbXBsZUNyeXB0by5nZW5lcmF0ZVJhbmRvbSA9IGZ1bmN0aW9uIChsZW5ndGgsIGV4cGVjdHNXb3JkQXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IDEyODsgfVxuICAgICAgICBpZiAoZXhwZWN0c1dvcmRBcnJheSA9PT0gdm9pZCAwKSB7IGV4cGVjdHNXb3JkQXJyYXkgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgcmFuZG9tID0gY3J5cHRvX2pzXzEubGliLldvcmRBcnJheS5yYW5kb20obGVuZ3RoIC8gOCk7XG4gICAgICAgIHJldHVybiBleHBlY3RzV29yZEFycmF5ID8gcmFuZG9tIDogcmFuZG9tLnRvU3RyaW5nKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBSYW5kb20gU3RyaW5nXG4gICAgICpcbiAgICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEBzaW5jZVx0XHQyMDIwLjA1LjA5XG4gICAgICogQGFjY2Vzc1x0XHRwdWJsaWNcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiAgICBTaW1wbGVDcnlwdG9cbiAgICAgKlxuICAgICAqIEBzZWUgICAgIFdvcmRBcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtICAge251bWJlcn0gICAgbGVuZ3RoICAgICAgXHRcdFRoZSBsZW5ndGggb2YgcmFuZG9tIHRvIGJlIGdlbmVyYXRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmcgfCBXb3JkQXJyYXl9ICBSZXR1cm5zIGEgcmFuZG9tIHN0cmluZy5cbiAgICAgKi9cbiAgICBTaW1wbGVDcnlwdG8uZ2VuZXJhdGVSYW5kb21TdHJpbmcgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkgeyBsZW5ndGggPSAxMjg7IH1cbiAgICAgICAgcmV0dXJuIFNpbXBsZUNyeXB0by5nZW5lcmF0ZVJhbmRvbShsZW5ndGgsIGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIFJhbmRvbSBXb3JkIEFycmF5XG4gICAgICpcbiAgICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBXb3JkQXJyYXkuXG4gICAgICpcbiAgICAgKiBAc2luY2VcdFx0MjAyMC4wNS4wOVxuICAgICAqIEBhY2Nlc3NcdFx0cHVibGljXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgICAgU2ltcGxlQ3J5cHRvXG4gICAgICpcbiAgICAgKiBAc2VlICAgICBXb3JkQXJyYXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIGxlbmd0aCAgICAgIFx0XHRUaGUgbGVuZ3RoIG9mIHJhbmRvbSB0byBiZSBnZW5lcmF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nIHwgV29yZEFycmF5fSAgUmV0dXJucyBhIHJhbmRvbSBXb3JkQXJyYXkuXG4gICAgICovXG4gICAgU2ltcGxlQ3J5cHRvLmdlbmVyYXRlUmFuZG9tV29yZEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHsgbGVuZ3RoID0gMTI4OyB9XG4gICAgICAgIHJldHVybiBTaW1wbGVDcnlwdG8uZ2VuZXJhdGVSYW5kb20obGVuZ3RoLCB0cnVlKTtcbiAgICB9O1xuICAgIFNpbXBsZUNyeXB0by5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhQnVmZmVyID09PSBcIlwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBkYXRhIHdhcyBwcm92aWRlZCB0byBiZSBkZWNyeXB0ZWQuIERlY3J5cHRpb24gaGFsdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZGF0YUJ1ZmZlci5sZW5ndGggPD0gNjQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2lwaGVyIHRleHQuIERlY3J5cHRpb24gaGFsdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2FsdCA9IGNyeXB0b19qc18xLmVuYy5IZXgucGFyc2UodGhpcy5fZGF0YUJ1ZmZlci5zdWJzdHIoMCwgMzIpKTtcbiAgICAgICAgdmFyIGluaXRpYWxWZWN0b3IgPSBjcnlwdG9fanNfMS5lbmMuSGV4LnBhcnNlKHRoaXMuX2RhdGFCdWZmZXIuc3Vic3RyKDMyLCAzMikpO1xuICAgICAgICB2YXIgZW5jcnlwdGVkID0gdGhpcy5fZGF0YUJ1ZmZlci5zdWJzdHJpbmcoNjQsIHRoaXMuX2RhdGFCdWZmZXIubGVuZ3RoIC0gNjQpO1xuICAgICAgICB2YXIga2V5ID0gY3J5cHRvX2pzXzEuUEJLREYyKHRoaXMuX3NlY3JldC50b1N0cmluZygpLCBzYWx0LCB7XG4gICAgICAgICAgICBrZXlTaXplOiB0aGlzLl9rZXlTaXplIC8gMzIsXG4gICAgICAgICAgICBpdGVyYXRpb25zOiB0aGlzLl9pdGVyYXRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaGFzaGVkQ2lwaGVyVGV4dCA9IHRoaXMuX2RhdGFCdWZmZXIuc3Vic3RyaW5nKHRoaXMuX2RhdGFCdWZmZXIubGVuZ3RoIC0gNjQpO1xuICAgICAgICB2YXIgY2lwaGVyVGV4dCA9IHRoaXMuX2RhdGFCdWZmZXIuc3Vic3RyaW5nKDAsIHRoaXMuX2RhdGFCdWZmZXIubGVuZ3RoIC0gNjQpO1xuICAgICAgICBpZiAoaGFzaGVkQ2lwaGVyVGV4dCAhPSBjcnlwdG9fanNfMS5IbWFjU0hBMjU2KGNpcGhlclRleHQsIGtleSkudG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmNyeXB0ZWQgdGV4dCByZWNlaXZlZC4gRGVjcnlwdGlvbiBoYWx0ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWNyeXB0ZWQgPSBjcnlwdG9fanNfMS5BRVMuZGVjcnlwdChlbmNyeXB0ZWQsIGtleSwge1xuICAgICAgICAgICAgaXY6IGluaXRpYWxWZWN0b3IsXG4gICAgICAgICAgICBwYWRkaW5nOiBjcnlwdG9fanNfMS5wYWQuUGtjczcsXG4gICAgICAgICAgICBtb2RlOiBjcnlwdG9fanNfMS5tb2RlLkNCQ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFNpbXBsZUNyeXB0by50cmFuc2Zvcm0oZGVjcnlwdGVkLnRvU3RyaW5nKFNpbXBsZUNyeXB0by5lbmNvZGVycy5EZWZhdWx0KSk7XG4gICAgfTtcbiAgICBTaW1wbGVDcnlwdG8ucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fZGF0YUJ1ZmZlciA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZGF0YSB3YXMgcHJvdmlkZWQgdG8gYmUgZW5jcnlwdGVkLiBFbmNyeXB0aW9uIGhhbHRlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNhbHQgPSBTaW1wbGVDcnlwdG8uZ2VuZXJhdGVSYW5kb20oMTI4LCB0cnVlKTtcbiAgICAgICAgdmFyIGluaXRpYWxWZWN0b3IgPSBTaW1wbGVDcnlwdG8uZ2VuZXJhdGVSYW5kb20oMTI4LCB0cnVlKTtcbiAgICAgICAgdmFyIGtleSA9IGNyeXB0b19qc18xLlBCS0RGMih0aGlzLl9zZWNyZXQudG9TdHJpbmcoKSwgc2FsdCwge1xuICAgICAgICAgICAga2V5U2l6ZTogdGhpcy5fa2V5U2l6ZSAvIDMyLFxuICAgICAgICAgICAgaXRlcmF0aW9uczogdGhpcy5faXRlcmF0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNyeXB0b19qc18xLkFFUy5lbmNyeXB0KHRoaXMuX2RhdGFCdWZmZXIsIGtleSwge1xuICAgICAgICAgICAgaXY6IGluaXRpYWxWZWN0b3IsXG4gICAgICAgICAgICBwYWRkaW5nOiBjcnlwdG9fanNfMS5wYWQuUGtjczcsXG4gICAgICAgICAgICBtb2RlOiBjcnlwdG9fanNfMS5tb2RlLkNCQ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ29tYmluaW5nIHRoZSBlbmNyeXB0ZWQgc3RyaW5nIHdpdGggc2FsdCBhbmQgSVYgdG8gZm9ybSBjaXBoZXItdGV4dFxuICAgICAgICB2YXIgY2lwaGVyVGV4dCA9IHNhbHQudG9TdHJpbmcoKVxuICAgICAgICAgICAgKyBpbml0aWFsVmVjdG9yLnRvU3RyaW5nKClcbiAgICAgICAgICAgICsgZW5jcnlwdGVkLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIEdlbmVyYXRlIGF1dGhlbnRpY2F0aW9uIHRhZyBhbmQgYXBwZW5kIHRoYXQgdG8gdGhlIGNpcGhlci10ZXh0IHVzaW5nIHRoZSBrZXkgZGVyaXZlZCBmcm9tIFBCS0RGMi5cbiAgICAgICAgLy8gKE9wdGlvbmFsIFRPRE86IEluY2x1ZGUgYSBtb2R1bGUgdG8gZ2VuZXJhdGUgYXV0aGVudGljYXRpb24ga2V5LiBQb3NzaWJseSBIS0RGLVNIQTI1Ni4pXG4gICAgICAgIHZhciBoYXNoZWRDaXBoZXJUZXh0ID0gY3J5cHRvX2pzXzEuSG1hY1NIQTI1NihjaXBoZXJUZXh0LCBrZXkpLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBjaXBoZXJUZXh0ICsgaGFzaGVkQ2lwaGVyVGV4dDtcbiAgICB9O1xuICAgIFNpbXBsZUNyeXB0by5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uIChjaXBoZXIsIHNlY29uZEFyZywgdGhpcmRBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNldERlY3J5cHRpb25PcHRpb24gPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZyAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0RW5jb2RlcihhcmcpO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNpcGhlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoY2lwaGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWNvbmRBcmcgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHNldERlY3J5cHRpb25PcHRpb24oc2Vjb25kQXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlyZEFyZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgc2V0RGVjcnlwdGlvbk9wdGlvbih0aGlyZEFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjcnlwdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbXBsZUNyeXB0by5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5jcnlwdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlY3J5cHQgT2JqZWN0XG4gICAgICpcbiAgICAgKiBEZWNyeXB0IGEgZW5jcnlwdGVkIHN0cmluZyBhbmQgdHJ5IHRvIGNvbnZlcnQgaXQgYmFjayB0byBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc2luY2VcdFx0MjAxNy4xMC4xNlxuICAgICAqIEBhY2Nlc3NcdFx0cHVibGljXG4gICAgICogQGRlcHJlY2F0ZWRcdFNpbmNlIHZlcnNpb24gMi4wLjAsIHVzZSBkZWNyeXB0KGNpcGhlcjogQ2lwaGVyVGV4dCkgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiAgICBTaW1wbGVDcnlwdG9cbiAgICAgKlxuICAgICAqIEBzZWVcdFx0ZGVjcnlwdFxuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ31cdGNpcGhlclx0XHRUaGUgZW5jcnlwdGVkIHN0cmluZyBvZiB0aGUgZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9XHRUaGUgZGVjcnlwdGVkIGRhdGEgb2YgdGhlIGVuY3J5cHRlZCBzdHJpbmcgaW4gdGhlIGZvcm1cbiAgICAgKiBvZiBvYmplY3QuXG4gICAgICovXG4gICAgU2ltcGxlQ3J5cHRvLnByb3RvdHlwZS5kZWNyeXB0T2JqZWN0ID0gZnVuY3Rpb24gKGNpcGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGUoY2lwaGVyKS5kZWNyeXB0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbmNyeXB0IE9iamVjdFxuICAgICAqXG4gICAgICogRW5jcnlwdCBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc2luY2VcdFx0MjAxNy4xMC4xNlxuICAgICAqIEBhY2Nlc3NcdFx0cHVibGljXG4gICAgICogQGRlcHJlY2F0ZWRcdFNpbmNlIHZlcnNpb24gMi4wLjAsIHVzZSBlbmNyeXB0KGRhdGE6IFBsYWluRGF0YSkgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiAgICBTaW1wbGVDcnlwdG9cbiAgICAgKlxuICAgICAqIEBzZWVcdFx0ZW5jcnlwdFxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH1cdG9iamVjdFx0XHRUaGUgb2JqZWN0IHRvIGJlIGVuY3J5cHRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9XHRUaGUgZW5jcnlwdGVkIHN0cmluZyBvZiB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFNpbXBsZUNyeXB0by5wcm90b3R5cGUuZW5jcnlwdE9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG9iamVjdCkuZW5jcnlwdCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwZW5kXG4gICAgICpcbiAgICAgKiBBcHBlbmQgdGhlIGRhdGEgdG8gYmUgZW5jcnlwdGVkIG9yIGRlY3J5cHRlZC5cbiAgICAgKlxuICAgICAqIEBzaW5jZVx0XHQyMDIwLjA1LjA5XG4gICAgICogQGFjY2Vzc1x0XHRwdWJsaWNcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiAgICBTaW1wbGVDcnlwdG9cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtvYmplY3QgfCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFufVx0ZGF0YVx0RGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiAge1NpbXBsZUNyeXB0b31cdFx0Q3VycmVudCBTaW1wbGVDcnlwdG8gaW5zdGFuY2UuXG4gICAgICovXG4gICAgU2ltcGxlQ3J5cHRvLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YUJ1ZmZlciA9IHRoaXMuX2RhdGFCdWZmZXIgKyBTaW1wbGVDcnlwdG8uc2FuaXRpc2VEYXRhKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlXG4gICAgICpcbiAgICAgKiBDaGFuZ2UgZGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLlxuICAgICAqXG4gICAgICogQHNpbmNlXHRcdDIwMjAuMDUuMDlcbiAgICAgKiBAYWNjZXNzXHRcdHB1YmxpY1xuICAgICAqXG4gICAgICogQG1lbWJlck9mICAgIFNpbXBsZUNyeXB0b1xuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdCB8IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW59XHRkYXRhXHREYXRhIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7U2ltcGxlQ3J5cHRvfVx0XHRDdXJyZW50IFNpbXBsZUNyeXB0byBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBTaW1wbGVDcnlwdG8ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhQnVmZmVyID0gU2ltcGxlQ3J5cHRvLnNhbml0aXNlRGF0YShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCBFbmNvZGVyXG4gICAgICpcbiAgICAgKiBDaGFuZ2UgdGhlIGRlZmF1bHQgZW5jb2RpbmcgdHlwZSBmb3IgdGhlIGRlY3J5cHRpb24gcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIEBzaW5jZVx0XHQyMDIwLjA1LjA5XG4gICAgICogQGFjY2Vzc1x0XHRwdWJsaWNcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiAgICBTaW1wbGVDcnlwdG9cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtFbmNvZGVyfVx0ZW5jb2Rlclx0XHRUaGUgbmV3IEVuY29kZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHJldHVybiAge1NpbXBsZUNyeXB0b31cdFx0Q3VycmVudCBTaW1wbGVDcnlwdG8gaW5zdGFuY2UuXG4gICAgICovXG4gICAgU2ltcGxlQ3J5cHRvLnByb3RvdHlwZS5zZXRFbmNvZGVyID0gZnVuY3Rpb24gKGVuY29kZXIpIHtcbiAgICAgICAgLypcbiAgICAgICAgKiBUT0RPOiBFbmNvZGluZyBzdXBwb3J0IGlzIGRyb3BwZWQgYXQgdGhlIG1vbWVudCwgYm90aCBmb3IgZW5jcnlwdGlvblxuICAgICAgICAqICBhbmQgZGVjcnlwdGlvbi4gV2Ugc2hvdWxkIGZpZ3VyZSBvdXQgaG93IHdlIGhhdmUgdG8gaW1wbGVtZW50IGVuY29kaW5nXG4gICAgICAgICogIHN1cHBvcnQgaW4gdGhlIHNpbXBsZXN0IHdheSBwb3NzaWJsZS5cbiAgICAgICAgKiAqL1xuICAgICAgICB0aGlzLl9lbmNvZGVyID0gZW5jb2RlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgU2VjcmV0XG4gICAgICpcbiAgICAgKiBDaGFuZ2UgdGhlIHNlY3JldCBrZXkgYnkgc2V0dGluZyBhIG5ldyBvbmUuIEJ5IGNoYW5naW5nIHRoZSBzZWNyZXQga2V5LFxuICAgICAqIGFueSBlbmNyeXB0ZWQgc3RyaW5nIHRoYXQgZW5jcnlwdGVkIGJ5IHByZXZpb3VzIHNlY3JldCBrZXkgd2lsbCBub3QgYmVcbiAgICAgKiBhYmxlIHRvIGRlY3J5cHRlZCwgdW5sZXNzIHRoZSBzZWNyZXQga2V5IGlzIHNldCB0byB0aGUgb25lIHVzZWQgdG9cbiAgICAgKiBlbmNyeXB0IHRoZSBkYXRhLlxuICAgICAqXG4gICAgICogQHNpbmNlXHRcdDIwMTcuMTAuMTZcbiAgICAgKiBAYWNjZXNzXHRcdHB1YmxpY1xuICAgICAqXG4gICAgICogQG1lbWJlck9mICAgIFNpbXBsZUNyeXB0b1xuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ31cdHNlY3JldFx0XHRUaGUgbmV3IHNlY3JldCBrZXkgYXMgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiAge1NpbXBsZUNyeXB0b31cdFx0Q3VycmVudCBTaW1wbGVDcnlwdG8gaW5zdGFuY2UuXG4gICAgICovXG4gICAgU2ltcGxlQ3J5cHRvLnByb3RvdHlwZS5zZXRTZWNyZXQgPSBmdW5jdGlvbiAoc2VjcmV0KSB7XG4gICAgICAgIHRoaXMuX3NlY3JldCA9IGNyeXB0b19qc18xLlNIQTModHlwZW9mIHNlY3JldCA9PT0gXCJzdHJpbmdcIiA/IHNlY3JldCA6IHNlY3JldC50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlQ3J5cHRvO1xufSgpKTtcbmV4cG9ydHMuU2ltcGxlQ3J5cHRvID0gU2ltcGxlQ3J5cHRvO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2ltcGxlQ3J5cHRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2ltcGxlQ3J5cHRvLmpzLm1hcCIsImZ1bmN0aW9uIGZyb21CNjQoaCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oaCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGF0b2IoaCk7XG59XG5cbi8qKlxuICogRGVjb2RpZmljYSBvIHBheWxvYWQgZGUgdW0gdG9rZW4gSldULlxuICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRva2VuIGNvZGlmaWNhZG8gbm8gcHJvdG9jb2xvIEpXVFxuICovXG5mdW5jdGlvbiBwYXJzZUp3dCh0b2tlbikge1xuICB0cnkge1xuICAgIGNvbnN0IGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgY29uc3QgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKGZyb21CNjQoYmFzZTY0KSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvL1xuICB9XG59XG5cbi8qKlxuICogVmVyaWZpY2Egc2UgdW0gdG9rZW4gSldUIGVzdMOhIGV4cGlyYWRvIGF0cmF2w6lzIGRvIHNldSBwYXlsb2FkLlxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuUGF5bG9hZCBQYXlsb2FkIGRvIHRva2VuIEpXVCBhIHNlciB2ZXJpZmljYWRvLlxuICovXG5mdW5jdGlvbiBpc0V4cGlyZWQodG9rZW5QYXlsb2FkKSB7XG4gIGxldCBleHBpcmVkID0gdHJ1ZTtcbiAgaWYgKHRva2VuUGF5bG9hZCAmJiB0b2tlblBheWxvYWQuZXhwKSB7XG4gICAgY29uc3QgZXhwTXMgPSB0b2tlblBheWxvYWQuZXhwICogMTAwMC8qIG1pbGlzc2VndW5kb3MgKi87XG4gICAgZXhwaXJlZCA9IGV4cE1zIDw9IERhdGUubm93KCk7XG4gIH1cbiAgcmV0dXJuIGV4cGlyZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZUp3dCxcbiAgaXNFeHBpcmVkLFxufTtcbiIsImNvbnN0IENvbW1hbmRzID0ge1xuICBHRVRfSVRFTTogJ2dldEl0ZW0nLFxuICBTRVRfSVRFTTogJ3NldEl0ZW0nLFxuICBSRU1PVkVfSVRFTTogJ3JlbW92ZUl0ZW0nLFxuICBDTEVBUjogJ2NsZWFyJyxcbn07XG5cbmNsYXNzIExvY2FsU2Vzc2lvblN0b3JhZ2VTZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcigkbG9jYWxTdG9yYWdlKSB7XG4gICAgdGhpcy5zdG9yYWdlID0gJGxvY2FsU3RvcmFnZTtcbiAgfVxuXG4gIGdldCBhdmFpYWJsZUNvbW1hbmRzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhDb21tYW5kcykubWFwKGtleSA9PiBDb21tYW5kc1trZXldKTtcbiAgfVxuXG4gIHByb2Nlc3NDb21tYW5kKGNvbW1hbmQsIGNvbW1hbmRBcmd1bWVudHMpIHtcbiAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IGNvbW1hbmRBcmd1bWVudHM7XG4gICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICBjYXNlIENvbW1hbmRzLkdFVF9JVEVNOlxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGNhc2UgQ29tbWFuZHMuU0VUX0lURU06XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICAgIGNhc2UgQ29tbWFuZHMuUkVNT1ZFX0lURU06XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgY2FzZSBDb21tYW5kcy5DTEVBUjpcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5jbGVhcigpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBMb2NhbFNlc3Npb25TdG9yYWdlQ2xpZW50IHtcbiAgY29uc3RydWN0b3Ioc2VuZENvbW1hbmRGdW5jdGlvbikge1xuICAgIHRoaXMuc2VuZENvbW1hbmQgPSBzZW5kQ29tbWFuZEZ1bmN0aW9uO1xuICB9XG5cbiAgYXN5bmMgZ2V0SXRlbShrZXkpIHtcbiAgICBjb25zdCBjb21tYW5kQXJndW1lbnRzID0geyBrZXkgfTtcbiAgICByZXR1cm4gdGhpcy5zZW5kQ29tbWFuZChDb21tYW5kcy5HRVRfSVRFTSwgY29tbWFuZEFyZ3VtZW50cyk7XG4gIH1cblxuICBhc3luYyBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBjb21tYW5kQXJndW1lbnRzID0geyBrZXksIHZhbHVlIH07XG4gICAgcmV0dXJuIHRoaXMuc2VuZENvbW1hbmQoQ29tbWFuZHMuU0VUX0lURU0sIGNvbW1hbmRBcmd1bWVudHMpO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlSXRlbShrZXkpIHtcbiAgICBjb25zdCBjb21tYW5kQXJndW1lbnRzID0geyBrZXkgfTtcbiAgICByZXR1cm4gdGhpcy5zZW5kQ29tbWFuZChDb21tYW5kcy5SRU1PVkVfSVRFTSwgY29tbWFuZEFyZ3VtZW50cyk7XG4gIH1cblxuICBhc3luYyBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kQ29tbWFuZChDb21tYW5kcy5DTEVBUik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHNlcnZlcjogTG9jYWxTZXNzaW9uU3RvcmFnZVNlcnZlciwgY2xpZW50OiBMb2NhbFNlc3Npb25TdG9yYWdlQ2xpZW50IH07XG4iLCIvLyBUT0RPOiBleHRlcm5hbGl6ZSBDb29raWVQcm92aWRlciB0byByZW1vdmUgdGhpcyBwYWNrYWdlIGRlcGVuZGVuY3kgZnJvbSBqcy1jb29raWVcblxuY29uc3QgQ29va2llcyA9IHJlcXVpcmUoJ2pzLWNvb2tpZScpO1xuXG5jb25zdCBDb21tYW5kcyA9IHtcbiAgR0VUOiAnc2V0JyxcbiAgU0VUOiAnZ2V0JyxcbiAgUkVNT1ZFOiAncmVtb3ZlJyxcbiAgR0VUX0pTT046ICdnZXRKU09OJyxcbn07XG5cbmNsYXNzIENvb2tpZVNlcnZlclByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBnZXQgYXZhaWFibGVDb21tYW5kcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoQ29tbWFuZHMpLm1hcChrZXkgPT4gQ29tbWFuZHNba2V5XSk7XG4gIH1cblxuICBwcm9jZXNzQ29tbWFuZChjb21tYW5kLCBjb21tYW5kQXJndW1lbnRzID0ge30pIHtcbiAgICBjb25zdCB7IGtleSwgdmFsdWUsIG9wdGlvbnMgfSA9IGNvbW1hbmRBcmd1bWVudHM7XG4gICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICBjYXNlIENvbW1hbmRzLkdFVDpcbiAgICAgICAgcmV0dXJuIENvb2tpZXMuZ2V0KGtleSk7XG4gICAgICBjYXNlIENvbW1hbmRzLlNFVDpcbiAgICAgICAgcmV0dXJuIENvb2tpZXMuc2V0KGtleSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgY2FzZSBDb21tYW5kcy5SRU1PVkU6XG4gICAgICAgIHJldHVybiBDb29raWVzLnJlbW92ZShrZXksIG9wdGlvbnMpO1xuICAgICAgY2FzZSBDb21tYW5kcy5HRVRfSlNPTjpcbiAgICAgICAgcmV0dXJuIENvb2tpZXMuZ2V0SlNPTihrZXkpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBDb29raWVDbGllbnQge1xuICBjb25zdHJ1Y3RvcihzZW5kQ29tbWFuZEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5zZW5kQ29tbWFuZCA9IHNlbmRDb21tYW5kRnVuY3Rpb247XG4gIH1cblxuICBhc3luYyBnZXQoa2V5KSB7XG4gICAgY29uc3QgY29tbWFuZEFyZ3VtZW50cyA9IHsga2V5IH07XG4gICAgcmV0dXJuIHRoaXMuc2VuZENvbW1hbmQoQ29tbWFuZHMuR0VULCBjb21tYW5kQXJndW1lbnRzKTtcbiAgfVxuXG4gIGFzeW5jIHNldChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tbWFuZEFyZ3VtZW50cyA9IHsga2V5LCB2YWx1ZSwgb3B0aW9ucyB9O1xuICAgIHJldHVybiB0aGlzLnNlbmRDb21tYW5kKENvbW1hbmRzLlNFVCwgY29tbWFuZEFyZ3VtZW50cyk7XG4gIH1cblxuICBhc3luYyByZW1vdmUoa2V5LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tbWFuZEFyZ3VtZW50cyA9IHsga2V5LCBvcHRpb25zIH07XG4gICAgcmV0dXJuIHRoaXMuc2VuZENvbW1hbmQoQ29tbWFuZHMuUkVNT1ZFLCBjb21tYW5kQXJndW1lbnRzKTtcbiAgfVxuXG4gIGFzeW5jIGdldEpTT04oKSB7XG4gICAgY29uc3QgY29tbWFuZEFyZ3VtZW50cyA9IHsga2V5IH07XG4gICAgcmV0dXJuIHRoaXMuc2VuZENvbW1hbmQoQ29tbWFuZHMuR0VUX0pTT04sIGNvbW1hbmRBcmd1bWVudHMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBzZXJ2ZXI6IENvb2tpZVNlcnZlclByb3ZpZGVyLCBjbGllbnQ6IENvb2tpZUNsaWVudCB9O1xuIiwiY29uc3QgSUZSQU1FX0lEID0gJ2Nyb3NzLXN0b3JhZ2UtaWZyYW1lJztcblxuY29uc3QgRXZlbnRzID0ge1xuICBDT01NQU5EOiAnQ1NJX0NPTU1BTkQnLFxuICBSRVBMWTogJ0NTSV9SRVBMWScsXG59O1xuXG5jb25zdCBJbnRlcm5hbENvbW1hbmRzID0ge1xuICBQSU5HOiAnUElORycsXG4gIExJU1RfUFJPVklERVJTOiAnTElTVF9QUk9WSURFUlMnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgSUZSQU1FX0lELCBFdmVudHMsIEludGVybmFsQ29tbWFuZHMgfTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyICh2YWwsIHByZWZpeCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcmVmaXggKyAnIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXInKVxuICB9XG59XG5cbmZ1bmN0aW9uIEhhc2hCYXNlIChibG9ja1NpemUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja1NpemUpXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgdGhpcy5fbGVuZ3RoID0gWzAsIDAsIDAsIDBdXG5cbiAgdGhpcy5fZmluYWxpemVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSlcblxuSGFzaEJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy51cGRhdGUoY2h1bmssIGVuY29kaW5nKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLmRpZ2VzdCgpKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcpIHtcbiAgdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyKGRhdGEsICdEYXRhJylcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKVxuXG4gIC8vIGNvbnN1bWUgZGF0YVxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgb2Zmc2V0ID0gMFxuICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5fYmxvY2tPZmZzZXQ7IGkgPCB0aGlzLl9ibG9ja1NpemU7KSBibG9ja1tpKytdID0gZGF0YVtvZmZzZXQrK11cbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG4gIHdoaWxlIChvZmZzZXQgPCBkYXRhLmxlbmd0aCkgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXVxuXG4gIC8vIHVwZGF0ZSBsZW5ndGhcbiAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gZGF0YS5sZW5ndGggKiA4OyBjYXJyeSA+IDA7ICsraikge1xuICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeVxuICAgIGNhcnJ5ID0gKHRoaXMuX2xlbmd0aFtqXSAvIDB4MDEwMDAwMDAwMCkgfCAwXG4gICAgaWYgKGNhcnJ5ID4gMCkgdGhpcy5fbGVuZ3RoW2pdIC09IDB4MDEwMDAwMDAwMCAqIGNhcnJ5XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICB0aGlzLl9maW5hbGl6ZWQgPSB0cnVlXG5cbiAgdmFyIGRpZ2VzdCA9IHRoaXMuX2RpZ2VzdCgpXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSBkaWdlc3QgPSBkaWdlc3QudG9TdHJpbmcoZW5jb2RpbmcpXG5cbiAgLy8gcmVzZXQgc3RhdGVcbiAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHRoaXMuX2xlbmd0aFtpXSA9IDBcblxuICByZXR1cm4gZGlnZXN0XG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoQmFzZVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODVcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBjaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBnYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBnYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgNjQ7ICsraSkgV1tpXSA9IChnYW1tYTEoV1tpIC0gMl0pICsgV1tpIC0gN10gKyBnYW1tYTAoV1tpIC0gMTVdKSArIFdbaSAtIDE2XSkgfCAwXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7XG4gICAgdmFyIFQxID0gKGggKyBzaWdtYTEoZSkgKyBjaChlLCBmLCBnKSArIEtbal0gKyBXW2pdKSB8IDBcbiAgICB2YXIgVDIgPSAoc2lnbWEwKGEpICsgbWFqKGEsIGIsIGMpKSB8IDBcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSAoZCArIFQxKSB8IDBcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gKFQxICsgVDIpIHwgMFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTUxMiAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGE1MTIsIEhhc2gpXG5cblNoYTUxMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweDZhMDllNjY3XG4gIHRoaXMuX2JoID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jaCA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZGggPSAweGE1NGZmNTNhXG4gIHRoaXMuX2VoID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9maCA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZ2ggPSAweDFmODNkOWFiXG4gIHRoaXMuX2hoID0gMHg1YmUwY2QxOVxuXG4gIHRoaXMuX2FsID0gMHhmM2JjYzkwOFxuICB0aGlzLl9ibCA9IDB4ODRjYWE3M2JcbiAgdGhpcy5fY2wgPSAweGZlOTRmODJiXG4gIHRoaXMuX2RsID0gMHg1ZjFkMzZmMVxuICB0aGlzLl9lbCA9IDB4YWRlNjgyZDFcbiAgdGhpcy5fZmwgPSAweDJiM2U2YzFmXG4gIHRoaXMuX2dsID0gMHhmYjQxYmQ2YlxuICB0aGlzLl9obCA9IDB4MTM3ZTIxNzlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMjggfCB4bCA8PCA0KSBeICh4bCA+Pj4gMiB8IHggPDwgMzApIF4gKHhsID4+PiA3IHwgeCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE0IHwgeGwgPDwgMTgpIF4gKHggPj4+IDE4IHwgeGwgPDwgMTQpIF4gKHhsID4+PiA5IHwgeCA8PCAyMylcbn1cblxuZnVuY3Rpb24gR2FtbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTBsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3IHwgeGwgPDwgMjUpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMWwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2IHwgeGwgPDwgMjYpXG59XG5cbmZ1bmN0aW9uIGdldENhcnJ5IChhLCBiKSB7XG4gIHJldHVybiAoYSA+Pj4gMCkgPCAoYiA+Pj4gMCkgPyAxIDogMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYWggPSB0aGlzLl9haCB8IDBcbiAgdmFyIGJoID0gdGhpcy5fYmggfCAwXG4gIHZhciBjaCA9IHRoaXMuX2NoIHwgMFxuICB2YXIgZGggPSB0aGlzLl9kaCB8IDBcbiAgdmFyIGVoID0gdGhpcy5fZWggfCAwXG4gIHZhciBmaCA9IHRoaXMuX2ZoIHwgMFxuICB2YXIgZ2ggPSB0aGlzLl9naCB8IDBcbiAgdmFyIGhoID0gdGhpcy5faGggfCAwXG5cbiAgdmFyIGFsID0gdGhpcy5fYWwgfCAwXG4gIHZhciBibCA9IHRoaXMuX2JsIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jbCB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZGwgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2VsIHwgMFxuICB2YXIgZmwgPSB0aGlzLl9mbCB8IDBcbiAgdmFyIGdsID0gdGhpcy5fZ2wgfCAwXG4gIHZhciBobCA9IHRoaXMuX2hsIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkgKz0gMikge1xuICAgIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICAgIFdbaSArIDFdID0gTS5yZWFkSW50MzJCRShpICogNCArIDQpXG4gIH1cbiAgZm9yICg7IGkgPCAxNjA7IGkgKz0gMikge1xuICAgIHZhciB4aCA9IFdbaSAtIDE1ICogMl1cbiAgICB2YXIgeGwgPSBXW2kgLSAxNSAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTAgPSBHYW1tYTAoeGgsIHhsKVxuICAgIHZhciBnYW1tYTBsID0gR2FtbWEwbCh4bCwgeGgpXG5cbiAgICB4aCA9IFdbaSAtIDIgKiAyXVxuICAgIHhsID0gV1tpIC0gMiAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTEgPSBHYW1tYTEoeGgsIHhsKVxuICAgIHZhciBnYW1tYTFsID0gR2FtbWExbCh4bCwgeGgpXG5cbiAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cbiAgICB2YXIgV2k3aCA9IFdbaSAtIDcgKiAyXVxuICAgIHZhciBXaTdsID0gV1tpIC0gNyAqIDIgKyAxXVxuXG4gICAgdmFyIFdpMTZoID0gV1tpIC0gMTYgKiAyXVxuICAgIHZhciBXaTE2bCA9IFdbaSAtIDE2ICogMiArIDFdXG5cbiAgICB2YXIgV2lsID0gKGdhbW1hMGwgKyBXaTdsKSB8IDBcbiAgICB2YXIgV2loID0gKGdhbW1hMCArIFdpN2ggKyBnZXRDYXJyeShXaWwsIGdhbW1hMGwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgZ2FtbWExbCkgfCAwXG4gICAgV2loID0gKFdpaCArIGdhbW1hMSArIGdldENhcnJ5KFdpbCwgZ2FtbWExbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBXaTE2bCkgfCAwXG4gICAgV2loID0gKFdpaCArIFdpMTZoICsgZ2V0Q2FycnkoV2lsLCBXaTE2bCkpIHwgMFxuXG4gICAgV1tpXSA9IFdpaFxuICAgIFdbaSArIDFdID0gV2lsXG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2MDsgaiArPSAyKSB7XG4gICAgV2loID0gV1tqXVxuICAgIFdpbCA9IFdbaiArIDFdXG5cbiAgICB2YXIgbWFqaCA9IG1haihhaCwgYmgsIGNoKVxuICAgIHZhciBtYWpsID0gbWFqKGFsLCBibCwgY2wpXG5cbiAgICB2YXIgc2lnbWEwaCA9IHNpZ21hMChhaCwgYWwpXG4gICAgdmFyIHNpZ21hMGwgPSBzaWdtYTAoYWwsIGFoKVxuICAgIHZhciBzaWdtYTFoID0gc2lnbWExKGVoLCBlbClcbiAgICB2YXIgc2lnbWExbCA9IHNpZ21hMShlbCwgZWgpXG5cbiAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbal0gKyBXW2pdXG4gICAgdmFyIEtpaCA9IEtbal1cbiAgICB2YXIgS2lsID0gS1tqICsgMV1cblxuICAgIHZhciBjaGggPSBDaChlaCwgZmgsIGdoKVxuICAgIHZhciBjaGwgPSBDaChlbCwgZmwsIGdsKVxuXG4gICAgdmFyIHQxbCA9IChobCArIHNpZ21hMWwpIHwgMFxuICAgIHZhciB0MWggPSAoaGggKyBzaWdtYTFoICsgZ2V0Q2FycnkodDFsLCBobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBjaGwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBjaGggKyBnZXRDYXJyeSh0MWwsIGNobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBLaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBLaWggKyBnZXRDYXJyeSh0MWwsIEtpbCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBXaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBXaWggKyBnZXRDYXJyeSh0MWwsIFdpbCkpIHwgMFxuXG4gICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcbiAgICB2YXIgdDJsID0gKHNpZ21hMGwgKyBtYWpsKSB8IDBcbiAgICB2YXIgdDJoID0gKHNpZ21hMGggKyBtYWpoICsgZ2V0Q2FycnkodDJsLCBzaWdtYTBsKSkgfCAwXG5cbiAgICBoaCA9IGdoXG4gICAgaGwgPSBnbFxuICAgIGdoID0gZmhcbiAgICBnbCA9IGZsXG4gICAgZmggPSBlaFxuICAgIGZsID0gZWxcbiAgICBlbCA9IChkbCArIHQxbCkgfCAwXG4gICAgZWggPSAoZGggKyB0MWggKyBnZXRDYXJyeShlbCwgZGwpKSB8IDBcbiAgICBkaCA9IGNoXG4gICAgZGwgPSBjbFxuICAgIGNoID0gYmhcbiAgICBjbCA9IGJsXG4gICAgYmggPSBhaFxuICAgIGJsID0gYWxcbiAgICBhbCA9ICh0MWwgKyB0MmwpIHwgMFxuICAgIGFoID0gKHQxaCArIHQyaCArIGdldENhcnJ5KGFsLCB0MWwpKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2FsID0gKHRoaXMuX2FsICsgYWwpIHwgMFxuICB0aGlzLl9ibCA9ICh0aGlzLl9ibCArIGJsKSB8IDBcbiAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gIHRoaXMuX2RsID0gKHRoaXMuX2RsICsgZGwpIHwgMFxuICB0aGlzLl9lbCA9ICh0aGlzLl9lbCArIGVsKSB8IDBcbiAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gIHRoaXMuX2dsID0gKHRoaXMuX2dsICsgZ2wpIHwgMFxuICB0aGlzLl9obCA9ICh0aGlzLl9obCArIGhsKSB8IDBcblxuICB0aGlzLl9haCA9ICh0aGlzLl9haCArIGFoICsgZ2V0Q2FycnkodGhpcy5fYWwsIGFsKSkgfCAwXG4gIHRoaXMuX2JoID0gKHRoaXMuX2JoICsgYmggKyBnZXRDYXJyeSh0aGlzLl9ibCwgYmwpKSB8IDBcbiAgdGhpcy5fY2ggPSAodGhpcy5fY2ggKyBjaCArIGdldENhcnJ5KHRoaXMuX2NsLCBjbCkpIHwgMFxuICB0aGlzLl9kaCA9ICh0aGlzLl9kaCArIGRoICsgZ2V0Q2FycnkodGhpcy5fZGwsIGRsKSkgfCAwXG4gIHRoaXMuX2VoID0gKHRoaXMuX2VoICsgZWggKyBnZXRDYXJyeSh0aGlzLl9lbCwgZWwpKSB8IDBcbiAgdGhpcy5fZmggPSAodGhpcy5fZmggKyBmaCArIGdldENhcnJ5KHRoaXMuX2ZsLCBmbCkpIHwgMFxuICB0aGlzLl9naCA9ICh0aGlzLl9naCArIGdoICsgZ2V0Q2FycnkodGhpcy5fZ2wsIGdsKSkgfCAwXG4gIHRoaXMuX2hoID0gKHRoaXMuX2hoICsgaGggKyBnZXRDYXJyeSh0aGlzLl9obCwgaGwpKSB8IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNjQpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuICB3cml0ZUludDY0QkUodGhpcy5fZ2gsIHRoaXMuX2dsLCA0OClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2hoLCB0aGlzLl9obCwgNTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGE1MTJcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIExlZ2FjeSA9IHJlcXVpcmUoJy4vbGVnYWN5JylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxuXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICB2YXIgaGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICAgIGtleSA9IGhhc2gudXBkYXRlKGtleSkuZGlnZXN0KClcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuICB0aGlzLl9oYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gIHRoaXMuX2hhc2gudXBkYXRlKGlwYWQpXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2FsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEodGhpcy5fYWxnKVxuICByZXR1cm4gaGFzaC51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyAoYWxnLCBrZXkpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykge1xuICAgIHJldHVybiBuZXcgSG1hYygncm1kMTYwJywga2V5KVxuICB9XG4gIGlmIChhbGcgPT09ICdtZDUnKSB7XG4gICAgcmV0dXJuIG5ldyBMZWdhY3kobWQ1LCBrZXkpXG4gIH1cbiAgcmV0dXJuIG5ldyBIbWFjKGFsZywga2V5KVxufVxuIiwidmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gbmV3IE1ENSgpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG59XG4iLCJleHBvcnRzLnBia2RmMiA9IHJlcXVpcmUoJy4vbGliL2FzeW5jJylcbmV4cG9ydHMucGJrZGYyU3luYyA9IHJlcXVpcmUoJy4vbGliL3N5bmMnKVxuIiwidmFyIE1BWF9BTExPQyA9IE1hdGgucG93KDIsIDMwKSAtIDEgLy8gZGVmYXVsdCBpbiBpb2pzXG5cbmZ1bmN0aW9uIGNoZWNrQnVmZmVyIChidWYsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBidWYgIT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IobmFtZSArICcgbXVzdCBiZSBhIGJ1ZmZlciBvciBzdHJpbmcnKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4pIHtcbiAgY2hlY2tCdWZmZXIocGFzc3dvcmQsICdQYXNzd29yZCcpXG4gIGNoZWNrQnVmZmVyKHNhbHQsICdTYWx0JylcblxuICBpZiAodHlwZW9mIGl0ZXJhdGlvbnMgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSXRlcmF0aW9ucyBub3QgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKGl0ZXJhdGlvbnMgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGl0ZXJhdGlvbnMnKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBrZXlsZW4gIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignS2V5IGxlbmd0aCBub3QgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKGtleWxlbiA8IDAgfHwga2V5bGVuID4gTUFYX0FMTE9DIHx8IGtleWxlbiAhPT0ga2V5bGVuKSB7IC8qIGVzbGludCBuby1zZWxmLWNvbXBhcmU6IDAgKi9cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQga2V5IGxlbmd0aCcpXG4gIH1cbn1cbiIsInZhciBkZWZhdWx0RW5jb2Rpbmdcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gIGRlZmF1bHRFbmNvZGluZyA9ICd1dGYtOCdcbn0gZWxzZSB7XG4gIHZhciBwVmVyc2lvbk1ham9yID0gcGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMF0uc2xpY2UoMSksIDEwKVxuXG4gIGRlZmF1bHRFbmNvZGluZyA9IHBWZXJzaW9uTWFqb3IgPj0gNiA/ICd1dGYtOCcgOiAnYmluYXJ5J1xufVxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0RW5jb2RpbmdcbiIsInZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIHNpemVzID0ge1xuICBtZDU6IDE2LFxuICBzaGExOiAyMCxcbiAgc2hhMjI0OiAyOCxcbiAgc2hhMjU2OiAzMixcbiAgc2hhMzg0OiA0OCxcbiAgc2hhNTEyOiA2NCxcbiAgcm1kMTYwOiAyMCxcbiAgcmlwZW1kMTYwOiAyMFxufVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSwgc2FsdExlbikge1xuICB2YXIgaGFzaCA9IGdldERpZ2VzdChhbGcpXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBoYXNoKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNpemVzW2FsZ10pXG4gIHZhciBvcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNpemVzW2FsZ10pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB2YXIgaXBhZDEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2FsdExlbiArIDQpXG4gIGlwYWQuY29weShpcGFkMSwgMCwgMCwgYmxvY2tzaXplKVxuICB0aGlzLmlwYWQxID0gaXBhZDFcbiAgdGhpcy5pcGFkMiA9IGlwYWRcbiAgdGhpcy5vcGFkID0gb3BhZFxuICB0aGlzLmFsZyA9IGFsZ1xuICB0aGlzLmJsb2Nrc2l6ZSA9IGJsb2Nrc2l6ZVxuICB0aGlzLmhhc2ggPSBoYXNoXG4gIHRoaXMuc2l6ZSA9IHNpemVzW2FsZ11cbn1cblxuSG1hYy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGRhdGEsIGlwYWQpIHtcbiAgZGF0YS5jb3B5KGlwYWQsIHRoaXMuYmxvY2tzaXplKVxuICB2YXIgaCA9IHRoaXMuaGFzaChpcGFkKVxuICBoLmNvcHkodGhpcy5vcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgcmV0dXJuIHRoaXMuaGFzaCh0aGlzLm9wYWQpXG59XG5cbmZ1bmN0aW9uIGdldERpZ2VzdCAoYWxnKSB7XG4gIGZ1bmN0aW9uIHNoYUZ1bmMgKGRhdGEpIHtcbiAgICByZXR1cm4gc2hhKGFsZykudXBkYXRlKGRhdGEpLmRpZ2VzdCgpXG4gIH1cbiAgZnVuY3Rpb24gcm1kMTYwRnVuYyAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCkudXBkYXRlKGRhdGEpLmRpZ2VzdCgpXG4gIH1cblxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gcm1kMTYwRnVuY1xuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNVxuICByZXR1cm4gc2hhRnVuY1xufVxuXG5mdW5jdGlvbiBwYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkge1xuICBjaGVja1BhcmFtZXRlcnMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbilcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCBkZWZhdWx0RW5jb2RpbmcpXG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuXG4gIHZhciBobWFjID0gbmV3IEhtYWMoZGlnZXN0LCBwYXNzd29yZCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIERLID0gQnVmZmVyLmFsbG9jVW5zYWZlKGtleWxlbilcbiAgdmFyIGJsb2NrMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciBkZXN0UG9zID0gMFxuICB2YXIgaExlbiA9IHNpemVzW2RpZ2VzdF1cbiAgdmFyIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICBibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aClcblxuICAgIHZhciBUID0gaG1hYy5ydW4oYmxvY2sxLCBobWFjLmlwYWQxKVxuICAgIHZhciBVID0gVFxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBobWFjLnJ1bihVLCBobWFjLmlwYWQyKVxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBoTGVuOyBrKyspIFRba10gXj0gVVtrXVxuICAgIH1cblxuICAgIFQuY29weShESywgZGVzdFBvcylcbiAgICBkZXN0UG9zICs9IGhMZW5cbiAgfVxuXG4gIHJldHVybiBES1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBia2RmMlxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBDaXBoZXIgPSByZXF1aXJlKCcuL2NpcGhlcicpO1xuXG5mdW5jdGlvbiBERVNTdGF0ZSgpIHtcbiAgdGhpcy50bXAgPSBuZXcgQXJyYXkoMik7XG4gIHRoaXMua2V5cyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIERFUyhvcHRpb25zKSB7XG4gIENpcGhlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHZhciBzdGF0ZSA9IG5ldyBERVNTdGF0ZSgpO1xuICB0aGlzLl9kZXNTdGF0ZSA9IHN0YXRlO1xuXG4gIHRoaXMuZGVyaXZlS2V5cyhzdGF0ZSwgb3B0aW9ucy5rZXkpO1xufVxuaW5oZXJpdHMoREVTLCBDaXBoZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBERVM7XG5cbkRFUy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IERFUyhvcHRpb25zKTtcbn07XG5cbnZhciBzaGlmdFRhYmxlID0gW1xuICAxLCAxLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAxLCAyLCAyLCAyLCAyLCAyLCAyLCAxXG5dO1xuXG5ERVMucHJvdG90eXBlLmRlcml2ZUtleXMgPSBmdW5jdGlvbiBkZXJpdmVLZXlzKHN0YXRlLCBrZXkpIHtcbiAgc3RhdGUua2V5cyA9IG5ldyBBcnJheSgxNiAqIDIpO1xuXG4gIGFzc2VydC5lcXVhbChrZXkubGVuZ3RoLCB0aGlzLmJsb2NrU2l6ZSwgJ0ludmFsaWQga2V5IGxlbmd0aCcpO1xuXG4gIHZhciBrTCA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDApO1xuICB2YXIga1IgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCA0KTtcblxuICB1dGlscy5wYzEoa0wsIGtSLCBzdGF0ZS50bXAsIDApO1xuICBrTCA9IHN0YXRlLnRtcFswXTtcbiAga1IgPSBzdGF0ZS50bXBbMV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUua2V5cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBzaGlmdCA9IHNoaWZ0VGFibGVbaSA+Pj4gMV07XG4gICAga0wgPSB1dGlscy5yMjhzaGwoa0wsIHNoaWZ0KTtcbiAgICBrUiA9IHV0aWxzLnIyOHNobChrUiwgc2hpZnQpO1xuICAgIHV0aWxzLnBjMihrTCwga1IsIHN0YXRlLmtleXMsIGkpO1xuICB9XG59O1xuXG5ERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Rlc1N0YXRlO1xuXG4gIHZhciBsID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYpO1xuICB2YXIgciA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmICsgNCk7XG5cbiAgLy8gSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5pcChsLCByLCBzdGF0ZS50bXAsIDApO1xuICBsID0gc3RhdGUudG1wWzBdO1xuICByID0gc3RhdGUudG1wWzFdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICB0aGlzLl9lbmNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuICBlbHNlXG4gICAgdGhpcy5fZGVjcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcblxuICBsID0gc3RhdGUudG1wWzBdO1xuICByID0gc3RhdGUudG1wWzFdO1xuXG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCBsLCBvdXRPZmYpO1xuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgciwgb3V0T2ZmICsgNCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBfcGFkKGJ1ZmZlciwgb2ZmKSB7XG4gIHZhciB2YWx1ZSA9IGJ1ZmZlci5sZW5ndGggLSBvZmY7XG4gIGZvciAodmFyIGkgPSBvZmY7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYnVmZmVyW2ldID0gdmFsdWU7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5ERVMucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgdmFyIHBhZCA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV07XG4gIGZvciAodmFyIGkgPSBidWZmZXIubGVuZ3RoIC0gcGFkOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGFzc2VydC5lcXVhbChidWZmZXJbaV0sIHBhZCk7XG5cbiAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBidWZmZXIubGVuZ3RoIC0gcGFkKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2VuY3J5cHQgPSBmdW5jdGlvbiBfZW5jcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gbFN0YXJ0O1xuICB2YXIgciA9IHJTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUua2V5cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChyLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gcjtcbiAgICByID0gKGwgXiBmKSA+Pj4gMDtcbiAgICBsID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAociwgbCwgb3V0LCBvZmYpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZGVjcnlwdCA9IGZ1bmN0aW9uIF9kZWNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSByU3RhcnQ7XG4gIHZhciByID0gbFN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IHN0YXRlLmtleXMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQobCwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IGw7XG4gICAgbCA9IChyIF4gZikgPj4+IDA7XG4gICAgciA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKGwsIHIsIG91dCwgb2ZmKTtcbn07XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY3IzMlxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4vaW5jcjMyJylcblxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSBvdXQrK1xuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBjYWxjSXYgKHNlbGYsIGl2LCBjaykge1xuICBpZiAoaXYubGVuZ3RoID09PSAxMikge1xuICAgIHNlbGYuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSldKVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDJdKV0pXG4gIH1cbiAgdmFyIGdoYXNoID0gbmV3IEdIQVNIKGNrKVxuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciB0b1BhZCA9IGxlbiAlIDE2XG4gIGdoYXNoLnVwZGF0ZShpdilcbiAgaWYgKHRvUGFkKSB7XG4gICAgdG9QYWQgPSAxNiAtIHRvUGFkXG4gICAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyh0b1BhZCwgMCkpXG4gIH1cbiAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyg4LCAwKSlcbiAgdmFyIGl2Qml0cyA9IGxlbiAqIDhcbiAgdmFyIHRhaWwgPSBCdWZmZXIuYWxsb2MoOClcbiAgdGFpbC53cml0ZVVJbnRCRShpdkJpdHMsIDAsIDgpXG4gIGdoYXNoLnVwZGF0ZSh0YWlsKVxuICBzZWxmLl9maW5JRCA9IGdoYXNoLnN0YXRlXG4gIHZhciBvdXQgPSBCdWZmZXIuZnJvbShzZWxmLl9maW5JRClcbiAgaW5jcjMyKG91dClcbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdmFyIGggPSBCdWZmZXIuYWxsb2MoNCwgMClcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIGl2ID0gY2FsY0l2KHRoaXMsIGl2LCBjaylcblxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fbW9kZSA9IG1vZGVcblxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gQnVmZmVyLmFsbG9jKHJ1bXAsIDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cblxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgfHwgIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuXG4gIHZhciBudW0sIG4yO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbnVtID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAobnVtLmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgbnVtLmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAobnVtLmlzRXZlbigpKSB7XG4gICAgICBudW0uaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW51bS50ZXN0bigxKSkge1xuICAgICAgbnVtLmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRFTikuY21wKFRIUkVFKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbjIgPSBudW0uc2hybigxKTtcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmIGZlcm1hdFRlc3QobnVtKSAmJlxuICAgICAgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgfVxuXG59XG4iLCJ2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGJyb3JhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5cbmZ1bmN0aW9uIE1pbGxlclJhYmluKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZCB8fCBuZXcgYnJvcmFuZC5SYW5kKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxlclJhYmluO1xuXG5NaWxsZXJSYWJpbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmFuZCkge1xuICByZXR1cm4gbmV3IE1pbGxlclJhYmluKHJhbmQpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kYmVsb3cgPSBmdW5jdGlvbiBfcmFuZGJlbG93KG4pIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciBtaW5fYnl0ZXMgPSBNYXRoLmNlaWwobGVuIC8gOCk7XG5cbiAgLy8gR2VuZXJhZ2UgcmFuZG9tIGJ5dGVzIHVudGlsIGEgbnVtYmVyIGxlc3MgdGhhbiBuIGlzIGZvdW5kLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCAwLi5uLTEgaGF2ZSBhbiBlcXVhbCBwcm9iYWJpbGl0eSBvZiBiZWluZyBzZWxlY3RlZC5cbiAgZG9cbiAgICB2YXIgYSA9IG5ldyBibih0aGlzLnJhbmQuZ2VuZXJhdGUobWluX2J5dGVzKSk7XG4gIHdoaWxlIChhLmNtcChuKSA+PSAwKTtcblxuICByZXR1cm4gYTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZHJhbmdlID0gZnVuY3Rpb24gX3JhbmRyYW5nZShzdGFydCwgc3RvcCkge1xuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHN0YXJ0IGFuZCBsZXNzIHRoYW4gc3RvcC5cbiAgdmFyIHNpemUgPSBzdG9wLnN1YihzdGFydCk7XG4gIHJldHVybiBzdGFydC5hZGQodGhpcy5fcmFuZGJlbG93KHNpemUpKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICB2YXIgcHJpbWUgPSB0cnVlO1xuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuICAgIGlmIChjYilcbiAgICAgIGNiKGEpO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHByaW1lO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLmdldERpdmlzb3IgPSBmdW5jdGlvbiBnZXREaXZpc29yKG4sIGspIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcblxuICAgIHZhciBnID0gbi5nY2QoYSk7XG4gICAgaWYgKGcuY21wbigxKSAhPT0gMClcbiAgICAgIHJldHVybiBnO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcbiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgIGlmIChoaSlcbiAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xuXG5mdW5jdGlvbiBmdF8xKHMsIHgsIHksIHopIHtcbiAgaWYgKHMgPT09IDApXG4gICAgcmV0dXJuIGNoMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAxIHx8IHMgPT09IDMpXG4gICAgcmV0dXJuIHAzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDIpXG4gICAgcmV0dXJuIG1hajMyKHgsIHksIHopO1xufVxuZXhwb3J0cy5mdF8xID0gZnRfMTtcblxuZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKCh+eCkgJiB6KTtcbn1cbmV4cG9ydHMuY2gzMiA9IGNoMzI7XG5cbmZ1bmN0aW9uIG1hajMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KTtcbn1cbmV4cG9ydHMubWFqMzIgPSBtYWozMjtcblxuZnVuY3Rpb24gcDMyKHgsIHksIHopIHtcbiAgcmV0dXJuIHggXiB5IF4gejtcbn1cbmV4cG9ydHMucDMyID0gcDMyO1xuXG5mdW5jdGlvbiBzMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDIpIF4gcm90cjMyKHgsIDEzKSBeIHJvdHIzMih4LCAyMik7XG59XG5leHBvcnRzLnMwXzI1NiA9IHMwXzI1NjtcblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuZXhwb3J0cy5zMV8yNTYgPSBzMV8yNTY7XG5cbmZ1bmN0aW9uIGcwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNykgXiByb3RyMzIoeCwgMTgpIF4gKHggPj4+IDMpO1xufVxuZXhwb3J0cy5nMF8yNTYgPSBnMF8yNTY7XG5cbmZ1bmN0aW9uIGcxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeICh4ID4+PiAxMCk7XG59XG5leHBvcnRzLmcxXzI1NiA9IGcxXzI1NjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgY2gzMiA9IHNoYUNvbW1vbi5jaDMyO1xudmFyIG1hajMyID0gc2hhQ29tbW9uLm1hajMyO1xudmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7XG52YXIgczFfMjU2ID0gc2hhQ29tbW9uLnMxXzI1NjtcbnZhciBnMF8yNTYgPSBzaGFDb21tb24uZzBfMjU2O1xudmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMjU2X0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsIDB4MTI4MzViMDEsIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsIDB4MmUxYjIxMzgsIDB4NGQyYzZkZmMsIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZiwgMHg5YjA1Njg4YywgMHgxZjgzZDlhYiwgMHg1YmUwY2QxOVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjU2O1xuXG5TSEEyNTYuYmxvY2tTaXplID0gNTEyO1xuU0hBMjU2Lm91dFNpemUgPSAyNTY7XG5TSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIHZhciBmID0gdGhpcy5oWzVdO1xuICB2YXIgZyA9IHRoaXMuaFs2XTtcbiAgdmFyIGggPSB0aGlzLmhbN107XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgcm90cjY0X2hpID0gdXRpbHMucm90cjY0X2hpO1xudmFyIHJvdHI2NF9sbyA9IHV0aWxzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzLnNocjY0X2hpO1xudmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87XG52YXIgc3VtNjQgPSB1dGlscy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzLnN1bTY0X2hpO1xudmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87XG52YXIgc3VtNjRfNF9oaSA9IHV0aWxzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzLnN1bTY0XzRfbG87XG52YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0XzVfaGk7XG52YXIgc3VtNjRfNV9sbyA9IHV0aWxzLnN1bTY0XzVfbG87XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgsXG4gICAgMHhiYjY3YWU4NSwgMHg4NGNhYTczYixcbiAgICAweDNjNmVmMzcyLCAweGZlOTRmODJiLFxuICAgIDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEsXG4gICAgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSxcbiAgICAweDliMDU2ODhjLCAweDJiM2U2YzFmLFxuICAgIDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIsXG4gICAgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscy5pbmhlcml0cyhTSEE1MTIsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTUxMjtcblxuU0hBNTEyLmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEE1MTIub3V0U2l6ZSA9IDUxMjtcblNIQTUxMi5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2sgPSBmdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgLy8gMzIgeCAzMmJpdCB3b3Jkc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgIC8vIGkgLSAyXG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdOyAgLy8gaSAtIDdcbiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107XG4gICAgdmFyIGMyX2hpID0gZzBfNTEyX2hpKFdbaSAtIDMwXSwgV1tpIC0gMjldKTsgIC8vIGkgLSAxNVxuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAgLy8gaSAtIDE2XG4gICAgdmFyIGMzX2xvID0gV1tpIC0gMzFdO1xuXG4gICAgV1tpXSA9IHN1bTY0XzRfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoeGggJiB6aCkgXiAoeWggJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICh4bCAmIHpsKSBeICh5bCAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG5mdW5jdGlvbiBEZWNvZGVyQnVmZmVyKGJhc2UsIG9wdGlvbnMpIHtcbiAgUmVwb3J0ZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYmFzZSkpIHtcbiAgICB0aGlzLmVycm9yKCdJbnB1dCBub3QgQnVmZmVyJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5iYXNlID0gYmFzZTtcbiAgdGhpcy5vZmZzZXQgPSAwO1xuICB0aGlzLmxlbmd0aCA9IGJhc2UubGVuZ3RoO1xufVxuaW5oZXJpdHMoRGVjb2RlckJ1ZmZlciwgUmVwb3J0ZXIpO1xuZXhwb3J0cy5EZWNvZGVyQnVmZmVyID0gRGVjb2RlckJ1ZmZlcjtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHJldHVybiB7IG9mZnNldDogdGhpcy5vZmZzZXQsIHJlcG9ydGVyOiBSZXBvcnRlci5wcm90b3R5cGUuc2F2ZS5jYWxsKHRoaXMpIH07XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShzYXZlKSB7XG4gIC8vIFJldHVybiBza2lwcGVkIGRhdGFcbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG4gIHJlcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgcmVzLmxlbmd0aCA9IHRoaXMub2Zmc2V0O1xuXG4gIHRoaXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIFJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlLmNhbGwodGhpcywgc2F2ZS5yZXBvcnRlcik7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICByZXR1cm4gdGhpcy5vZmZzZXQgPT09IHRoaXMubGVuZ3RoO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4KGZhaWwpIHtcbiAgaWYgKHRoaXMub2Zmc2V0ICsgMSA8PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm4gdGhpcy5iYXNlLnJlYWRVSW50OCh0aGlzLm9mZnNldCsrLCB0cnVlKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xufVxuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24gc2tpcChieXRlcywgZmFpbCkge1xuICBpZiAoISh0aGlzLm9mZnNldCArIGJ5dGVzIDw9IHRoaXMubGVuZ3RoKSlcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcblxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcblxuICAvLyBTaGFyZSByZXBvcnRlciBzdGF0ZVxuICByZXMuX3JlcG9ydGVyU3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJlcy5vZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgcmVzLmxlbmd0aCA9IHRoaXMub2Zmc2V0ICsgYnl0ZXM7XG4gIHRoaXMub2Zmc2V0ICs9IGJ5dGVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbiByYXcoc2F2ZSkge1xuICByZXR1cm4gdGhpcy5iYXNlLnNsaWNlKHNhdmUgPyBzYXZlLm9mZnNldCA6IHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIEVuY29kZXJCdWZmZXIodmFsdWUsIHJlcG9ydGVyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBFbmNvZGVyQnVmZmVyKSlcbiAgICAgICAgaXRlbSA9IG5ldyBFbmNvZGVyQnVmZmVyKGl0ZW0sIHJlcG9ydGVyKTtcbiAgICAgIHRoaXMubGVuZ3RoICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSwgdGhpcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmICghKDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMHhmZikpXG4gICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ25vbi1ieXRlIEVuY29kZXJCdWZmZXIgdmFsdWUnKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vuc3VwcG9ydGVkIHR5cGU6ICcgKyB0eXBlb2YgdmFsdWUpO1xuICB9XG59XG5leHBvcnRzLkVuY29kZXJCdWZmZXIgPSBFbmNvZGVyQnVmZmVyO1xuXG5FbmNvZGVyQnVmZmVyLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihvdXQsIG9mZnNldCkge1xuICBpZiAoIW91dClcbiAgICBvdXQgPSBuZXcgQnVmZmVyKHRoaXMubGVuZ3RoKTtcbiAgaWYgKCFvZmZzZXQpXG4gICAgb2Zmc2V0ID0gMDtcblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG91dDtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgIHRoaXMudmFsdWUuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmpvaW4ob3V0LCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGl0ZW0ubGVuZ3RoO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICBvdXRbb2Zmc2V0XSA9IHRoaXMudmFsdWU7XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgb3V0LndyaXRlKHRoaXMudmFsdWUsIG9mZnNldCk7XG4gICAgZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHRoaXMudmFsdWUpKVxuICAgICAgdGhpcy52YWx1ZS5jb3B5KG91dCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbiIsInZhciBjb25zdGFudHMgPSBleHBvcnRzO1xuXG4vLyBIZWxwZXJcbmNvbnN0YW50cy5fcmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UobWFwKSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIHZhciB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5jb25zdGFudHMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG52YXIgYmlnbnVtID0gYXNuMS5iaWdudW07XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJEZWNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRGVjb2RlcjtcblxuREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIGJhc2UuRGVjb2RlckJ1ZmZlcikpXG4gICAgZGF0YSA9IG5ldyBiYXNlLkRlY29kZXJCdWZmZXIoZGF0YSwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRoaXMudHJlZS5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgaWYgKGJ1ZmZlci5pc0VtcHR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgJ0ZhaWxlZCB0byBwZWVrIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG5cbiAgcmV0dXJuIGRlY29kZWRUYWcudGFnID09PSB0YWcgfHwgZGVjb2RlZFRhZy50YWdTdHIgPT09IHRhZyB8fFxuICAgIChkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicpID09PSB0YWcgfHwgYW55O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRhZyA9IGZ1bmN0aW9uIGRlY29kZVRhZyhidWZmZXIsIHRhZywgYW55KSB7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBkZWNvZGUgdGFnIG9mIFwiJyArIHRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IoZGVjb2RlZFRhZykpXG4gICAgcmV0dXJuIGRlY29kZWRUYWc7XG5cbiAgdmFyIGxlbiA9IGRlckRlY29kZUxlbihidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlZFRhZy5wcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgbGVuZ3RoIG9mIFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEZhaWx1cmVcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgcmV0dXJuIGxlbjtcblxuICBpZiAoIWFueSAmJlxuICAgICAgZGVjb2RlZFRhZy50YWcgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgKyAnb2YnICE9PSB0YWcpIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdGYWlsZWQgdG8gbWF0Y2ggdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgfVxuXG4gIGlmIChkZWNvZGVkVGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcblxuICAvLyBJbmRlZmluaXRlIGxlbmd0aC4uLiBmaW5kIEVORCB0YWdcbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChcbiAgICAgIGJ1ZmZlcixcbiAgICAgICdGYWlsZWQgdG8gc2tpcCBpbmRlZmluaXRlIGxlbmd0aCBib2R5OiBcIicgKyB0aGlzLnRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGxlbiA9IGJ1ZmZlci5vZmZzZXQgLSBzdGF0ZS5vZmZzZXQ7XG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcbiAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwVW50aWxFbmQgPSBmdW5jdGlvbiBza2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcih0YWcpKVxuICAgICAgcmV0dXJuIHRhZztcbiAgICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlciwgdGFnLnByaW1pdGl2ZSwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgICByZXR1cm4gbGVuO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgICByZXMgPSBidWZmZXIuc2tpcChsZW4pXG4gICAgZWxzZVxuICAgICAgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCk7XG5cbiAgICAvLyBGYWlsdXJlXG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgICByZXR1cm4gcmVzO1xuXG4gICAgaWYgKHRhZy50YWdTdHIgPT09ICdlbmQnKVxuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVMaXN0ID0gZnVuY3Rpb24gZGVjb2RlTGlzdChidWZmZXIsIHRhZywgZGVjb2RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHBvc3NpYmxlRW5kID0gdGhpcy5fcGVla1RhZyhidWZmZXIsICdlbmQnKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocG9zc2libGVFbmQpKVxuICAgICAgcmV0dXJuIHBvc3NpYmxlRW5kO1xuXG4gICAgdmFyIHJlcyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlciwgJ2RlcicsIG9wdGlvbnMpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpICYmIHBvc3NpYmxlRW5kKVxuICAgICAgYnJlYWs7XG4gICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVN0ciA9IGZ1bmN0aW9uIGRlY29kZVN0cihidWZmZXIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHZhciB1bnVzZWQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHVudXNlZCkpXG4gICAgICByZXR1cm4gdW51c2VkO1xuICAgIHJldHVybiB7IHVudXNlZDogdW51c2VkLCBkYXRhOiBidWZmZXIucmF3KCkgfTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIHJhdyA9IGJ1ZmZlci5yYXcoKTtcbiAgICBpZiAocmF3Lmxlbmd0aCAlIDIgPT09IDEpXG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogYm1wc3RyIGxlbmd0aCBtaXNtYXRjaCcpO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Lmxlbmd0aCAvIDI7IGkrKykge1xuICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocmF3LnJlYWRVSW50MTZCRShpICogMikpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICB2YXIgbnVtc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIobnVtc3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtc3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bXN0cjtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvY3RzdHInKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgdmFyIHByaW50c3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihwcmludHN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW50c3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50c3RyO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgKyAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVPYmppZCA9IGZ1bmN0aW9uIGRlY29kZU9iamlkKGJ1ZmZlciwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgdmFyIGlkZW50ID0gMDtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHN1YmlkZW50ID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICAgIGlkZW50IDw8PSA3O1xuICAgIGlkZW50IHw9IHN1YmlkZW50ICYgMHg3ZjtcbiAgICBpZiAoKHN1YmlkZW50ICYgMHg4MCkgPT09IDApIHtcbiAgICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuICAgICAgaWRlbnQgPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc3ViaWRlbnQgJiAweDgwKVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuXG4gIHZhciBmaXJzdCA9IChpZGVudGlmaWVyc1swXSAvIDQwKSB8IDA7XG4gIHZhciBzZWNvbmQgPSBpZGVudGlmaWVyc1swXSAlIDQwO1xuXG4gIGlmIChyZWxhdGl2ZSlcbiAgICByZXN1bHQgPSBpZGVudGlmaWVycztcbiAgZWxzZVxuICAgIHJlc3VsdCA9IFtmaXJzdCwgc2Vjb25kXS5jb25jYXQoaWRlbnRpZmllcnMuc2xpY2UoMSkpO1xuXG4gIGlmICh2YWx1ZXMpIHtcbiAgICB2YXIgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcgJyldO1xuICAgIGlmICh0bXAgPT09IHVuZGVmaW5lZClcbiAgICAgIHRtcCA9IHZhbHVlc1tyZXN1bHQuam9pbignLicpXTtcbiAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpXG4gICAgICByZXN1bHQgPSB0bXA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRpbWUgPSBmdW5jdGlvbiBkZWNvZGVUaW1lKGJ1ZmZlciwgdGFnKSB7XG4gIHZhciBzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgNCkgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIG1pbiA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEyLCAxNCkgfCAwO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgMikgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoMiwgNCkgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDYsIDgpIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIHNlYyA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICBpZiAoeWVhciA8IDcwKVxuICAgICAgeWVhciA9IDIwMDAgKyB5ZWFyO1xuICAgIGVsc2VcbiAgICAgIHllYXIgPSAxOTAwICsgeWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5VVEMoeWVhciwgbW9uIC0gMSwgZGF5LCBob3VyLCBtaW4sIHNlYywgMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTnVsbCA9IGZ1bmN0aW9uIGRlY29kZU51bGwoYnVmZmVyKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUJvb2wgPSBmdW5jdGlvbiBkZWNvZGVCb29sKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcyAhPT0gMDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnVmZmVyLCB2YWx1ZXMpIHtcbiAgLy8gQmlnaW50LCByZXR1cm4gYXMgaXQgaXMgKGFzc3VtZSBiaWcgZW5kaWFuKVxuICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICB2YXIgcmVzID0gbmV3IGJpZ251bShyYXcpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzID0gdmFsdWVzW3Jlcy50b1N0cmluZygxMCldIHx8IHJlcztcblxuICByZXR1cm4gcmVzO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RGVjb2RlcignZGVyJykudHJlZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBkZXJEZWNvZGVUYWcoYnVmLCBmYWlsKSB7XG4gIHZhciB0YWcgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IodGFnKSlcbiAgICByZXR1cm4gdGFnO1xuXG4gIHZhciBjbHMgPSBkZXIudGFnQ2xhc3NbdGFnID4+IDZdO1xuICB2YXIgcHJpbWl0aXZlID0gKHRhZyAmIDB4MjApID09PSAwO1xuXG4gIC8vIE11bHRpLW9jdGV0IHRhZyAtIGxvYWRcbiAgaWYgKCh0YWcgJiAweDFmKSA9PT0gMHgxZikge1xuICAgIHZhciBvY3QgPSB0YWc7XG4gICAgdGFnID0gMDtcbiAgICB3aGlsZSAoKG9jdCAmIDB4ODApID09PSAweDgwKSB7XG4gICAgICBvY3QgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgICAgaWYgKGJ1Zi5pc0Vycm9yKG9jdCkpXG4gICAgICAgIHJldHVybiBvY3Q7XG5cbiAgICAgIHRhZyA8PD0gNztcbiAgICAgIHRhZyB8PSBvY3QgJiAweDdmO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YWcgJj0gMHgxZjtcbiAgfVxuICB2YXIgdGFnU3RyID0gZGVyLnRhZ1t0YWddO1xuXG4gIHJldHVybiB7XG4gICAgY2xzOiBjbHMsXG4gICAgcHJpbWl0aXZlOiBwcmltaXRpdmUsXG4gICAgdGFnOiB0YWcsXG4gICAgdGFnU3RyOiB0YWdTdHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVyRGVjb2RlTGVuKGJ1ZiwgcHJpbWl0aXZlLCBmYWlsKSB7XG4gIHZhciBsZW4gPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIC8vIEluZGVmaW5pdGUgZm9ybVxuICBpZiAoIXByaW1pdGl2ZSAmJiBsZW4gPT09IDB4ODApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGVmaW5pdGUgZm9ybVxuICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgLy8gU2hvcnQgZm9ybVxuICAgIHJldHVybiBsZW47XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgdmFyIG51bSA9IGxlbiAmIDB4N2Y7XG4gIGlmIChudW0gPiA0KVxuICAgIHJldHVybiBidWYuZXJyb3IoJ2xlbmd0aCBvY3RlY3QgaXMgdG9vIGxvbmcnKTtcblxuICBsZW4gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgbGVuIDw8PSA4O1xuICAgIHZhciBqID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICBpZiAoYnVmLmlzRXJyb3IoaikpXG4gICAgICByZXR1cm4gajtcbiAgICBsZW4gfD0gajtcbiAgfVxuXG4gIHJldHVybiBsZW47XG59XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQpIHtcbiAgdmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7XG5cbiAgLy8gU2hvcnQgZm9ybVxuICBpZiAoY29udGVudC5sZW5ndGggPCAweDgwKSB7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIHZhciBsZW5PY3RldHMgPSAxO1xuICBmb3IgKHZhciBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAodmFyIGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIHZhciBidWYgPSBuZXcgQnVmZmVyKHN0ci5sZW5ndGggKiAyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoc3RyLmNoYXJDb2RlQXQoaSksIGkgKiAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoYnVmKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IG51bXN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGRpZ2l0cyBhbmQgc3BhY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBwcmludHN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGxhdGluIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnMsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpZ2l0cywgc3BhY2UsIGFwb3N0cm9waGUsIGxlZnQgYW5kIHJpZ3RoICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudGhlc2lzLCBwbHVzIHNpZ24sIGNvbW1hLCBoeXBoZW4sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvdCwgc2xhc2gsIGNvbG9uLCBlcXVhbCBzaWduLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWVzdGlvbiBtYXJrJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlT2JqaWQgPSBmdW5jdGlvbiBlbmNvZGVPYmppZChpZCwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ3N0cmluZyBvYmppZCBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAgZm91bmQnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpZCkpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQgbm90IGZvdW5kIGluIHZhbHVlcyBtYXAnKTtcbiAgICBpZCA9IHZhbHVlc1tpZF0uc3BsaXQoL1tcXHNcXC5dKy9nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlkID0gaWQuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdDogJyArIEpTT04uc3RyaW5naWZ5KGlkKSk7XG4gIH1cblxuICBpZiAoIXJlbGF0aXZlKSB7XG4gICAgaWYgKGlkWzFdID49IDQwKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1NlY29uZCBvYmppZCBpZGVudGlmaWVyIE9PQicpO1xuICAgIGlkLnNwbGljZSgwLCAyLCBpZFswXSAqIDQwICsgaWRbMV0pO1xuICB9XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIG9jdGV0c1xuICB2YXIgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpXG4gICAgICBzaXplKys7XG4gIH1cblxuICB2YXIgb2JqaWQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICB2YXIgb2Zmc2V0ID0gb2JqaWQubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgaSA9IGlkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgb2JqaWRbb2Zmc2V0LS1dID0gaWRlbnQgJiAweDdmO1xuICAgIHdoaWxlICgoaWRlbnQgPj49IDcpID4gMClcbiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCAoaWRlbnQgJiAweDdmKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG9iamlkKTtcbn07XG5cbmZ1bmN0aW9uIHR3byhudW0pIHtcbiAgaWYgKG51bSA8IDEwKVxuICAgIHJldHVybiAnMCcgKyBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gbnVtO1xufVxuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlVGltZSA9IGZ1bmN0aW9uIGVuY29kZVRpbWUodGltZSwgdGFnKSB7XG4gIHZhciBzdHI7XG4gIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7XG5cbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpICUgMTAwKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKHN0ciwgJ29jdHN0cicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU51bGwgPSBmdW5jdGlvbiBlbmNvZGVOdWxsKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignVmFsdWVzIG1hcCBkb2VzblxcJ3QgY29udGFpbjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShudW0pKTtcbiAgICB9XG4gICAgbnVtID0gdmFsdWVzW251bV07XG4gIH1cblxuICAvLyBCaWdudW0sIGFzc3VtZSBiaWcgZW5kaWFuXG4gIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgbnVtQXJyYXkgPSBudW0udG9BcnJheSgpO1xuICAgIGlmICghbnVtLnNpZ24gJiYgbnVtQXJyYXlbMF0gJiAweDgwKSB7XG4gICAgICBudW1BcnJheS51bnNoaWZ0KDApO1xuICAgIH1cbiAgICBudW0gPSBuZXcgQnVmZmVyKG51bUFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBzaXplID0gbnVtLmxlbmd0aDtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIHNpemUrKztcblxuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICAgIG51bS5jb3B5KG91dCk7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBvdXRbMF0gPSAwXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob3V0KTtcbiAgfVxuXG4gIGlmIChudW0gPCAweDgwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG51bSk7XG5cbiAgaWYgKG51bSA8IDB4MTAwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFswLCBudW1dKTtcblxuICB2YXIgc2l6ZSA9IDE7XG4gIGZvciAodmFyIGkgPSBudW07IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgc2l6ZSsrO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGZvciAodmFyIGkgPSBvdXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBvdXRbaV0gPSBudW0gJiAweGZmO1xuICAgIG51bSA+Pj0gODtcbiAgfVxuICBpZihvdXRbMF0gJiAweDgwKSB7XG4gICAgb3V0LnVuc2hpZnQoMCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihuZXcgQnVmZmVyKG91dCkpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUJvb2wgPSBmdW5jdGlvbiBlbmNvZGVCb29sKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHZhbHVlID8gMHhmZiA6IDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RW5jb2RlcignZGVyJykudHJlZTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwRGVmYXVsdCA9IGZ1bmN0aW9uIHNraXBEZWZhdWx0KGRhdGFCdWZmZXIsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgaTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkYXRhID0gZGF0YUJ1ZmZlci5qb2luKCk7XG4gIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgc3RhdGUuZGVmYXVsdEJ1ZmZlciA9IHRoaXMuX2VuY29kZVZhbHVlKHN0YXRlWydkZWZhdWx0J10sIHJlcG9ydGVyLCBwYXJlbnQpLmpvaW4oKTtcblxuICBpZiAoZGF0YS5sZW5ndGggIT09IHN0YXRlLmRlZmF1bHRCdWZmZXIubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspXG4gICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHJlcG9ydGVyKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJylcbiAgICB0YWcgPSAnc2VxJztcbiAgZWxzZSBpZiAodGFnID09PSAnc2V0b2YnKVxuICAgIHRhZyA9ICdzZXQnO1xuXG4gIGlmIChkZXIudGFnQnlOYW1lLmhhc093blByb3BlcnR5KHRhZykpXG4gICAgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO1xuICBlbHNlIGlmICh0eXBlb2YgdGFnID09PSAnbnVtYmVyJyAmJiAodGFnIHwgMCkgPT09IHRhZylcbiAgICByZXMgPSB0YWc7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICBpZiAocmVzID49IDB4MWYpXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdNdWx0aS1vY3RldCB0YWcgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnKTtcblxuICBpZiAoIXByaW1pdGl2ZSlcbiAgICByZXMgfD0gMHgyMDtcblxuICByZXMgfD0gKGRlci50YWdDbGFzc0J5TmFtZVtjbHMgfHwgJ3VuaXZlcnNhbCddIDw8IDYpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWVkLCBsZW4pIHtcbiAgdmFyIHQgPSBCdWZmZXIuYWxsb2MoMClcbiAgdmFyIGkgPSAwXG4gIHZhciBjXG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspXG4gICAgdCA9IEJ1ZmZlci5jb25jYXQoW3QsIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoc2VlZCkudXBkYXRlKGMpLmRpZ2VzdCgpXSlcbiAgfVxuICByZXR1cm4gdC5zbGljZSgwLCBsZW4pXG59XG5cbmZ1bmN0aW9uIGkyb3BzIChjKSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNClcbiAgb3V0LndyaXRlVUludDMyQkUoYywgMClcbiAgcmV0dXJuIG91dFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGFbaV0gXj0gYltpXVxuICB9XG4gIHJldHVybiBhXG59XG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gd2l0aFB1YmxpYyAocGFkZGVkTXNnLCBrZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBhZGRlZE1zZ1xuICAgIC50b1JlZChCTi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBCTihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpdGhQdWJsaWNcbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gSW5pdGlhbGl6YXRpb24gYW5kIHJvdW5kIGNvbnN0YW50cyB0YWJsZXNcblx0ICAgIHZhciBIID0gW107XG5cdCAgICB2YXIgSyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGNvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBpc1ByaW1lKG4pIHtcblx0ICAgICAgICAgICAgdmFyIHNxcnROID0gTWF0aC5zcXJ0KG4pO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIShuICUgZmFjdG9yKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHtcblx0ICAgICAgICAgICAgcmV0dXJuICgobiAtIChuIHwgMCkpICogMHgxMDAwMDAwMDApIHwgMDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgbiA9IDI7XG5cdCAgICAgICAgdmFyIG5QcmltZSA9IDA7XG5cdCAgICAgICAgd2hpbGUgKG5QcmltZSA8IDY0KSB7XG5cdCAgICAgICAgICAgIGlmIChpc1ByaW1lKG4pKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoblByaW1lIDwgOCkge1xuXHQgICAgICAgICAgICAgICAgICAgIEhbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAyKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBLW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMykpO1xuXG5cdCAgICAgICAgICAgICAgICBuUHJpbWUrKztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIG4rKztcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3Rcblx0ICAgIHZhciBXID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTI1NiBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTYgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KEguc2xpY2UoMCkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIGUgPSBIWzRdO1xuXHQgICAgICAgICAgICB2YXIgZiA9IEhbNV07XG5cdCAgICAgICAgICAgIHZhciBnID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIGggPSBIWzddO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggPSBXW2kgLSAxNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMCAgPSAoKGdhbW1hMHggPDwgMjUpIHwgKGdhbW1hMHggPj4+IDcpKSAgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChnYW1tYTB4IDw8IDE0KSB8IChnYW1tYTB4ID4+PiAxOCkpIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2FtbWEweCA+Pj4gMyk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeCA9IFdbaSAtIDJdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTEgID0gKChnYW1tYTF4IDw8IDE1KSB8IChnYW1tYTF4ID4+PiAxNykpIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWExeCA8PCAxMykgfCAoZ2FtbWExeCA+Pj4gMTkpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMXggPj4+IDEwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoICA9IChlICYgZikgXiAofmUgJiBnKTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYWogPSAoYSAmIGIpIF4gKGEgJiBjKSBeIChiICYgYyk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTAgPSAoKGEgPDwgMzApIHwgKGEgPj4+IDIpKSBeICgoYSA8PCAxOSkgfCAoYSA+Pj4gMTMpKSBeICgoYSA8PCAxMCkgfCAoYSA+Pj4gMjIpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTEgPSAoKGUgPDwgMjYpIHwgKGUgPj4+IDYpKSBeICgoZSA8PCAyMSkgfCAoZSA+Pj4gMTEpKSBeICgoZSA8PCA3KSAgfCAoZSA+Pj4gMjUpKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgdDIgPSBzaWdtYTAgKyBtYWo7XG5cblx0ICAgICAgICAgICAgICAgIGggPSBnO1xuXHQgICAgICAgICAgICAgICAgZyA9IGY7XG5cdCAgICAgICAgICAgICAgICBmID0gZTtcblx0ICAgICAgICAgICAgICAgIGUgPSAoZCArIHQxKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBkID0gYztcblx0ICAgICAgICAgICAgICAgIGMgPSBiO1xuXHQgICAgICAgICAgICAgICAgYiA9IGE7XG5cdCAgICAgICAgICAgICAgICBhID0gKHQxICsgdDIpIHwgMDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuXHQgICAgICAgICAgICBIWzVdID0gKEhbNV0gKyBmKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNl0gPSAoSFs2XSArIGcpIHwgMDtcblx0ICAgICAgICAgICAgSFs3XSA9IChIWzddICsgaCkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1Nih3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTI1NiA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTI1Nik7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTI1NiA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEEyNTYpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEyNTY7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4veDY0LWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4veDY0LWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICBmdW5jdGlvbiBYNjRXb3JkX2NyZWF0ZSgpIHtcblx0ICAgICAgICByZXR1cm4gWDY0V29yZC5jcmVhdGUuYXBwbHkoWDY0V29yZCwgYXJndW1lbnRzKTtcblx0ICAgIH1cblxuXHQgICAgLy8gQ29uc3RhbnRzXG5cdCAgICB2YXIgSyA9IFtcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgWDY0V29yZF9jcmVhdGUoMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiksIFg2NFdvcmRfY3JlYXRlKDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBYNjRXb3JkX2NyZWF0ZSgweDU5ZjExMWYxLCAweGI2MDVkMDE5KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgWDY0V29yZF9jcmVhdGUoMHhhYjFjNWVkNSwgMHhkYTZkODExOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkODA3YWE5OCwgMHhhMzAzMDI0MiksIFg2NFdvcmRfY3JlYXRlKDB4MTI4MzViMDEsIDB4NDU3MDZmYmUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBYNjRXb3JkX2NyZWF0ZSgweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgWDY0V29yZF9jcmVhdGUoMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5YmRjMDZhNywgMHgyNWM3MTIzNSksIFg2NFdvcmRfY3JlYXRlKDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBYNjRXb3JkX2NyZWF0ZSgweGVmYmU0Nzg2LCAweDM4NGYyNWUzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgWDY0V29yZF9jcmVhdGUoMHgyNDBjYTFjYywgMHg3N2FjOWM2NSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSksIFg2NFdvcmRfY3JlYXRlKDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBYNjRXb3JkX2NyZWF0ZSgweDc2Zjk4OGRhLCAweDgzMTE1M2I1KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgWDY0V29yZF9jcmVhdGUoMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiksIFg2NFdvcmRfY3JlYXRlKDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBYNjRXb3JkX2NyZWF0ZSgweGQ1YTc5MTQ3LCAweDkzMGFhNzI1KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgWDY0V29yZF9jcmVhdGUoMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyN2I3MGE4NSwgMHg0NmQyMmZmYyksIFg2NFdvcmRfY3JlYXRlKDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBYNjRXb3JkX2NyZWF0ZSgweDUzMzgwZDEzLCAweDlkOTViM2RmKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgWDY0V29yZF9jcmVhdGUoMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiksIFg2NFdvcmRfY3JlYXRlKDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MWE2NjRiLCAweGJjNDIzMDAxKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgWDY0V29yZF9jcmVhdGUoMHhjNzZjNTFhMywgMHgwNjU0YmUzMCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCksIFg2NFdvcmRfY3JlYXRlKDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBYNjRXb3JkX2NyZWF0ZSgweDEwNmFhMDcwLCAweDMyYmJkMWI4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgWDY0V29yZF9jcmVhdGUoMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSksIFg2NFdvcmRfY3JlYXRlKDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBYNjRXb3JkX2NyZWF0ZSgweDRlZDhhYTRhLCAweGUzNDE4YWNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgWDY0V29yZF9jcmVhdGUoMHg2ODJlNmZmMywgMHhkNmIyYjhhMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3NDhmODJlZSwgMHg1ZGVmYjJmYyksIFg2NFdvcmRfY3JlYXRlKDB4NzhhNTYzNmYsIDB4NDMxNzJmNjApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBYNjRXb3JkX2NyZWF0ZSgweDhjYzcwMjA4LCAweDFhNjQzOWVjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgWDY0V29yZF9jcmVhdGUoMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiZWY5YTNmNywgMHhiMmM2NzkxNSksIFg2NFdvcmRfY3JlYXRlKDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBYNjRXb3JkX2NyZWF0ZSgweGQxODZiOGM3LCAweDIxYzBjMjA3KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgWDY0V29yZF9jcmVhdGUoMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSksIFg2NFdvcmRfY3JlYXRlKDB4MGE2MzdkYzUsIDB4YTJjODk4YTYpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBYNjRXb3JkX2NyZWF0ZSgweDFiNzEwYjM1LCAweDEzMWM0NzFiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgWDY0V29yZF9jcmVhdGUoMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgzYzllYmUwYSwgMHgxNWM5YmViYyksIFg2NFdvcmRfY3JlYXRlKDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBYNjRXb3JkX2NyZWF0ZSgweDU5N2YyOTljLCAweGZjNjU3ZTJhKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgWDY0V29yZF9jcmVhdGUoMHg2YzQ0MTk4YywgMHg0YTQ3NTgxNylcblx0ICAgIF07XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdHNcblx0ICAgIHZhciBXID0gW107XG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICBXW2ldID0gWDY0V29yZF9jcmVhdGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS01MTIgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBYNjRXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgpLCBuZXcgWDY0V29yZC5pbml0KDB4YmI2N2FlODUsIDB4ODRjYWE3M2IpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDNjNmVmMzcyLCAweGZlOTRmODJiKSwgbmV3IFg2NFdvcmQuaW5pdCgweGE1NGZmNTNhLCAweDVmMWQzNmYxKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSksIG5ldyBYNjRXb3JkLmluaXQoMHg5YjA1Njg4YywgMHgyYjNlNmMxZiksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIpLCBuZXcgWDY0V29yZC5pbml0KDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkpXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgSDAgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgSDEgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgSDIgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgSDMgPSBIWzNdO1xuXHQgICAgICAgICAgICB2YXIgSDQgPSBIWzRdO1xuXHQgICAgICAgICAgICB2YXIgSDUgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgSDYgPSBIWzZdO1xuXHQgICAgICAgICAgICB2YXIgSDcgPSBIWzddO1xuXG5cdCAgICAgICAgICAgIHZhciBIMGggPSBIMC5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDBsID0gSDAubG93O1xuXHQgICAgICAgICAgICB2YXIgSDFoID0gSDEuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgxbCA9IEgxLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgyaCA9IEgyLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMmwgPSBIMi5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIM2ggPSBIMy5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDNsID0gSDMubG93O1xuXHQgICAgICAgICAgICB2YXIgSDRoID0gSDQuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg0bCA9IEg0Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg1aCA9IEg1LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINWwgPSBINS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINmggPSBINi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDZsID0gSDYubG93O1xuXHQgICAgICAgICAgICB2YXIgSDdoID0gSDcuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg3bCA9IEg3LmxvdztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYWggPSBIMGg7XG5cdCAgICAgICAgICAgIHZhciBhbCA9IEgwbDtcblx0ICAgICAgICAgICAgdmFyIGJoID0gSDFoO1xuXHQgICAgICAgICAgICB2YXIgYmwgPSBIMWw7XG5cdCAgICAgICAgICAgIHZhciBjaCA9IEgyaDtcblx0ICAgICAgICAgICAgdmFyIGNsID0gSDJsO1xuXHQgICAgICAgICAgICB2YXIgZGggPSBIM2g7XG5cdCAgICAgICAgICAgIHZhciBkbCA9IEgzbDtcblx0ICAgICAgICAgICAgdmFyIGVoID0gSDRoO1xuXHQgICAgICAgICAgICB2YXIgZWwgPSBINGw7XG5cdCAgICAgICAgICAgIHZhciBmaCA9IEg1aDtcblx0ICAgICAgICAgICAgdmFyIGZsID0gSDVsO1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSBINmg7XG5cdCAgICAgICAgICAgIHZhciBnbCA9IEg2bDtcblx0ICAgICAgICAgICAgdmFyIGhoID0gSDdoO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBIN2w7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIFdpbDtcblx0ICAgICAgICAgICAgICAgIHZhciBXaWg7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgV2kgPSBXW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBFeHRlbmQgbWVzc2FnZVxuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIFdpaCA9IFdpLmhpZ2ggPSBNW29mZnNldCArIGkgKiAyXSAgICAgfCAwO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpbCA9IFdpLmxvdyAgPSBNW29mZnNldCArIGkgKiAyICsgMV0gfCAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBHYW1tYTBcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweCAgPSBXW2kgLSAxNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhoID0gZ2FtbWEweC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4bCA9IGdhbW1hMHgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTBoICA9ICgoZ2FtbWEweGggPj4+IDEpIHwgKGdhbW1hMHhsIDw8IDMxKSkgXiAoKGdhbW1hMHhoID4+PiA4KSB8IChnYW1tYTB4bCA8PCAyNCkpIF4gKGdhbW1hMHhoID4+PiA3KTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwbCAgPSAoKGdhbW1hMHhsID4+PiAxKSB8IChnYW1tYTB4aCA8PCAzMSkpIF4gKChnYW1tYTB4bCA+Pj4gOCkgfCAoZ2FtbWEweGggPDwgMjQpKSBeICgoZ2FtbWEweGwgPj4+IDcpIHwgKGdhbW1hMHhoIDw8IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBHYW1tYTFcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeCAgPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeGggPSBnYW1tYTF4LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhsID0gZ2FtbWExeC5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWggID0gKChnYW1tYTF4aCA+Pj4gMTkpIHwgKGdhbW1hMXhsIDw8IDEzKSkgXiAoKGdhbW1hMXhoIDw8IDMpIHwgKGdhbW1hMXhsID4+PiAyOSkpIF4gKGdhbW1hMXhoID4+PiA2KTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExbCAgPSAoKGdhbW1hMXhsID4+PiAxOSkgfCAoZ2FtbWExeGggPDwgMTMpKSBeICgoZ2FtbWExeGwgPDwgMykgfCAoZ2FtbWExeGggPj4+IDI5KSkgXiAoKGdhbW1hMXhsID4+PiA2KSB8IChnYW1tYTF4aCA8PCAyNikpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpNyAgPSBXW2kgLSA3XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3aCA9IFdpNy5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTdsID0gV2k3LmxvdztcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2ICA9IFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmggPSBXaTE2LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZsID0gV2kxNi5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXaWwgPSBnYW1tYTBsICsgV2k3bDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBnYW1tYTBoICsgV2k3aCArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgICAgICBXaWwgPSBXaWwgKyBnYW1tYTFsO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpaCA9IFdpaCArIGdhbW1hMWggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWExbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gV2lsICsgV2kxNmw7XG5cdCAgICAgICAgICAgICAgICAgICAgV2loID0gV2loICsgV2kxNmggKyAoKFdpbCA+Pj4gMCkgPCAoV2kxNmwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV2kuaGlnaCA9IFdpaDtcblx0ICAgICAgICAgICAgICAgICAgICBXaS5sb3cgID0gV2lsO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgY2hoICA9IChlaCAmIGZoKSBeICh+ZWggJiBnaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2hsICA9IChlbCAmIGZsKSBeICh+ZWwgJiBnbCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqaCA9IChhaCAmIGJoKSBeIChhaCAmIGNoKSBeIChiaCAmIGNoKTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYWpsID0gKGFsICYgYmwpIF4gKGFsICYgY2wpIF4gKGJsICYgY2wpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwaCA9ICgoYWggPj4+IDI4KSB8IChhbCA8PCA0KSkgIF4gKChhaCA8PCAzMCkgIHwgKGFsID4+PiAyKSkgXiAoKGFoIDw8IDI1KSB8IChhbCA+Pj4gNykpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGwgPSAoKGFsID4+PiAyOCkgfCAoYWggPDwgNCkpICBeICgoYWwgPDwgMzApICB8IChhaCA+Pj4gMikpIF4gKChhbCA8PCAyNSkgfCAoYWggPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTFoID0gKChlaCA+Pj4gMTQpIHwgKGVsIDw8IDE4KSkgXiAoKGVoID4+PiAxOCkgfCAoZWwgPDwgMTQpKSBeICgoZWggPDwgMjMpIHwgKGVsID4+PiA5KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExbCA9ICgoZWwgPj4+IDE0KSB8IChlaCA8PCAxOCkpIF4gKChlbCA+Pj4gMTgpIHwgKGVoIDw8IDE0KSkgXiAoKGVsIDw8IDIzKSB8IChlaCA+Pj4gOSkpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldXG5cdCAgICAgICAgICAgICAgICB2YXIgS2kgID0gS1tpXTtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWggPSBLaS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgdmFyIEtpbCA9IEtpLmxvdztcblxuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSBoaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIGNobDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBjaGggKyAoKHQxbCA+Pj4gMCkgPCAoY2hsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBLaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgS2loICsgKCh0MWwgPj4+IDApIDwgKEtpbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgV2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIFdpaCArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuXHQgICAgICAgICAgICAgICAgdmFyIHQybCA9IHNpZ21hMGwgKyBtYWpsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyaCA9IHNpZ21hMGggKyBtYWpoICsgKCh0MmwgPj4+IDApIDwgKHNpZ21hMGwgPj4+IDApID8gMSA6IDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgd29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgICAgIGhoID0gZ2g7XG5cdCAgICAgICAgICAgICAgICBobCA9IGdsO1xuXHQgICAgICAgICAgICAgICAgZ2ggPSBmaDtcblx0ICAgICAgICAgICAgICAgIGdsID0gZmw7XG5cdCAgICAgICAgICAgICAgICBmaCA9IGVoO1xuXHQgICAgICAgICAgICAgICAgZmwgPSBlbDtcblx0ICAgICAgICAgICAgICAgIGVsID0gKGRsICsgdDFsKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBlaCA9IChkaCArIHQxaCArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZGggPSBjaDtcblx0ICAgICAgICAgICAgICAgIGRsID0gY2w7XG5cdCAgICAgICAgICAgICAgICBjaCA9IGJoO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJoID0gYWg7XG5cdCAgICAgICAgICAgICAgICBibCA9IGFsO1xuXHQgICAgICAgICAgICAgICAgYWwgPSAodDFsICsgdDJsKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBhaCA9ICh0MWggKyB0MmggKyAoKGFsID4+PiAwKSA8ICh0MWwgPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIMGwgPSBIMC5sb3cgID0gKEgwbCArIGFsKTtcblx0ICAgICAgICAgICAgSDAuaGlnaCA9IChIMGggKyBhaCArICgoSDBsID4+PiAwKSA8IChhbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIMWwgPSBIMS5sb3cgID0gKEgxbCArIGJsKTtcblx0ICAgICAgICAgICAgSDEuaGlnaCA9IChIMWggKyBiaCArICgoSDFsID4+PiAwKSA8IChibCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIMmwgPSBIMi5sb3cgID0gKEgybCArIGNsKTtcblx0ICAgICAgICAgICAgSDIuaGlnaCA9IChIMmggKyBjaCArICgoSDJsID4+PiAwKSA8IChjbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIM2wgPSBIMy5sb3cgID0gKEgzbCArIGRsKTtcblx0ICAgICAgICAgICAgSDMuaGlnaCA9IChIM2ggKyBkaCArICgoSDNsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINGwgPSBINC5sb3cgID0gKEg0bCArIGVsKTtcblx0ICAgICAgICAgICAgSDQuaGlnaCA9IChINGggKyBlaCArICgoSDRsID4+PiAwKSA8IChlbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINWwgPSBINS5sb3cgID0gKEg1bCArIGZsKTtcblx0ICAgICAgICAgICAgSDUuaGlnaCA9IChINWggKyBmaCArICgoSDVsID4+PiAwKSA8IChmbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBINmwgPSBINi5sb3cgID0gKEg2bCArIGdsKTtcblx0ICAgICAgICAgICAgSDYuaGlnaCA9IChINmggKyBnaCArICgoSDZsID4+PiAwKSA8IChnbCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgICAgICBIN2wgPSBINy5sb3cgID0gKEg3bCArIGhsKTtcblx0ICAgICAgICAgICAgSDcuaGlnaCA9IChIN2ggKyBoaCArICgoSDdsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgaGFzaCB0byAzMi1iaXQgd29yZCBhcnJheSBiZWZvcmUgcmV0dXJuaW5nXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaC50b1gzMigpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEwMjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEE1MTIod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEE1MTIpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTUxMihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBNTEyKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEE1MTI7XG5cbn0pKTsiLCJjb25zdCB7IGluaXRpYWxpemVDbGllbnQgfSA9IHJlcXVpcmUoJy4vc3JjL2NsaWVudCcpO1xuY29uc3QgeyBpbml0aWFsaXplU2VydmVyIH0gPSByZXF1aXJlKCcuL3NyYy9zZXJ2ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGluaXRpYWxpemVDbGllbnQsIGluaXRpYWxpemVTZXJ2ZXIgfTtcbiIsImNvbnN0IGxvY2FsU3RvcmFnZVByb3ZpZGVyID0gcmVxdWlyZSgnLi9Mb2NhbFNlc3Npb25TdG9yYWdlUHJvdmlkZXInKTtcbmNvbnN0IGNvb2tpZVByb3ZpZGVyID0gcmVxdWlyZSgnLi9Db29raWVQcm92aWRlcicpO1xuY29uc3QgeyBJRlJBTUVfSUQsIEV2ZW50cywgSW50ZXJuYWxDb21tYW5kcyB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuYXN5bmMgZnVuY3Rpb24gc2xlZXAodGltZW91dCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0sIHRpbWVvdXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gX3NldERlZmF1bHRQcm92aWRlcnMoY2xpZW50KSB7XG4gIGNsaWVudC5hZGRQcm92aWRlcignbG9jYWxTdG9yYWdlJywgbG9jYWxTdG9yYWdlUHJvdmlkZXIuY2xpZW50KTtcbiAgY2xpZW50LmFkZFByb3ZpZGVyKCdzZXNzaW9uU3RvcmFnZScsIGxvY2FsU3RvcmFnZVByb3ZpZGVyLmNsaWVudCk7XG4gIGNsaWVudC5hZGRQcm92aWRlcignY29va2llJywgY29va2llUHJvdmlkZXIuY2xpZW50KTtcbn1cblxuZnVuY3Rpb24gX2lzQWxsb3dlZE9yaWdpbihhbGxvd2VkRG9tYWlucywgb3JpZ2luKSB7XG4gIGlmIChhbGxvd2VkRG9tYWlucyAmJiBhbGxvd2VkRG9tYWlucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gISFhbGxvd2VkRG9tYWlucy5maW5kKHggPT4geCA9PT0gb3JpZ2luKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX3NlbmRDb21tYW5kKHByb3ZpZGVyLCBjb21tYW5kLCB7XG4gIGNvbW1hbmRBcmd1bWVudHMsXG4gIGlmcmFtZUlkID0gSUZSQU1FX0lELFxuICAkd2luZG93ID0gd2luZG93LFxuICBhbGxvd2VkRG9tYWlucyA9IFtdXG59ID0ge30pIHtcbiAgY29uc3QgaWZyYW1lRWxlbWVudCA9ICR3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWZyYW1lSWQpO1xuICBjb25zdCBpZnJhbWUgPSBpZnJhbWVFbGVtZW50LmNvbnRlbnRXaW5kb3c7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5kYXRhLmV2ZW50ID09PSBFdmVudHMuUkVQTFkpIHtcblxuICAgICAgICBpZiAoIV9pc0FsbG93ZWRPcmlnaW4oYWxsb3dlZERvbWFpbnMsIGV2ZW50Lm9yaWdpbikpIHtcbiAgICAgICAgICAvLyBUT0RPOiBsb2dnaW5nXG4gICAgICAgICAgdGhyb3cgYE5PVCBBTExPV0VEIE9SSUdJTiAke2V2ZW50Lm9yaWdpbn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhLnJlc3VsdCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZnJhbWUucG9zdE1lc3NhZ2Uoe1xuICAgICAgZXZlbnQ6IEV2ZW50cy5DT01NQU5ELFxuICAgICAgZGF0YTogeyBwcm92aWRlciwgY29tbWFuZCwgY29tbWFuZEFyZ3VtZW50cyB9LFxuICAgIH0sICcqJyk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBfY3JlYXRlSWZyYW1lSWZOb3RFeGlzdHMoaWZyYW1lSWQsICR3aW5kb3csIHNlcnZlclVybCwgeyB0aW1lb3V0IH0pIHtcbiAgbGV0IGlmcmFtZSA9ICR3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWZyYW1lSWQpO1xuICBpZiAoIWlmcmFtZSkge1xuICAgIGNvbnN0IGVsZW0gPSAkd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGVsZW0uaWQgPSBpZnJhbWVJZDtcbiAgICBlbGVtLnNyYyA9IHNlcnZlclVybDtcbiAgICBlbGVtLnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6IDFweDsgaGVpZ2h0OiAxcHg7IGJvcmRlcjowIHNvbGlkIHRyYW5zcGFyZW50OyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMCc7XG4gICAgJHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW0pO1xuICB9XG5cbiAgaWZyYW1lID0gJHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZnJhbWVJZCk7XG4gIGlmICghaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICBhd2FpdCBzbGVlcCh0aW1lb3V0KTtcbiAgICBpZnJhbWUgPSAkd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlmcmFtZUlkKTtcbiAgICBpZiAoIWlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE8gSUZSQU1FIE7Dg08gRk9JIENBUlJFR0FETyBOTyBUSU1FT1VUICR7dGltZW91dH1gKVxuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBfc2VuZFBpbmdBbmRXYWl0UmVwbHkocHJvdmlkZXIsICR3aW5kb3csIGlmcmFtZUlkLCB7IGFsbG93ZWREb21haW5zIH0pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgd2hpbGUoY291bnQgPCAxMCkge1xuICAgIGNvbnN0IHBpbmdQcm9taXNlID0gX3NlbmRDb21tYW5kKHByb3ZpZGVyLCBJbnRlcm5hbENvbW1hbmRzLlBJTkcsIHsgaWZyYW1lSWQsICR3aW5kb3csIGFsbG93ZWREb21haW5zIH0pO1xuICAgIGNvbnN0IHJlcGx5ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFsgc2xlZXAoMTAwMCksIHBpbmdQcm9taXNlIF0pO1xuICAgIGlmIChyZXBseSA9PT0gSW50ZXJuYWxDb21tYW5kcy5QSU5HKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY291bnQrKztcbiAgfVxufVxuXG5jbGFzcyBDcm9zc1N0b3JhZ2VDbGllbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaWZyYW1lSWQsXG4gICAgJHdpbmRvdyxcbiAgICBhbGxvd2VkRG9tYWlucyxcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5pZnJhbWVJZCA9IGlmcmFtZUlkO1xuICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG4gICAgdGhpcy5hbGxvd2VkRG9tYWlucyA9IGFsbG93ZWREb21haW5zO1xuICAgIHRoaXMucHJvdmlkZXJzID0ge307XG4gIH1cblxuICBnZXQgcHJvdmlkZXJzTmFtZXMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucHJvdmlkZXJzKTtcbiAgfVxuXG4gIGdldFByb3ZpZGVyKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlcnNbbmFtZV07XG4gIH1cblxuICBhZGRQcm92aWRlcihuYW1lLCBwcm92aWRlciwgb3B0aW9ucykge1xuICAgIGxldCBfbmFtZSwgX3Byb3ZpZGVyLCBfb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBfbmFtZSA9IG5hbWU7XG4gICAgICBfcHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgIF9vcHRpb25zID0gb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgX3Byb3ZpZGVyID0gbmFtZTtcbiAgICAgIF9uYW1lID0gX3Byb3ZpZGVyLlBST1ZJREVSO1xuICAgICAgX29wdGlvbnMgPSBwcm92aWRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBzZW5kQ29tbWFuZEZuID0gYXN5bmMgKGNvbW1hbmQsIGNvbW1hbmRBcmd1bWVudHMpID0+IHtcbiAgICAgIHJldHVybiBfc2VuZENvbW1hbmQoX25hbWUsIGNvbW1hbmQsIHtcbiAgICAgICAgY29tbWFuZEFyZ3VtZW50cyxcbiAgICAgICAgaWZyYW1lSWQ6IHRoaXMuaWZyYW1lSWQsXG4gICAgICAgICR3aW5kb3c6IHRoaXMuJHdpbmRvdyxcbiAgICAgICAgYWxsb3dlZERvbWFpbnM6IHRoaXMuYWxsb3dlZERvbWFpbnMsXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IG5ld1Byb3ZpZGVyID0gbmV3IF9wcm92aWRlcihzZW5kQ29tbWFuZEZuLCBfb3B0aW9ucyk7XG5cbiAgICAvLyNyZWdpb24gQURERUQgVE8gUFJPVklERVIgQkVDQVVTRSBpbml0aWFsaXplU2VydmVyIFJFVFVSTiBsb2NhbFN0b3JhZ2UgUFJPVklERVJcbiAgICBuZXdQcm92aWRlci5nZXRQcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXI7XG4gICAgbmV3UHJvdmlkZXIuYWRkUHJvdmlkZXIgPSB0aGlzLmFkZFByb3ZpZGVyO1xuICAgIG5ld1Byb3ZpZGVyLmxpc3RQcm92aWRlcnMgPSB0aGlzLmxpc3RQcm92aWRlcnM7XG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICB0aGlzLnByb3ZpZGVyc1tfbmFtZV0gPSBuZXdQcm92aWRlcjtcbiAgfVxuXG4gIGFzeW5jIGxpc3RQcm92aWRlcnMoKSB7XG4gICAgcmV0dXJuIF9zZW5kQ29tbWFuZCgnQ1JPU1MtU1RPUkFHRScsIEludGVybmFsQ29tbWFuZHMuTElTVF9QUk9WSURFUlMsIHtcbiAgICAgIGlmcmFtZUlkOiB0aGlzLmlmcmFtZUlkLFxuICAgICAgJHdpbmRvdzogdGhpcy4kd2luZG93LFxuICAgICAgYWxsb3dlZERvbWFpbnM6IHRoaXMuYWxsb3dlZERvbWFpbnMsXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgSU5JVElBTF9QUk9WSURFUiA9ICdsb2NhbFN0b3JhZ2UnO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQ2xpZW50KHNlcnZlclVybCwge1xuICBpZnJhbWVJZCA9IElGUkFNRV9JRCxcbiAgJHdpbmRvdyA9IHdpbmRvdyxcbiAgYWxsb3dlZERvbWFpbnMgPSBbXSxcbiAgaWZyYW1lVGltZW91dCA9IDMwMDAsXG4gIGluaXRpYWxQcm92aWRlciA9IElOSVRJQUxfUFJPVklERVIsXG59ID0ge30pIHtcbiAgY29uc3QgcHJvdmlkZXIgPSBpbml0aWFsUHJvdmlkZXIgPT09IElOSVRJQUxfUFJPVklERVIgPyBJTklUSUFMX1BST1ZJREVSIDogaW5pdGlhbFByb3ZpZGVyLlBST1ZJREVSO1xuXG4gIGF3YWl0IF9jcmVhdGVJZnJhbWVJZk5vdEV4aXN0cyhpZnJhbWVJZCwgJHdpbmRvdywgc2VydmVyVXJsLCB7IHRpbWVvdXQ6IGlmcmFtZVRpbWVvdXQgfSk7XG5cbiAgY29uc3QgY29ubmVjdGVkID0gYXdhaXQgX3NlbmRQaW5nQW5kV2FpdFJlcGx5KHByb3ZpZGVyLCAkd2luZG93LCBpZnJhbWVJZCwgeyBhbGxvd2VkRG9tYWlucyB9KTtcbiAgaWYgKCFjb25uZWN0ZWQpIHRocm93IG5ldyBFcnJvcignQ1JPU1MgU1RPUkFHRSBTRVJWRVIgRElEIE5PVCBSRVBMWScpO1xuXG4gIGNvbnN0IGNsaWVudCA9IG5ldyBDcm9zc1N0b3JhZ2VDbGllbnQoeyBpZnJhbWVJZCwgJHdpbmRvdywgYWxsb3dlZERvbWFpbnMgfSk7XG4gIF9zZXREZWZhdWx0UHJvdmlkZXJzKGNsaWVudCk7XG5cbiAgaWYgKHByb3ZpZGVyICE9PSBJTklUSUFMX1BST1ZJREVSKSBjbGllbnQuYWRkUHJvdmlkZXIoaW5pdGlhbFByb3ZpZGVyKTtcblxuICByZXR1cm4gY2xpZW50LmdldFByb3ZpZGVyKHByb3ZpZGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGluaXRpYWxpemVDbGllbnQgfTtcbiIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMi4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyO1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKCFyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIpIHtcblx0XHR2YXIgT2xkQ29va2llcyA9IHdpbmRvdy5Db29raWVzO1xuXHRcdHZhciBhcGkgPSB3aW5kb3cuQ29va2llcyA9IGZhY3RvcnkoKTtcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5Db29raWVzID0gT2xkQ29va2llcztcblx0XHRcdHJldHVybiBhcGk7XG5cdFx0fTtcblx0fVxufShmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlIChzKSB7XG5cdFx0cmV0dXJuIHMucmVwbGFjZSgvKCVbMC05QS1aXXsyfSkrL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkoKSB7fVxuXG5cdFx0ZnVuY3Rpb24gc2V0IChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGF0dHJpYnV0ZXMgPSBleHRlbmQoe1xuXHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdH0sIGFwaS5kZWZhdWx0cywgYXR0cmlidXRlcyk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXR0cmlidXRlcy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpICogMSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlJ3JlIHVzaW5nIFwiZXhwaXJlc1wiIGJlY2F1c2UgXCJtYXgtYWdlXCIgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gYXR0cmlidXRlcy5leHBpcmVzID8gYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdFx0aWYgKC9eW1xce1xcW10vLnRlc3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXG5cdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSA/XG5cdFx0XHRcdGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KSA6XG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDNBfDNDfDNFfDNEfDJGfDNGfDQwfDVCfDVEfDVFfDYwfDdCfDdEfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpXG5cdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpXG5cdFx0XHRcdC5yZXBsYWNlKC9bXFwoXFwpXS9nLCBlc2NhcGUpO1xuXG5cdFx0XHR2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG5cdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXHRcdFx0XHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29uc2lkZXJzIFJGQyA2MjY1IHNlY3Rpb24gNS4yOlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0Ly8gMy4gIElmIHRoZSByZW1haW5pbmcgdW5wYXJzZWQtYXR0cmlidXRlcyBjb250YWlucyBhICV4M0IgKFwiO1wiKVxuXHRcdFx0XHQvLyAgICAgY2hhcmFjdGVyOlxuXHRcdFx0XHQvLyBDb25zdW1lIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHVwIHRvLFxuXHRcdFx0XHQvLyBub3QgaW5jbHVkaW5nLCB0aGUgZmlyc3QgJXgzQiAoXCI7XCIpIGNoYXJhY3Rlci5cblx0XHRcdFx0Ly8gLi4uXG5cdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnNwbGl0KCc7JylbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgdmFsdWUgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldCAoa2V5LCBqc29uKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBqYXIgPSB7fTtcblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLlxuXHRcdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuXHRcdFx0XHRpZiAoIWpzb24gJiYgY29va2llLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzWzBdKTtcblx0XHRcdFx0XHRjb29raWUgPSAoY29udmVydGVyLnJlYWQgfHwgY29udmVydGVyKShjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRkZWNvZGUoY29va2llKTtcblxuXHRcdFx0XHRcdGlmIChqc29uKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb29raWUgPSBKU09OLnBhcnNlKGNvb2tpZSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGphcltuYW1lXSA9IGNvb2tpZTtcblxuXHRcdFx0XHRcdGlmIChrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGtleSA/IGphcltrZXldIDogamFyO1xuXHRcdH1cblxuXHRcdGFwaS5zZXQgPSBzZXQ7XG5cdFx0YXBpLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCBmYWxzZSAvKiByZWFkIGFzIHJhdyAqLyk7XG5cdFx0fTtcblx0XHRhcGkuZ2V0SlNPTiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCB0cnVlIC8qIHJlYWQgYXMganNvbiAqLyk7XG5cdFx0fTtcblx0XHRhcGkucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgYXR0cmlidXRlcykge1xuXHRcdFx0c2V0KGtleSwgJycsIGV4dGVuZChhdHRyaWJ1dGVzLCB7XG5cdFx0XHRcdGV4cGlyZXM6IC0xXG5cdFx0XHR9KSk7XG5cdFx0fTtcblxuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLndpdGhDb252ZXJ0ZXIgPSBpbml0O1xuXG5cdFx0cmV0dXJuIGFwaTtcblx0fVxuXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcbn0pKTtcbiIsImNvbnN0IGxvY2FsU3RvcmFnZVByb3ZpZGVyID0gcmVxdWlyZSgnLi9Mb2NhbFNlc3Npb25TdG9yYWdlUHJvdmlkZXInKTtcbmNvbnN0IGNvb2tpZVByb3ZpZGVyID0gcmVxdWlyZSgnLi9Db29raWVQcm92aWRlcicpO1xuY29uc3QgeyBFdmVudHMsIEludGVybmFsQ29tbWFuZHMgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9nZXREZWZhdWx0UHJvdmlkZXJzKCR3aW5kb3cpIHtcbiAgY29uc3QgbG9jYWxTdG9yYWdlID0gbmV3IGxvY2FsU3RvcmFnZVByb3ZpZGVyLnNlcnZlcigkd2luZG93LmxvY2FsU3RvcmFnZSk7XG4gIGNvbnN0IHNlc3Npb25TdG9yYWdlID0gbmV3IGxvY2FsU3RvcmFnZVByb3ZpZGVyLnNlcnZlcigkd2luZG93LnNlc3Npb25TdG9yYWdlKTtcbiAgY29uc3QgY29va2llID0gbmV3IGNvb2tpZVByb3ZpZGVyLnNlcnZlcigpO1xuICByZXR1cm4geyBsb2NhbFN0b3JhZ2UsIHNlc3Npb25TdG9yYWdlLCBjb29raWUgfTtcbn1cblxuZnVuY3Rpb24gX3JlcGx5Q29tbWFuZChyZXN1bHQsIHsgJHdpbmRvdyA9IHdpbmRvd30gPSB7fSkge1xuICAkd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh7XG4gICAgZXZlbnQ6IEV2ZW50cy5SRVBMWSxcbiAgICByZXN1bHQsXG4gIH0sICcqJyk7XG59XG5cbmZ1bmN0aW9uIF9iaW5kQ29tbWFuZExpc3RlbmVyKGNhbGxiYWNrLCB7ICR3aW5kb3cgPSB3aW5kb3csIGJpbmQgfSA9IHt9KSB7XG4gICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5kYXRhLmV2ZW50ID09PSBFdmVudHMuQ09NTUFORCkge1xuICAgICAgaWYgKGJpbmQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmJpbmQoYmluZCkoZXZlbnQuZGF0YSwgJHdpbmRvdyk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhldmVudC5kYXRhLCAkd2luZG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5jbGFzcyBDcm9zc1N0b3JhZ2VTZXJ2ZXIge1xuICBjb25zdHJ1Y3Rvcigkd2luZG93LCBwcm92aWRlcnMpIHtcbiAgICB0aGlzLndpbmRvdyA9ICR3aW5kb3c7XG4gICAgdGhpcy5wcm92aWRlcnMgPSBwcm92aWRlcnNcbiAgfVxuXG4gIGdldCBwcm92aWRlcnNOYW1lcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm92aWRlcnMpO1xuICB9XG5cbiAgb25Db21tYW5kKGV2ZW50KSB7XG4gICAgLy8gVE9ETzogb3JpZ2luIHZhbGlkYXRpb24gKHdoaXRlbGlzdClcbiAgICBjb25zdCAkd2luZG93ID0gdGhpcy53aW5kb3c7XG5cbiAgICBjb25zdCB7IHByb3ZpZGVyLCBjb21tYW5kLCBjb21tYW5kQXJndW1lbnRzIH0gPSBldmVudC5kYXRhO1xuXG4gICAgaWYoY29tbWFuZCA9PT0gSW50ZXJuYWxDb21tYW5kcy5QSU5HKSB7XG4gICAgICByZXR1cm4gX3JlcGx5Q29tbWFuZChJbnRlcm5hbENvbW1hbmRzLlBJTkcsIHsgJHdpbmRvdyB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29tbWFuZCA9PT0gSW50ZXJuYWxDb21tYW5kcy5MSVNUX1BST1ZJREVSUykge1xuICAgICAgcmV0dXJuIF9yZXBseUNvbW1hbmQodGhpcy5wcm92aWRlcnNOYW1lcywgeyAkd2luZG93IH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wcm92aWRlcnNOYW1lcy5pbmNsdWRlcyhwcm92aWRlcikpIHtcbiAgICAgIHJldHVybiBfcmVwbHlDb21tYW5kKG5ldyBFcnJvcignUFJPVklERVIgTk9UIFJFR0lTVEVSRUQnKSwgeyAkd2luZG93IH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucHJvdmlkZXJzW3Byb3ZpZGVyXS5wcm9jZXNzQ29tbWFuZChjb21tYW5kLCBjb21tYW5kQXJndW1lbnRzKTtcbiAgICBfcmVwbHlDb21tYW5kKHJlc3VsdCwgeyAkd2luZG93IH0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBfYmluZENvbW1hbmRMaXN0ZW5lcih0aGlzLm9uQ29tbWFuZCwgeyBiaW5kOiB0aGlzIH0pO1xuICB9XG5cbiAgYWRkUHJvdmlkZXIobmFtZSwgcHJvdmlkZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgX25hbWUsIF9wcm92aWRlciwgX29wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgX25hbWUgPSBuYW1lO1xuICAgICAgX3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICBfb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9wcm92aWRlciA9IG5hbWU7XG4gICAgICBfbmFtZSA9IF9wcm92aWRlci5QUk9WSURFUjtcbiAgICAgIF9vcHRpb25zID0gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgdGhpcy5wcm92aWRlcnNbX25hbWVdID0gbmV3IF9wcm92aWRlcih0aGlzLndpbmRvdywgX29wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVTZXJ2ZXIoe1xuICAkd2luZG93ID0gd2luZG93LFxuICBwcm92aWRlcnMgPSB7fVxufSA9IHt9KSB7XG4gIGNvbnN0IGFsbFByb3ZpZGVycyA9IHsgLi4uX2dldERlZmF1bHRQcm92aWRlcnMoJHdpbmRvdyksIC4uLnByb3ZpZGVycyB9XG4gIGNvbnN0IHNlcnZlciA9IG5ldyBDcm9zc1N0b3JhZ2VTZXJ2ZXIoJHdpbmRvdywgYWxsUHJvdmlkZXJzKTtcbiAgc2VydmVyLmluaXRpYWxpemUoKTtcbiAgcmV0dXJuIHNlcnZlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGluaXRpYWxpemVTZXJ2ZXIgfTtcbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSwgcmVxdWlyZShcIi4vbGliLXR5cGVkYXJyYXlzXCIpLCByZXF1aXJlKFwiLi9lbmMtdXRmMTZcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vc2hhMjU2XCIpLCByZXF1aXJlKFwiLi9zaGEyMjRcIiksIHJlcXVpcmUoXCIuL3NoYTUxMlwiKSwgcmVxdWlyZShcIi4vc2hhMzg0XCIpLCByZXF1aXJlKFwiLi9zaGEzXCIpLCByZXF1aXJlKFwiLi9yaXBlbWQxNjBcIiksIHJlcXVpcmUoXCIuL2htYWNcIiksIHJlcXVpcmUoXCIuL3Bia2RmMlwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSwgcmVxdWlyZShcIi4vbW9kZS1jZmJcIiksIHJlcXVpcmUoXCIuL21vZGUtY3RyXCIpLCByZXF1aXJlKFwiLi9tb2RlLWN0ci1nbGFkbWFuXCIpLCByZXF1aXJlKFwiLi9tb2RlLW9mYlwiKSwgcmVxdWlyZShcIi4vbW9kZS1lY2JcIiksIHJlcXVpcmUoXCIuL3BhZC1hbnNpeDkyM1wiKSwgcmVxdWlyZShcIi4vcGFkLWlzbzEwMTI2XCIpLCByZXF1aXJlKFwiLi9wYWQtaXNvOTc5NzFcIiksIHJlcXVpcmUoXCIuL3BhZC16ZXJvcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vcGFkLW5vcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vZm9ybWF0LWhleFwiKSwgcmVxdWlyZShcIi4vYWVzXCIpLCByZXF1aXJlKFwiLi90cmlwbGVkZXNcIiksIHJlcXVpcmUoXCIuL3JjNFwiKSwgcmVxdWlyZShcIi4vcmFiYml0XCIpLCByZXF1aXJlKFwiLi9yYWJiaXQtbGVnYWN5XCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCIsIFwiLi9saWItdHlwZWRhcnJheXNcIiwgXCIuL2VuYy11dGYxNlwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9zaGExXCIsIFwiLi9zaGEyNTZcIiwgXCIuL3NoYTIyNFwiLCBcIi4vc2hhNTEyXCIsIFwiLi9zaGEzODRcIiwgXCIuL3NoYTNcIiwgXCIuL3JpcGVtZDE2MFwiLCBcIi4vaG1hY1wiLCBcIi4vcGJrZGYyXCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCIsIFwiLi9tb2RlLWNmYlwiLCBcIi4vbW9kZS1jdHJcIiwgXCIuL21vZGUtY3RyLWdsYWRtYW5cIiwgXCIuL21vZGUtb2ZiXCIsIFwiLi9tb2RlLWVjYlwiLCBcIi4vcGFkLWFuc2l4OTIzXCIsIFwiLi9wYWQtaXNvMTAxMjZcIiwgXCIuL3BhZC1pc285Nzk3MVwiLCBcIi4vcGFkLXplcm9wYWRkaW5nXCIsIFwiLi9wYWQtbm9wYWRkaW5nXCIsIFwiLi9mb3JtYXQtaGV4XCIsIFwiLi9hZXNcIiwgXCIuL3RyaXBsZWRlc1wiLCBcIi4vcmM0XCIsIFwiLi9yYWJiaXRcIiwgXCIuL3JhYmJpdC1sZWdhY3lcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGFsZ29zID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJylcbnZhciBhbGdvS2V5cyA9IE9iamVjdC5rZXlzKGFsZ29zKVxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChhbGdvS2V5cylcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuXG5leHBvcnRzLkNpcGhlciA9IGFlcy5DaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gYWVzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5DaXBoZXJpdiA9IGFlcy5DaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGFlcy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5EZWNpcGhlciA9IGFlcy5EZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGFlcy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5EZWNpcGhlcml2ID0gYWVzLkRlY2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGFlcy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmdldENpcGhlcnMgPSBhZXMuZ2V0Q2lwaGVyc1xuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGFlcy5saXN0Q2lwaGVyc1xuXG52YXIgZGggPSByZXF1aXJlKCdkaWZmaWUtaGVsbG1hbicpXG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hblxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG5cbmV4cG9ydHMuY3JlYXRlU2lnbiA9IHNpZ24uY3JlYXRlU2lnblxuZXhwb3J0cy5TaWduID0gc2lnbi5TaWduXG5leHBvcnRzLmNyZWF0ZVZlcmlmeSA9IHNpZ24uY3JlYXRlVmVyaWZ5XG5leHBvcnRzLlZlcmlmeSA9IHNpZ24uVmVyaWZ5XG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdFxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHRcbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdFxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHRcblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG4vLyA7W1xuLy8gICAnY3JlYXRlQ3JlZGVudGlhbHMnXG4vLyBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuLy8gICAgICAgJ3NvcnJ5LCAnICsgbmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4vLyAgICAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuLy8gICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbi8vICAgICBdLmpvaW4oJ1xcbicpKVxuLy8gICB9XG4vLyB9KVxuXG52YXIgcmYgPSByZXF1aXJlKCdyYW5kb21maWxsJylcblxuZXhwb3J0cy5yYW5kb21GaWxsID0gcmYucmFuZG9tRmlsbFxuZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJmLnJhbmRvbUZpbGxTeW5jXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5UcmFuc2Zvcm1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoXG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBibG9ja3NpemUgPSA2NFxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGFsZyhrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gW2lwYWRdXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnB1c2goZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KHRoaXMuX2hhc2gpKVxuICByZXR1cm4gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQoW3RoaXMuX29wYWQsIGhdKSlcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIvYWxnb3JpdGhtcy5qc29uJylcbiIsInZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBzeW5jID0gcmVxdWlyZSgnLi9zeW5jJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgWkVST19CVUZcbnZhciBzdWJ0bGUgPSBnbG9iYWwuY3J5cHRvICYmIGdsb2JhbC5jcnlwdG8uc3VidGxlXG52YXIgdG9Ccm93c2VyID0ge1xuICAnc2hhJzogJ1NIQS0xJyxcbiAgJ3NoYS0xJzogJ1NIQS0xJyxcbiAgJ3NoYTEnOiAnU0hBLTEnLFxuICAnc2hhMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhLTI1Nic6ICdTSEEtMjU2JyxcbiAgJ3NoYTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS0zODQnOiAnU0hBLTM4NCcsXG4gICdzaGEtNTEyJzogJ1NIQS01MTInLFxuICAnc2hhNTEyJzogJ1NIQS01MTInXG59XG52YXIgY2hlY2tzID0gW11cbmZ1bmN0aW9uIGNoZWNrTmF0aXZlIChhbGdvKSB7XG4gIGlmIChnbG9iYWwucHJvY2VzcyAmJiAhZ2xvYmFsLnByb2Nlc3MuYnJvd3Nlcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gIH1cbiAgaWYgKCFzdWJ0bGUgfHwgIXN1YnRsZS5pbXBvcnRLZXkgfHwgIXN1YnRsZS5kZXJpdmVCaXRzKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoY2hlY2tzW2FsZ29dICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2hlY2tzW2FsZ29dXG4gIH1cbiAgWkVST19CVUYgPSBaRVJPX0JVRiB8fCBCdWZmZXIuYWxsb2MoOClcbiAgdmFyIHByb20gPSBicm93c2VyUGJrZGYyKFpFUk9fQlVGLCBaRVJPX0JVRiwgMTAsIDEyOCwgYWxnbylcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0pXG4gIGNoZWNrc1thbGdvXSA9IHByb21cbiAgcmV0dXJuIHByb21cbn1cblxuZnVuY3Rpb24gYnJvd3NlclBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGxlbmd0aCwgYWxnbykge1xuICByZXR1cm4gc3VidGxlLmltcG9ydEtleShcbiAgICAncmF3JywgcGFzc3dvcmQsIHtuYW1lOiAnUEJLREYyJ30sIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXVxuICApLnRoZW4oZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzdWJ0bGUuZGVyaXZlQml0cyh7XG4gICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgIHNhbHQ6IHNhbHQsXG4gICAgICBpdGVyYXRpb25zOiBpdGVyYXRpb25zLFxuICAgICAgaGFzaDoge1xuICAgICAgICBuYW1lOiBhbGdvXG4gICAgICB9XG4gICAgfSwga2V5LCBsZW5ndGggPDwgMylcbiAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlcylcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UgKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gIHByb21pc2UudGhlbihmdW5jdGlvbiAob3V0KSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGUpXG4gICAgfSlcbiAgfSlcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkaWdlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGRpZ2VzdFxuICAgIGRpZ2VzdCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuICB2YXIgYWxnbyA9IHRvQnJvd3NlcltkaWdlc3QudG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWFsZ28gfHwgdHlwZW9mIGdsb2JhbC5Qcm9taXNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG91dFxuICAgICAgdHJ5IHtcbiAgICAgICAgb3V0ID0gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgb3V0KVxuICAgIH0pXG4gIH1cblxuICBjaGVja1BhcmFtZXRlcnMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbilcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCB0byBwYmtkZjInKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCBkZWZhdWx0RW5jb2RpbmcpXG5cbiAgcmVzb2x2ZVByb21pc2UoY2hlY2tOYXRpdmUoYWxnbykudGhlbihmdW5jdGlvbiAocmVzcCkge1xuICAgIGlmIChyZXNwKSByZXR1cm4gYnJvd3NlclBia2RmMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBhbGdvKVxuXG4gICAgcmV0dXJuIHN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICB9KSwgY2FsbGJhY2spXG59XG4iLCJ2YXIgREVTID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1kZXMnKVxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXInKVxudmFyIGFlc01vZGVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvbW9kZXMnKVxudmFyIGRlc01vZGVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1kZXMvbW9kZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBhZXMuY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7IGtleToga2V5LCBpdjogaXYsIG1vZGU6IHN1aXRlLCBkZWNyeXB0OiB0cnVlIH0pXG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbn1cblxuZnVuY3Rpb24gZ2V0Q2lwaGVycyAoKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZXNNb2RlcykuY29uY2F0KGFlcy5nZXRDaXBoZXJzKCkpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBtb2RlcyA9IHtcbiAgJ2Rlcy1lZGUzLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkVERSksXG4gICdkZXMtZWRlMyc6IGRlcy5FREUsXG4gICdkZXMtZWRlLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkVERSksXG4gICdkZXMtZWRlJzogZGVzLkVERSxcbiAgJ2Rlcy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5ERVMpLFxuICAnZGVzLWVjYic6IGRlcy5ERVNcbn1cbm1vZGVzLmRlcyA9IG1vZGVzWydkZXMtY2JjJ11cbm1vZGVzLmRlczMgPSBtb2Rlc1snZGVzLWVkZTMtY2JjJ11cbm1vZHVsZS5leHBvcnRzID0gREVTXG5pbmhlcml0cyhERVMsIENpcGhlckJhc2UpXG5mdW5jdGlvbiBERVMgKG9wdHMpIHtcbiAgQ2lwaGVyQmFzZS5jYWxsKHRoaXMpXG4gIHZhciBtb2RlTmFtZSA9IG9wdHMubW9kZS50b0xvd2VyQ2FzZSgpXG4gIHZhciBtb2RlID0gbW9kZXNbbW9kZU5hbWVdXG4gIHZhciB0eXBlXG4gIGlmIChvcHRzLmRlY3J5cHQpIHtcbiAgICB0eXBlID0gJ2RlY3J5cHQnXG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9ICdlbmNyeXB0J1xuICB9XG4gIHZhciBrZXkgPSBvcHRzLmtleVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihrZXkpKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG4gIGlmIChtb2RlTmFtZSA9PT0gJ2Rlcy1lZGUnIHx8IG1vZGVOYW1lID09PSAnZGVzLWVkZS1jYmMnKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBrZXkuc2xpY2UoMCwgOCldKVxuICB9XG4gIHZhciBpdiA9IG9wdHMuaXZcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoaXYpKSB7XG4gICAgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgfVxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLl9kZXMudXBkYXRlKGRhdGEpKVxufVxuREVTLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLl9kZXMuZmluYWwoKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7XG5leHBvcnRzLkNpcGhlciA9IHJlcXVpcmUoJy4vZGVzL2NpcGhlcicpO1xuZXhwb3J0cy5ERVMgPSByZXF1aXJlKCcuL2Rlcy9kZXMnKTtcbmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7XG5leHBvcnRzLkVERSA9IHJlcXVpcmUoJy4vZGVzL2VkZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIHByb3RvID0ge307XG5cbmZ1bmN0aW9uIENCQ1N0YXRlKGl2KSB7XG4gIGFzc2VydC5lcXVhbChpdi5sZW5ndGgsIDgsICdJbnZhbGlkIElWIGxlbmd0aCcpO1xuXG4gIHRoaXMuaXYgPSBuZXcgQXJyYXkoOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdi5sZW5ndGg7IGkrKylcbiAgICB0aGlzLml2W2ldID0gaXZbaV07XG59XG5cbmZ1bmN0aW9uIGluc3RhbnRpYXRlKEJhc2UpIHtcbiAgZnVuY3Rpb24gQ0JDKG9wdGlvbnMpIHtcbiAgICBCYXNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5fY2JjSW5pdCgpO1xuICB9XG4gIGluaGVyaXRzKENCQywgQmFzZSk7XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIENCQy5wcm90b3R5cGVba2V5XSA9IHByb3RvW2tleV07XG4gIH1cblxuICBDQkMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IENCQyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gQ0JDO1xufVxuXG5leHBvcnRzLmluc3RhbnRpYXRlID0gaW5zdGFudGlhdGU7XG5cbnByb3RvLl9jYmNJbml0ID0gZnVuY3Rpb24gX2NiY0luaXQoKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDQkNTdGF0ZSh0aGlzLm9wdGlvbnMuaXYpO1xuICB0aGlzLl9jYmNTdGF0ZSA9IHN0YXRlO1xufTtcblxucHJvdG8uX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fY2JjU3RhdGU7XG4gIHZhciBzdXBlclByb3RvID0gdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcl8ucHJvdG90eXBlO1xuXG4gIHZhciBpdiA9IHN0YXRlLml2O1xuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSBePSBpbnBbaW5PZmYgKyBpXTtcblxuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGl2LCAwLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IG91dFtvdXRPZmYgKyBpXTtcbiAgfSBlbHNlIHtcbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBvdXRbb3V0T2ZmICsgaV0gXj0gaXZbaV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IGlucFtpbk9mZiArIGldO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIENpcGhlciA9IHJlcXVpcmUoJy4vY2lwaGVyJyk7XG52YXIgREVTID0gcmVxdWlyZSgnLi9kZXMnKTtcblxuZnVuY3Rpb24gRURFU3RhdGUodHlwZSwga2V5KSB7XG4gIGFzc2VydC5lcXVhbChrZXkubGVuZ3RoLCAyNCwgJ0ludmFsaWQga2V5IGxlbmd0aCcpO1xuXG4gIHZhciBrMSA9IGtleS5zbGljZSgwLCA4KTtcbiAgdmFyIGsyID0ga2V5LnNsaWNlKDgsIDE2KTtcbiAgdmFyIGszID0ga2V5LnNsaWNlKDE2LCAyNCk7XG5cbiAgaWYgKHR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazEgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdlbmNyeXB0Jywga2V5OiBrMyB9KVxuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jaXBoZXJzID0gW1xuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMyB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazIgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsxIH0pXG4gICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBFREUob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgRURFU3RhdGUodGhpcy50eXBlLCB0aGlzLm9wdGlvbnMua2V5KTtcbiAgdGhpcy5fZWRlU3RhdGUgPSBzdGF0ZTtcbn1cbmluaGVyaXRzKEVERSwgQ2lwaGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFREU7XG5cbkVERS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEVERShvcHRpb25zKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZWRlU3RhdGU7XG5cbiAgc3RhdGUuY2lwaGVyc1swXS5fdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcbiAgc3RhdGUuY2lwaGVyc1sxXS5fdXBkYXRlKG91dCwgb3V0T2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMl0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xufTtcblxuRURFLnByb3RvdHlwZS5fcGFkID0gREVTLnByb3RvdHlwZS5fcGFkO1xuRURFLnByb3RvdHlwZS5fdW5wYWQgPSBERVMucHJvdG90eXBlLl91bnBhZDtcbiIsInZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuXG5DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cblxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbnZhciBQQURESU5HID0gQnVmZmVyLmFsbG9jKDE2LCAweDEwKVxuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgaWYgKCFjaHVuay5lcXVhbHMoUEFERElORykpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTUpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICByZXR1cm4gb3V0XG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBwYWRCdWZmXSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIGlmIChjb25maWcubW9kZSAhPT0gJ0dDTScgJiYgaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaXYgbGVuZ3RoICcgKyBpdi5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfVxuXG4gIHJldHVybiBuZXcgQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGNyZWF0ZUNpcGhlclxuIiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgZGF0YSA9IHhvcihibG9jaywgc2VsZi5fcHJldilcblxuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhkYXRhKVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIHBhZCA9IHNlbGYuX3ByZXZcblxuICBzZWxmLl9wcmV2ID0gYmxvY2tcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG5cbiAgcmV0dXJuIHhvcihvdXQsIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9wcmV2LnNsaWNlKDEpLFxuICAgIEJ1ZmZlci5mcm9tKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSlcbiAgXSlcblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyLmxlbmd0aClcbiAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCBCdWZmZXIuZnJvbShbdmFsdWVdKV0pXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGJ1ZmZlcltpXSA8PCAxIHwgYnVmZmVyW2kgKyAxXSA+PiAoNylcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB3aGlsZSAoc2VsZi5fY2FjaGUubGVuZ3RoIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9jYWNoZSwgZ2V0QmxvY2soc2VsZildKVxuICB9XG5cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9FUyA9IEJ1ZmZlci5hbGxvYygxNiwgMClcblxuZnVuY3Rpb24gdG9BcnJheSAoYnVmKSB7XG4gIHJldHVybiBbXG4gICAgYnVmLnJlYWRVSW50MzJCRSgwKSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDQpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoOCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSgxMilcbiAgXVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0gPj4+IDAsIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSA+Pj4gMCwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdID4+PiAwLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10gPj4+IDAsIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIEdIQVNIIChrZXkpIHtcbiAgdGhpcy5oID0ga2V5XG4gIHRoaXMuc3RhdGUgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JWaVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCAxMjgpIHtcbiAgICB4aSA9ICh0aGlzLnN0YXRlW35+KGkgLyA4KV0gJiAoMSA8PCAoNyAtIChpICUgOCkpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaVswXSBePSBWaVswXVxuICAgICAgWmlbMV0gXj0gVmlbMV1cbiAgICAgIFppWzJdIF49IFZpWzJdXG4gICAgICBaaVszXSBePSBWaVszXVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBvZiBMU0IoVl9pKVxuICAgIGxzYlZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYlZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5cbkdIQVNILnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBidWZdKVxuICB2YXIgY2h1bmtcbiAgd2hpbGUgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgY2h1bmsgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHRoaXMuZ2hhc2goY2h1bmspXG4gIH1cbn1cblxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpXG4gIH1cblxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbMCwgYWJsLCAwLCBibF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG4iLCJ2YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcblxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIHJldHVybiB1bnBhZCh0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspKVxuICB9IGVsc2UgaWYgKGNodW5rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoYXV0b1BhZGRpbmcpIHtcbiAgdmFyIG91dFxuICBpZiAoYXV0b1BhZGRpbmcpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2FjaGVcbn1cblxuZnVuY3Rpb24gdW5wYWQgKGxhc3QpIHtcbiAgdmFyIHBhZGRlZCA9IGxhc3RbMTVdXG4gIGlmIChwYWRkZWQgPCAxIHx8IHBhZGRlZCA+IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikgcmV0dXJuXG5cbiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBuZXcgRGVjaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG4iLCJleHBvcnRzWydkZXMtZWNiJ10gPSB7XG4gIGtleTogOCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1jYmMnXSA9IGV4cG9ydHMuZGVzID0ge1xuICBrZXk6IDgsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMy1jYmMnXSA9IGV4cG9ydHMuZGVzMyA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzJ10gPSB7XG4gIGtleTogMjQsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtZWRlLWNiYyddID0ge1xuICBrZXk6IDE2LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZSddID0ge1xuICBrZXk6IDE2LFxuICBpdjogMFxufVxuIiwidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJylcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2xpYi9wcmltZXMuanNvbicpXG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJylcblxuZnVuY3Rpb24gZ2V0RGlmZmllSGVsbG1hbiAobW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKVxuICB2YXIgZ2VuID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5nZW4sICdoZXgnKVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbilcbn1cblxudmFyIEVOQ09ESU5HUyA9IHtcbiAgJ2JpbmFyeSc6IHRydWUsICdoZXgnOiB0cnVlLCAnYmFzZTY0JzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEaWZmaWVIZWxsbWFuIChwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8IEVOQ09ESU5HU1tlbmNdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgJ2JpbmFyeScsIGVuYywgZ2VuZXJhdG9yKVxuICB9XG5cbiAgZW5jID0gZW5jIHx8ICdiaW5hcnknXG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknXG4gIGdlbmVyYXRvciA9IGdlbmVyYXRvciB8fCBuZXcgQnVmZmVyKFsyXSlcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpXG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKVxuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpbWUpKSB7XG4gICAgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lLCBlbmMpXG4gIH1cblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW5lcmF0b3IsIHRydWUpXG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBleHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBjcmVhdGVEaWZmaWVIZWxsbWFuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG5cbiAgaWYgKHByaW1lLmlzRXZlbigpIHx8XG4gICAgIXByaW1lcy5zaW1wbGVTaWV2ZSB8fFxuICAgICFwcmltZXMuZmVybWF0VGVzdChwcmltZSkgfHxcbiAgICAhbWlsbGVyUmFiaW4udGVzdChwcmltZSkpIHtcbiAgICAvL25vdCBhIHByaW1lIHNvICsxXG4gICAgZXJyb3IgKz0gMTtcblxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGVycm9yICs9IDQ7XG4gIH1cbiAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7XG4gIHRoaXMuc2V0R2VuZXJhdG9yKGdlbmVyYXRvcik7XG4gIHRoaXMuX19wcmltZSA9IG5ldyBCTihwcmltZSk7XG4gIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUpO1xuICB0aGlzLl9wcmltZUxlbiA9IHByaW1lLmxlbmd0aDtcbiAgdGhpcy5fcHViID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcml2ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcmltZUNvZGUgPSB1bmRlZmluZWQ7XG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ByaW1lQ29kZSA9IDg7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShESC5wcm90b3R5cGUsICd2ZXJpZnlFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9wcmltZUNvZGUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9wcmltZUNvZGUgPSBjaGVja1ByaW1lKHRoaXMuX19wcmltZSwgdGhpcy5fX2dlbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmltZUNvZGU7XG4gIH1cbn0pO1xuREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9wcml2KSB7XG4gICAgdGhpcy5fcHJpdiA9IG5ldyBCTihyYW5kb21CeXRlcyh0aGlzLl9wcmltZUxlbikpO1xuICB9XG4gIHRoaXMuX3B1YiA9IHRoaXMuX2dlbi50b1JlZCh0aGlzLl9wcmltZSkucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KCk7XG59O1xuXG5ESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBvdGhlciA9IG5ldyBCTihvdGhlcik7XG4gIG90aGVyID0gb3RoZXIudG9SZWQodGhpcy5fcHJpbWUpO1xuICB2YXIgc2VjcmV0ID0gb3RoZXIucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2VjcmV0LnRvQXJyYXkoKSk7XG4gIHZhciBwcmltZSA9IHRoaXMuZ2V0UHJpbWUoKTtcbiAgaWYgKG91dC5sZW5ndGggPCBwcmltZS5sZW5ndGgpIHtcbiAgICB2YXIgZnJvbnQgPSBuZXcgQnVmZmVyKHByaW1lLmxlbmd0aCAtIG91dC5sZW5ndGgpO1xuICAgIGZyb250LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbZnJvbnQsIG91dF0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0UHVibGljS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHViLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiBnZXRQcml2YXRlS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHJpdiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcmltZSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX19wcmltZSwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9nZW4sIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuc2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGdlbiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbikpIHtcbiAgICBnZW4gPSBuZXcgQnVmZmVyKGdlbiwgZW5jKTtcbiAgfVxuICB0aGlzLl9fZ2VuID0gZ2VuO1xuICB0aGlzLl9nZW4gPSBuZXcgQk4oZ2VuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jKSB7XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuLnRvQXJyYXkoKSk7XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYyk7XG4gIH1cbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3JpdGhtcyA9IHJlcXVpcmUoJy4vYWxnb3JpdGhtcy5qc29uJylcbk9iamVjdC5rZXlzKGFsZ29yaXRobXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBhbGdvcml0aG1zW2tleV0uaWQgPSBCdWZmZXIuZnJvbShhbGdvcml0aG1zW2tleV0uaWQsICdoZXgnKVxuICBhbGdvcml0aG1zW2tleS50b0xvd2VyQ2FzZSgpXSA9IGFsZ29yaXRobXNba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuU2lnbi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ25NZXRob2QgKGtleSwgZW5jKSB7XG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBzaWcgPSBzaWduKGhhc2gsIGtleSwgdGhpcy5faGFzaFR5cGUsIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpXG5cbiAgcmV0dXJuIGVuYyA/IHNpZy50b1N0cmluZyhlbmMpIDogc2lnXG59XG5cbmZ1bmN0aW9uIFZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoVmVyaWZ5LCBzdHJlYW0uV3JpdGFibGUpXG5cblZlcmlmeS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIGRvbmUoKVxufVxuXG5WZXJpZnkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSBzaWcgPSBCdWZmZXIuZnJvbShzaWcsIGVuYylcblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICByZXR1cm4gdmVyaWZ5KHNpZywgaGFzaCwga2V5LCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFswLCAxXVxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikgcGFkLnB1c2goMHhmZilcbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHBhZC5wdXNoKGhhc2hbaV0pXG5cbiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gZWNTaWduIChoYXNoLCBwcml2KSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3ByaXYuY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHJpdi5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBrZXkgPSBjdXJ2ZS5rZXlGcm9tUHJpdmF0ZShwcml2LnByaXZhdGVLZXkpXG4gIHZhciBvdXQgPSBrZXkuc2lnbihoYXNoKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmIChzLmNtcG4oMCkgPT09IDApIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSByID0gWzBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbMF0uY29uY2F0KHMpXG5cbiAgdmFyIHRvdGFsID0gci5sZW5ndGggKyBzLmxlbmd0aCArIDRcbiAgdmFyIHJlcyA9IFsweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGhdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWzB4MDIsIHMubGVuZ3RoXSwgcylcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlcylcbn1cblxuZnVuY3Rpb24gZ2V0S2V5ICh4LCBxLCBoYXNoLCBhbGdvKSB7XG4gIHggPSBCdWZmZXIuZnJvbSh4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBCdWZmZXIuYWxsb2MocS5ieXRlTGVuZ3RoKCkgLSB4Lmxlbmd0aClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIHhdKVxuICB9XG4gIHZhciBobGVuID0gaGFzaC5sZW5ndGhcbiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSlcbiAgdmFyIHYgPSBCdWZmZXIuYWxsb2MoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gQnVmZmVyLmFsbG9jKGhsZW4pXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzFdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIHJldHVybiB7IGs6IGssIHY6IHYgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hpZnQpXG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gQnVmZmVyLmFsbG9jKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgb3V0XSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0XG4gIHZhciBrXG5cbiAgZG8ge1xuICAgIHQgPSBCdWZmZXIuYWxsb2MoMClcblxuICAgIHdoaWxlICh0Lmxlbmd0aCAqIDggPCBxLmJpdExlbmd0aCgpKSB7XG4gICAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBrdi52XSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikudXBkYXRlKEJ1ZmZlci5mcm9tKFswXSkpLmRpZ2VzdCgpXG4gICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gIH0gd2hpbGUgKGsuY21wKHEpICE9PSAtMSlcblxuICByZXR1cm4ga1xufVxuXG5mdW5jdGlvbiBtYWtlUiAoZywgaywgcCwgcSkge1xuICByZXR1cm4gZy50b1JlZChCTi5tb250KHApKS5yZWRQb3coaykuZnJvbVJlZCgpLm1vZChxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ25cbm1vZHVsZS5leHBvcnRzLmdldEtleSA9IGdldEtleVxubW9kdWxlLmV4cG9ydHMubWFrZUtleSA9IG1ha2VLZXlcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2hvcnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnc2hvcnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnRpbnYgPSB0aGlzLnR3by5yZWRJbnZtKCk7XG5cbiAgdGhpcy56ZXJvQSA9IHRoaXMuYS5mcm9tUmVkKCkuY21wbigwKSA9PT0gMDtcbiAgdGhpcy50aHJlZUEgPSB0aGlzLmEuZnJvbVJlZCgpLnN1Yih0aGlzLnApLmNtcG4oLTMpID09PSAwO1xuXG4gIC8vIElmIHRoZSBjdXJ2ZSBpcyBlbmRvbW9ycGhpYywgcHJlY2FsY3VsYXRlIGJldGEgYW5kIGxhbWJkYVxuICB0aGlzLmVuZG8gPSB0aGlzLl9nZXRFbmRvbW9ycGhpc20oY29uZik7XG4gIHRoaXMuX2VuZG9XbmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX2VuZG9XbmFmVDIgPSBuZXcgQXJyYXkoNCk7XG59XG5pbmhlcml0cyhTaG9ydEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gU2hvcnRDdXJ2ZTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbSA9IGZ1bmN0aW9uIF9nZXRFbmRvbW9ycGhpc20oY29uZikge1xuICAvLyBObyBlZmZpY2llbnQgZW5kb21vcnBoaXNtXG4gIGlmICghdGhpcy56ZXJvQSB8fCAhdGhpcy5nIHx8ICF0aGlzLm4gfHwgdGhpcy5wLm1vZG4oMykgIT09IDEpXG4gICAgcmV0dXJuO1xuXG4gIC8vIENvbXB1dGUgYmV0YSBhbmQgbGFtYmRhLCB0aGF0IGxhbWJkYSAqIFAgPSAoYmV0YSAqIFB4OyBQeSlcbiAgdmFyIGJldGE7XG4gIHZhciBsYW1iZGE7XG4gIGlmIChjb25mLmJldGEpIHtcbiAgICBiZXRhID0gbmV3IEJOKGNvbmYuYmV0YSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYmV0YXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTtcbiAgICAvLyBDaG9vc2UgdGhlIHNtYWxsZXN0IGJldGFcbiAgICBiZXRhID0gYmV0YXNbMF0uY21wKGJldGFzWzFdKSA8IDAgPyBiZXRhc1swXSA6IGJldGFzWzFdO1xuICAgIGJldGEgPSBiZXRhLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxuICBpZiAoY29uZi5sYW1iZGEpIHtcbiAgICBsYW1iZGEgPSBuZXcgQk4oY29uZi5sYW1iZGEsIDE2KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaG9vc2UgdGhlIGxhbWJkYSB0aGF0IGlzIG1hdGNoaW5nIHNlbGVjdGVkIGJldGFcbiAgICB2YXIgbGFtYmRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLm4pO1xuICAgIGlmICh0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMV07XG4gICAgICBhc3NlcnQodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBiYXNpcyB2ZWN0b3JzLCB1c2VkIGZvciBiYWxhbmNlZCBsZW5ndGgtdHdvIHJlcHJlc2VudGF0aW9uXG4gIHZhciBiYXNpcztcbiAgaWYgKGNvbmYuYmFzaXMpIHtcbiAgICBiYXNpcyA9IGNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksXG4gICAgICAgIGI6IG5ldyBCTih2ZWMuYiwgMTYpXG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJhc2lzID0gdGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJldGE6IGJldGEsXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgYmFzaXM6IGJhc2lzXG4gIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzID0gZnVuY3Rpb24gX2dldEVuZG9Sb290cyhudW0pIHtcbiAgLy8gRmluZCByb290cyBvZiBmb3IgeF4yICsgeCArIDEgaW4gRlxuICAvLyBSb290ID0gKC0xICstIFNxcnQoLTMpKSAvIDJcbiAgLy9cbiAgdmFyIHJlZCA9IG51bSA9PT0gdGhpcy5wID8gdGhpcy5yZWQgOiBCTi5tb250KG51bSk7XG4gIHZhciB0aW52ID0gbmV3IEJOKDIpLnRvUmVkKHJlZCkucmVkSW52bSgpO1xuICB2YXIgbnRpbnYgPSB0aW52LnJlZE5lZygpO1xuXG4gIHZhciBzID0gbmV3IEJOKDMpLnRvUmVkKHJlZCkucmVkTmVnKCkucmVkU3FydCgpLnJlZE11bCh0aW52KTtcblxuICB2YXIgbDEgPSBudGludi5yZWRBZGQocykuZnJvbVJlZCgpO1xuICB2YXIgbDIgPSBudGludi5yZWRTdWIocykuZnJvbVJlZCgpO1xuICByZXR1cm4gWyBsMSwgbDIgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvQmFzaXMgPSBmdW5jdGlvbiBfZ2V0RW5kb0Jhc2lzKGxhbWJkYSkge1xuICAvLyBhcHJ4U3FydCA+PSBzcXJ0KHRoaXMubilcbiAgdmFyIGFwcnhTcXJ0ID0gdGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpIC8gMikpO1xuXG4gIC8vIDMuNzRcbiAgLy8gUnVuIEVHQ0QsIHVudGlsIHIoTCArIDEpIDwgYXByeFNxcnRcbiAgdmFyIHUgPSBsYW1iZGE7XG4gIHZhciB2ID0gdGhpcy5uLmNsb25lKCk7XG4gIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgdmFyIHkxID0gbmV3IEJOKDApO1xuICB2YXIgeDIgPSBuZXcgQk4oMCk7XG4gIHZhciB5MiA9IG5ldyBCTigxKTtcblxuICAvLyBOT1RFOiBhbGwgdmVjdG9ycyBhcmUgcm9vdHMgb2Y6IGEgKyBiICogbGFtYmRhID0gMCAobW9kIG4pXG4gIHZhciBhMDtcbiAgdmFyIGIwO1xuICAvLyBGaXJzdCB2ZWN0b3JcbiAgdmFyIGExO1xuICB2YXIgYjE7XG4gIC8vIFNlY29uZCB2ZWN0b3JcbiAgdmFyIGEyO1xuICB2YXIgYjI7XG5cbiAgdmFyIHByZXZSO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB2YXIgeDtcbiAgd2hpbGUgKHUuY21wbigwKSAhPT0gMCkge1xuICAgIHZhciBxID0gdi5kaXYodSk7XG4gICAgciA9IHYuc3ViKHEubXVsKHUpKTtcbiAgICB4ID0geDIuc3ViKHEubXVsKHgxKSk7XG4gICAgdmFyIHkgPSB5Mi5zdWIocS5tdWwoeTEpKTtcblxuICAgIGlmICghYTEgJiYgci5jbXAoYXByeFNxcnQpIDwgMCkge1xuICAgICAgYTAgPSBwcmV2Ui5uZWcoKTtcbiAgICAgIGIwID0geDE7XG4gICAgICBhMSA9IHIubmVnKCk7XG4gICAgICBiMSA9IHg7XG4gICAgfSBlbHNlIGlmIChhMSAmJiArK2kgPT09IDIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2UiA9IHI7XG5cbiAgICB2ID0gdTtcbiAgICB1ID0gcjtcbiAgICB4MiA9IHgxO1xuICAgIHgxID0geDtcbiAgICB5MiA9IHkxO1xuICAgIHkxID0geTtcbiAgfVxuICBhMiA9IHIubmVnKCk7XG4gIGIyID0geDtcblxuICB2YXIgbGVuMSA9IGExLnNxcigpLmFkZChiMS5zcXIoKSk7XG4gIHZhciBsZW4yID0gYTIuc3FyKCkuYWRkKGIyLnNxcigpKTtcbiAgaWYgKGxlbjIuY21wKGxlbjEpID49IDApIHtcbiAgICBhMiA9IGEwO1xuICAgIGIyID0gYjA7XG4gIH1cblxuICAvLyBOb3JtYWxpemUgc2lnbnNcbiAgaWYgKGExLm5lZ2F0aXZlKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5uZWdhdGl2ZSkge1xuICAgIGEyID0gYTIubmVnKCk7XG4gICAgYjIgPSBiMi5uZWcoKTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgeyBhOiBhMSwgYjogYjEgfSxcbiAgICB7IGE6IGEyLCBiOiBiMiB9XG4gIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0ID0gZnVuY3Rpb24gX2VuZG9TcGxpdChrKSB7XG4gIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpcztcbiAgdmFyIHYxID0gYmFzaXNbMF07XG4gIHZhciB2MiA9IGJhc2lzWzFdO1xuXG4gIHZhciBjMSA9IHYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG4gIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG5cbiAgdmFyIHAxID0gYzEubXVsKHYxLmEpO1xuICB2YXIgcDIgPSBjMi5tdWwodjIuYSk7XG4gIHZhciBxMSA9IGMxLm11bCh2MS5iKTtcbiAgdmFyIHEyID0gYzIubXVsKHYyLmIpO1xuXG4gIC8vIENhbGN1bGF0ZSBhbnN3ZXJcbiAgdmFyIGsxID0gay5zdWIocDEpLnN1YihwMik7XG4gIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7XG4gIHJldHVybiB7IGsxOiBrMSwgazI6IGsyIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB5MiA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICAvLyBYWFggSXMgdGhlcmUgYW55IHdheSB0byB0ZWxsIGlmIHRoZSBudW1iZXIgaXMgb2RkIHdpdGhvdXQgY29udmVydGluZyBpdFxuICAvLyB0byBub24tcmVkIGZvcm0/XG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pbmYpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBwb2ludC54O1xuICB2YXIgeSA9IHBvaW50Lnk7XG5cbiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTtcbiAgdmFyIHJocyA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtcbiAgcmV0dXJuIHkucmVkU3FyKCkucmVkSVN1YihyaHMpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1duYWZNdWxBZGQgPVxuICAgIGZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIG5wb2ludHMgPSB0aGlzLl9lbmRvV25hZlQxO1xuICB2YXIgbmNvZWZmcyA9IHRoaXMuX2VuZG9XbmFmVDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwbGl0ID0gdGhpcy5fZW5kb1NwbGl0KGNvZWZmc1tpXSk7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIGJldGEgPSBwLl9nZXRCZXRhKCk7XG5cbiAgICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsxLmluZWcoKTtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMi5pbmVnKCk7XG4gICAgICBiZXRhID0gYmV0YS5uZWcodHJ1ZSk7XG4gICAgfVxuXG4gICAgbnBvaW50c1tpICogMl0gPSBwO1xuICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7XG4gICAgbmNvZWZmc1tpICogMl0gPSBzcGxpdC5rMTtcbiAgICBuY29lZmZzW2kgKiAyICsgMV0gPSBzcGxpdC5rMjtcbiAgfVxuICB2YXIgcmVzID0gdGhpcy5fd25hZk11bEFkZCgxLCBucG9pbnRzLCBuY29lZmZzLCBpICogMiwgamFjb2JpYW5SZXN1bHQpO1xuXG4gIC8vIENsZWFuLXVwIHJlZmVyZW5jZXMgdG8gcG9pbnRzIGFuZCBjb2VmZmljaWVudHNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBpICogMjsgaisrKSB7XG4gICAgbnBvaW50c1tqXSA9IG51bGw7XG4gICAgbmNvZWZmc1tqXSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCBpc1JlZCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnYWZmaW5lJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSBudWxsO1xuICAgIHRoaXMueSA9IG51bGw7XG4gICAgdGhpcy5pbmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICAvLyBGb3JjZSByZWRnb21lcnkgcmVwcmVzZW50YXRpb24gd2hlbiBsb2FkaW5nIGZyb20gSlNPTlxuICAgIGlmIChpc1JlZCkge1xuICAgICAgdGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICAgIHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLmluZiA9IGZhbHNlO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIGlzUmVkKSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgaXNSZWQpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqLCByZWQpIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaiwgcmVkKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICBpZiAoIXRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm47XG5cbiAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gIGlmIChwcmUgJiYgcHJlLmJldGEpXG4gICAgcmV0dXJuIHByZS5iZXRhO1xuXG4gIHZhciBiZXRhID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSwgdGhpcy55KTtcbiAgaWYgKHByZSkge1xuICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3VydmU7XG4gICAgdmFyIGVuZG9NdWwgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gY3VydmUucG9pbnQocC54LnJlZE11bChjdXJ2ZS5lbmRvLmJldGEpLCBwLnkpO1xuICAgIH07XG4gICAgcHJlLmJldGEgPSBiZXRhO1xuICAgIGJldGEucHJlY29tcHV0ZWQgPSB7XG4gICAgICBiZXRhOiBudWxsLFxuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJldGE7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnkgXTtcblxuICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSwgdGhpcy5wcmVjb21wdXRlZCAmJiB7XG4gICAgZG91YmxlczogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSlcbiAgICB9XG4gIH0gXTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaiwgcmVkKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJylcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIHZhciByZXMgPSBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgaWYgKCFvYmpbMl0pXG4gICAgcmV0dXJuIHJlcztcblxuICBmdW5jdGlvbiBvYmoycG9pbnQob2JqKSB7XG4gICAgcmV0dXJuIGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICB9XG5cbiAgdmFyIHByZSA9IG9ialsyXTtcbiAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgIGJldGE6IG51bGwsXG4gICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgcmV0dXJuIHRoaXMuaW5mO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBQICsgUCA9IDJQXG4gIGlmICh0aGlzLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIC8vIFAgKyAoLVApID0gT1xuICBpZiAodGhpcy5uZWcoKS5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICAvLyBQICsgUSA9IE9cbiAgaWYgKHRoaXMueC5jbXAocC54KSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYyA9IHRoaXMueS5yZWRTdWIocC55KTtcbiAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICBjID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihwLngpLnJlZEludm0oKSk7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAyUCA9IE9cbiAgdmFyIHlzMSA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgaWYgKHlzMS5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIHZhciB4MiA9IHRoaXMueC5yZWRTcXIoKTtcbiAgdmFyIGR5aW52ID0geXMxLnJlZEludm0oKTtcbiAgdmFyIGMgPSB4Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJlZElBZGQoYSkucmVkTXVsKGR5aW52KTtcblxuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGsgPSBuZXcgQk4oaywgMTYpO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGVsc2UgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKFsgdGhpcyBdLCBbIGsgXSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCB0cnVlKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgcmV0dXJuIHRoaXMgPT09IHAgfHxcbiAgICAgICAgIHRoaXMuaW5mID09PSBwLmluZiAmJlxuICAgICAgICAgICAgICh0aGlzLmluZiB8fCB0aGlzLnguY21wKHAueCkgPT09IDAgJiYgdGhpcy55LmNtcChwLnkpID09PSAwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoX3ByZWNvbXB1dGUpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpKTtcbiAgaWYgKF9wcmVjb21wdXRlICYmIHRoaXMucHJlY29tcHV0ZWQpIHtcbiAgICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgICB2YXIgbmVnYXRlID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIHAubmVnKCk7XG4gICAgfTtcbiAgICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0ogPSBmdW5jdGlvbiB0b0ooKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LCB0aGlzLmN1cnZlLm9uZSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBKUG9pbnQoY3VydmUsIHgsIHksIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2phY29iaWFuJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IG5ldyBCTigwKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgfVxuICBpZiAoIXRoaXMueC5yZWQpXG4gICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnkucmVkKVxuICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy56LnJlZClcbiAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuXG4gIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG59XG5pbmhlcml0cyhKUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHopIHtcbiAgcmV0dXJuIG5ldyBKUG9pbnQodGhpcywgeCwgeSwgeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRvUCA9IGZ1bmN0aW9uIHRvUCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciB6aW52ID0gdGhpcy56LnJlZEludm0oKTtcbiAgdmFyIHppbnYyID0gemludi5yZWRTcXIoKTtcbiAgdmFyIGF4ID0gdGhpcy54LnJlZE11bCh6aW52Mik7XG4gIHZhciBheSA9IHRoaXMueS5yZWRNdWwoemludjIpLnJlZE11bCh6aW52KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChheCwgYXkpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSwgdGhpcy56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDEyTSArIDRTICsgN0FcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLngucmVkTXVsKHB6Mik7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnkucmVkTXVsKHB6Mi5yZWRNdWwocC56KSk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIucmVkTXVsKHRoaXMueikpO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKHAueikucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBmdW5jdGlvbiBtaXhlZEFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHAudG9KKCk7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyA4TSArIDNTICsgN0FcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLng7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIpLnJlZE11bCh0aGlzLnopO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAocG93KSB7XG4gIGlmIChwb3cgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKCFwb3cpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EgfHwgdGhpcy5jdXJ2ZS50aHJlZUEpIHtcbiAgICB2YXIgciA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKylcbiAgICAgIHIgPSByLmRibCgpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gMU0gKyAyUyArIDFBICsgTiAqICg0UyArIDVNICsgOEEpXG4gIC8vIE4gPSAxID0+IDZNICsgNlMgKyA5QVxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcbiAgdmFyIHRpbnYgPSB0aGlzLmN1cnZlLnRpbnY7XG5cbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIC8vIFJldXNlIHJlc3VsdHNcbiAgdmFyIGp5ZCA9IGp5LnJlZEFkZChqeSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspIHtcbiAgICB2YXIgangyID0gangucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDIgPSBqeWQucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDQgPSBqeWQyLnJlZFNxcigpO1xuICAgIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gICAgdmFyIHQxID0gangucmVkTXVsKGp5ZDIpO1xuICAgIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcbiAgICB2YXIgZG55ID0gYy5yZWRNdWwodDIpO1xuICAgIGRueSA9IGRueS5yZWRJQWRkKGRueSkucmVkSVN1YihqeWQ0KTtcbiAgICB2YXIgbnogPSBqeWQucmVkTXVsKGp6KTtcbiAgICBpZiAoaSArIDEgPCBwb3cpXG4gICAgICBqejQgPSBqejQucmVkTXVsKGp5ZDQpO1xuXG4gICAganggPSBueDtcbiAgICBqeiA9IG56O1xuICAgIGp5ZCA9IGRueTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCwganlkLnJlZE11bCh0aW52KSwganopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5femVyb0RibCgpO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLnRocmVlQSlcbiAgICByZXR1cm4gdGhpcy5fdGhyZWVEYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9kYmwoKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3plcm9EYmwgPSBmdW5jdGlvbiBfemVyb0RibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTRBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYTsgYSA9IDBcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gICAgLy8gVCA9IE0gXiAyIC0gMipTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcblxuICAgIC8vIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcblxuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyKlkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA5LWxcbiAgICAvLyAyTSArIDVTICsgMTNBXG5cbiAgICAvLyBBID0gWDFeMlxuICAgIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIEIgPSBZMV4yXG4gICAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gQyA9IEJeMlxuICAgIHZhciBjID0gYi5yZWRTcXIoKTtcbiAgICAvLyBEID0gMiAqICgoWDEgKyBCKV4yIC0gQSAtIEMpXG4gICAgdmFyIGQgPSB0aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTtcbiAgICBkID0gZC5yZWRJQWRkKGQpO1xuICAgIC8vIEUgPSAzICogQVxuICAgIHZhciBlID0gYS5yZWRBZGQoYSkucmVkSUFkZChhKTtcbiAgICAvLyBGID0gRV4yXG4gICAgdmFyIGYgPSBlLnJlZFNxcigpO1xuXG4gICAgLy8gOCAqIENcbiAgICB2YXIgYzggPSBjLnJlZElBZGQoYyk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuXG4gICAgLy8gWDMgPSBGIC0gMiAqIERcbiAgICBueCA9IGYucmVkSVN1YihkKS5yZWRJU3ViKGQpO1xuICAgIC8vIFkzID0gRSAqIChEIC0gWDMpIC0gOCAqIENcbiAgICBueSA9IGUucmVkTXVsKGQucmVkSVN1YihueCkpLnJlZElTdWIoYzgpO1xuICAgIC8vIFozID0gMiAqIFkxICogWjFcbiAgICBueiA9IHRoaXMueS5yZWRNdWwodGhpcy56KTtcbiAgICBueiA9IG56LnJlZElBZGQobnopO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fdGhyZWVEYmwgPSBmdW5jdGlvbiBfdGhyZWVEYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE1QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGFcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0aGlzLmN1cnZlLmEpO1xuICAgIC8vIFQgPSBNXjIgLSAyICogU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMiAqIFkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWwjZG91YmxpbmctZGJsLTIwMDEtYlxuICAgIC8vIDNNICsgNVNcblxuICAgIC8vIGRlbHRhID0gWjFeMlxuICAgIHZhciBkZWx0YSA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAvLyBnYW1tYSA9IFkxXjJcbiAgICB2YXIgZ2FtbWEgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gYmV0YSA9IFgxICogZ2FtbWFcbiAgICB2YXIgYmV0YSA9IHRoaXMueC5yZWRNdWwoZ2FtbWEpO1xuICAgIC8vIGFscGhhID0gMyAqIChYMSAtIGRlbHRhKSAqIChYMSArIGRlbHRhKVxuICAgIHZhciBhbHBoYSA9IHRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7XG4gICAgYWxwaGEgPSBhbHBoYS5yZWRBZGQoYWxwaGEpLnJlZElBZGQoYWxwaGEpO1xuICAgIC8vIFgzID0gYWxwaGFeMiAtIDggKiBiZXRhXG4gICAgdmFyIGJldGE0ID0gYmV0YS5yZWRJQWRkKGJldGEpO1xuICAgIGJldGE0ID0gYmV0YTQucmVkSUFkZChiZXRhNCk7XG4gICAgdmFyIGJldGE4ID0gYmV0YTQucmVkQWRkKGJldGE0KTtcbiAgICBueCA9IGFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpO1xuICAgIC8vIFozID0gKFkxICsgWjEpXjIgLSBnYW1tYSAtIGRlbHRhXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueikucmVkU3FyKCkucmVkSVN1YihnYW1tYSkucmVkSVN1YihkZWx0YSk7XG4gICAgLy8gWTMgPSBhbHBoYSAqICg0ICogYmV0YSAtIFgzKSAtIDggKiBnYW1tYV4yXG4gICAgdmFyIGdnYW1tYTggPSBnYW1tYS5yZWRTcXIoKTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBueSA9IGFscGhhLnJlZE11bChiZXRhNC5yZWRJU3ViKG54KSkucmVkSVN1YihnZ2FtbWE4KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX2RibCA9IGZ1bmN0aW9uIF9kYmwoKSB7XG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIC8vIDRNICsgNlMgKyAxMEFcbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgdmFyIGp5MiA9IGp5LnJlZFNxcigpO1xuXG4gIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gIHZhciBqeGQ0ID0gangucmVkQWRkKGp4KTtcbiAganhkNCA9IGp4ZDQucmVkSUFkZChqeGQ0KTtcbiAgdmFyIHQxID0ganhkNC5yZWRNdWwoankyKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcblxuICB2YXIganlkOCA9IGp5Mi5yZWRTcXIoKTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodDIpLnJlZElTdWIoanlkOCk7XG4gIHZhciBueiA9IGp5LnJlZEFkZChqeSkucmVkTXVsKGp6KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRycGwgPSBmdW5jdGlvbiB0cnBsKCkge1xuICBpZiAoIXRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO1xuXG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sI3RyaXBsaW5nLXRwbC0yMDA3LWJsXG4gIC8vIDVNICsgMTBTICsgLi4uXG5cbiAgLy8gWFggPSBYMV4yXG4gIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gWVkgPSBZMV4yXG4gIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gWlogPSBaMV4yXG4gIHZhciB6eiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgLy8gWVlZWSA9IFlZXjJcbiAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgLy8gTSA9IDMgKiBYWCArIGEgKiBaWjI7IGEgPSAwXG4gIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgLy8gTU0gPSBNXjJcbiAgdmFyIG1tID0gbS5yZWRTcXIoKTtcbiAgLy8gRSA9IDYgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpIC0gTU1cbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICBlID0gZS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRBZGQoZSkucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkSVN1YihtbSk7XG4gIC8vIEVFID0gRV4yXG4gIHZhciBlZSA9IGUucmVkU3FyKCk7XG4gIC8vIFQgPSAxNipZWVlZXG4gIHZhciB0ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICAvLyBVID0gKE0gKyBFKV4yIC0gTU0gLSBFRSAtIFRcbiAgdmFyIHUgPSBtLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTtcbiAgLy8gWDMgPSA0ICogKFgxICogRUUgLSA0ICogWVkgKiBVKVxuICB2YXIgeXl1NCA9IHl5LnJlZE11bCh1KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgdmFyIG54ID0gdGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgLy8gWTMgPSA4ICogWTEgKiAoVSAqIChUIC0gVSkgLSBFICogRUUpXG4gIHZhciBueSA9IHRoaXMueS5yZWRNdWwodS5yZWRNdWwodC5yZWRJU3ViKHUpKS5yZWRJU3ViKGUucmVkTXVsKGVlKSkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICAvLyBaMyA9IChaMSArIEUpXjIgLSBaWiAtIEVFXG4gIHZhciBueiA9IHRoaXMuei5yZWRBZGQoZSkucmVkU3FyKCkucmVkSVN1Yih6eikucmVkSVN1YihlZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaywga2Jhc2UpIHtcbiAgayA9IG5ldyBCTihrLCBrYmFzZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICByZXR1cm4gdGhpcy5lcShwLnRvSigpKTtcblxuICBpZiAodGhpcyA9PT0gcClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyB4MSAqIHoyXjIgPT0geDIgKiB6MV4yXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgaWYgKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApICE9PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyB5MSAqIHoyXjMgPT0geTIgKiB6MV4zXG4gIHZhciB6MyA9IHoyLnJlZE11bCh0aGlzLnopO1xuICB2YXIgcHozID0gcHoyLnJlZE11bChwLnopO1xuICByZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciB6cyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHpzKTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBKUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgSlBvaW50IHg6ICcgKyB0aGlzLngudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gTW9udEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdtb250JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5pNCA9IG5ldyBCTig0KS50b1JlZCh0aGlzLnJlZCkucmVkSW52bSgpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYTI0ID0gdGhpcy5pNC5yZWRNdWwodGhpcy5hLnJlZEFkZCh0aGlzLnR3bykpO1xufVxuaW5oZXJpdHMoTW9udEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gTW9udEN1cnZlO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgdmFyIHggPSBwb2ludC5ub3JtYWxpemUoKS54O1xuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0geDIucmVkTXVsKHgpLnJlZEFkZCh4Mi5yZWRNdWwodGhpcy5hKSkucmVkQWRkKHgpO1xuICB2YXIgeSA9IHJocy5yZWRTcXJ0KCk7XG5cbiAgcmV0dXJuIHkucmVkU3FyKCkuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyksIDEpO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKCkge1xuICByZXR1cm4gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpKTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSB8fCBjdXJ2ZS5vbmUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkb3VibGluZy1kYmwtMTk4Ny1tLTNcbiAgLy8gMk0gKyAyUyArIDRBXG5cbiAgLy8gQSA9IFgxICsgWjFcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEFBID0gQV4yXG4gIHZhciBhYSA9IGEucmVkU3FyKCk7XG4gIC8vIEIgPSBYMSAtIFoxXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBCQiA9IEJeMlxuICB2YXIgYmIgPSBiLnJlZFNxcigpO1xuICAvLyBDID0gQUEgLSBCQlxuICB2YXIgYyA9IGFhLnJlZFN1YihiYik7XG4gIC8vIFgzID0gQUEgKiBCQlxuICB2YXIgbnggPSBhYS5yZWRNdWwoYmIpO1xuICAvLyBaMyA9IEMgKiAoQkIgKyBBMjQgKiBDKVxuICB2YXIgbnogPSBjLnJlZE11bChiYi5yZWRBZGQodGhpcy5jdXJ2ZS5hMjQucmVkTXVsKGMpKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRpZmZBZGQgPSBmdW5jdGlvbiBkaWZmQWRkKHAsIGRpZmYpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZGlmZmFkZC1kYWRkLTE5ODctbS0zXG4gIC8vIDRNICsgMlMgKyA2QVxuXG4gIC8vIEEgPSBYMiArIFoyXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBCID0gWDIgLSBaMlxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQyA9IFgzICsgWjNcbiAgdmFyIGMgPSBwLngucmVkQWRkKHAueik7XG4gIC8vIEQgPSBYMyAtIFozXG4gIHZhciBkID0gcC54LnJlZFN1YihwLnopO1xuICAvLyBEQSA9IEQgKiBBXG4gIHZhciBkYSA9IGQucmVkTXVsKGEpO1xuICAvLyBDQiA9IEMgKiBCXG4gIHZhciBjYiA9IGMucmVkTXVsKGIpO1xuICAvLyBYNSA9IFoxICogKERBICsgQ0IpXjJcbiAgdmFyIG54ID0gZGlmZi56LnJlZE11bChkYS5yZWRBZGQoY2IpLnJlZFNxcigpKTtcbiAgLy8gWjUgPSBYMSAqIChEQSAtIENCKV4yXG4gIHZhciBueiA9IGRpZmYueC5yZWRNdWwoZGEucmVkSVN1YihjYikucmVkU3FyKCkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIHZhciB0ID0gay5jbG9uZSgpO1xuICB2YXIgYSA9IHRoaXM7IC8vIChOIC8gMikgKiBRICsgUVxuICB2YXIgYiA9IHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7IC8vIChOIC8gMikgKiBRXG4gIHZhciBjID0gdGhpczsgLy8gUVxuXG4gIGZvciAodmFyIGJpdHMgPSBbXTsgdC5jbXBuKDApICE9PSAwOyB0Lml1c2hybigxKSlcbiAgICBiaXRzLnB1c2godC5hbmRsbigxKSk7XG5cbiAgZm9yICh2YXIgaSA9IGJpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoYml0c1tpXSA9PT0gMCkge1xuICAgICAgLy8gTiAqIFEgKyBRID0gKChOIC8gMikgKiBRICsgUSkpICsgKE4gLyAyKSAqIFFcbiAgICAgIGEgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKSlcbiAgICAgIGIgPSBiLmRibCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOICogUSA9ICgoTiAvIDIpICogUSArIFEpICsgKChOIC8gMikgKiBRKVxuICAgICAgYiA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRICsgUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKVxuICAgICAgYSA9IGEuZGJsKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qdW1sQWRkID0gZnVuY3Rpb24ganVtbEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBFZHdhcmRzQ3VydmUoY29uZikge1xuICAvLyBOT1RFOiBJbXBvcnRhbnQgYXMgd2UgYXJlIGNyZWF0aW5nIHBvaW50IGluIEJhc2UuY2FsbCgpXG4gIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTtcbiAgdGhpcy5tT25lQSA9IHRoaXMudHdpc3RlZCAmJiAoY29uZi5hIHwgMCkgPT09IC0xO1xuICB0aGlzLmV4dGVuZGVkID0gdGhpcy5tT25lQTtcblxuICBCYXNlLmNhbGwodGhpcywgJ2Vkd2FyZHMnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudW1vZCh0aGlzLnJlZC5tKTtcbiAgdGhpcy5hID0gdGhpcy5hLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jID0gbmV3IEJOKGNvbmYuYywgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jMiA9IHRoaXMuYy5yZWRTcXIoKTtcbiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5kZCA9IHRoaXMuZC5yZWRBZGQodGhpcy5kKTtcblxuICBhc3NlcnQoIXRoaXMudHdpc3RlZCB8fCB0aGlzLmMuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDApO1xuICB0aGlzLm9uZUMgPSAoY29uZi5jIHwgMCkgPT09IDE7XG59XG5pbmhlcml0cyhFZHdhcmRzQ3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBFZHdhcmRzQ3VydmU7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHtcbiAgaWYgKHRoaXMubU9uZUEpXG4gICAgcmV0dXJuIG51bS5yZWROZWcoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7XG4gIGlmICh0aGlzLm9uZUMpXG4gICAgcmV0dXJuIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7XG59O1xuXG4vLyBKdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggU2hvcnQgY3VydmVcbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSwgeiwgdCk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3ViKHRoaXMuYS5yZWRNdWwoeDIpKTtcbiAgdmFyIGxocyA9IHRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh4MikpO1xuXG4gIHZhciB5MiA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSk7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVkgPSBmdW5jdGlvbiBwb2ludEZyb21ZKHksIG9kZCkge1xuICB5ID0gbmV3IEJOKHksIDE2KTtcbiAgaWYgKCF5LnJlZClcbiAgICB5ID0geS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8geF4yID0gKHleMiAtIGNeMikgLyAoY14yIGQgeV4yIC0gYSlcbiAgdmFyIHkyID0geS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLmMyKTtcbiAgdmFyIHJocyA9IHkyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh0aGlzLmMyKS5yZWRTdWIodGhpcy5hKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmZyb21SZWQoKS5pc09kZCgpICE9PSBvZGQpXG4gICAgeCA9IHgucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgQk4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgKHRoaXMueS5jbXAodGhpcy56KSA9PT0gMCB8fFxuICAgICh0aGlzLnpPbmUgJiYgdGhpcy55LmNtcCh0aGlzLmN1cnZlLmMpID09PSAwKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLnopLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIGZhbHNlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy5nZXRZKCkuY21wKG90aGVyLmdldFkoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7XG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhLzIyNCcpO1xuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYS8yNTYnKTtcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7XG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhLzUxMicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTFfSyA9IFtcbiAgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSxcbiAgMHg4RjFCQkNEQywgMHhDQTYyQzFENlxuXTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg4MCk7XG59XG5cbnV0aWxzLmluaGVyaXRzKFNIQTEsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIFNIQTI1NiA9IHJlcXVpcmUoJy4vMjU2Jyk7XG5cbmZ1bmN0aW9uIFNIQTIyNCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpXG4gICAgcmV0dXJuIG5ldyBTSEEyMjQoKTtcblxuICBTSEEyNTYuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vNTEyJyk7XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgsXG4gICAgMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyxcbiAgICAweDkxNTkwMTVhLCAweDMwNzBkZDE3LFxuICAgIDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzksXG4gICAgMHg2NzMzMjY2NywgMHhmZmMwMGIzMSxcbiAgICAweDhlYjQ0YTg3LCAweDY4NTgxNTExLFxuICAgIDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcsXG4gICAgMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMzg0LCBTSEE1MTIpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEzODQ7XG5cblNIQTM4NC5ibG9ja1NpemUgPSAxMDI0O1xuU0hBMzg0Lm91dFNpemUgPSAzODQ7XG5TSEEzODQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMzg0LnBhZExlbmd0aCA9IDEyODtcblxuU0hBMzg0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDM2O1xuICB0aGlzLmlubmVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xuXG4gIC8vIDB4MzYgXiAweDVjID0gMHg2YVxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDZhO1xuICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xufTtcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIHRoaXMuaW5uZXIudXBkYXRlKG1zZywgZW5jKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaW5uZXIuZGlnZXN0KCkpO1xuICByZXR1cm4gdGhpcy5vdXRlci5kaWdlc3QoZW5jKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZG91Ymxlczoge1xuICAgIHN0ZXA6IDQsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdlNjBmY2U5M2I1OWU5ZWM1MzAxMWFhYmMyMWMyM2U5N2IyYTMxMzY5Yjg3YTVhZTljNDRlZTg5ZTJhNmRlYzBhJyxcbiAgICAgICAgJ2Y3ZTM1MDczOTllNTk1OTI5ZGI5OWYzNGY1NzkzNzEwMTI5Njg5MWU0NGQyM2YwYmUxZjMyY2NlNjk2MTY4MjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI4MjI2MzIxMmM2MDlkOWVhMmE2ZTNlMTcyZGUyMzhkOGMzOWNhYmQ1YWMxY2ExMDY0NmUyM2ZkNWY1MTUwOCcsXG4gICAgICAgICcxMWY4YTgwOTg1NTdkZmU0NWU4MjU2ZTgzMGI2MGFjZTYyZDYxM2FjMmY3YjE3YmVkMzFiNmVhZmY2ZTI2Y2FmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzknLFxuICAgICAgICAnZDM1MDZlMGQ5ZTNjNzllYmE0ZWY5N2E1MWZmNzFmNWVhY2I1OTU1YWRkMjQzNDVjNmVmYTZmZmVlOWZlZDY5NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNjNkOTBkNDQ3YjAwYzljOTljZWFjMDViNjI2MmVlMDUzNDQxYzdlNTU1NTJmZmU1MjZiYWQ4ZjgzZmY0NjQwJyxcbiAgICAgICAgJzRlMjczYWRmYzczMjIyMTk1M2I0NDUzOTdmMzM2MzE0NWI5YTg5MDA4MTk5ZWNiNjIwMDNjN2YzYmVlOWRlOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YjRiNWYxNjVkZjNjMmJlOGM2MjQ0YjViNzQ1NjM4ODQzZTRhNzgxYTE1YmNkMWI2OWY3OWE1NWRmZmRmODBjJyxcbiAgICAgICAgJzRhYWQwYTZmNjhkMzA4YjRiM2ZiZDc4MTNhYjBkYTA0ZjllMzM2NTQ2MTYyZWU1NmIzZWZmMGM2NWZkNGZkMzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBlNzdiY2I2MTE1OTI1MjMyZmNkYScsXG4gICAgICAgICc5NmU4NjdiNTU5NWNjNDk4YTkyMTEzNzQ4ODgyNGQ2ZTI2NjBhMDY1Mzc3OTQ5NDgwMWRjMDY5ZDllYjM5ZjVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlYmZhNGQ0OTNiZWJmOThiYTVmZWVjODEyYzJkM2I1MDk0Nzk2MTIzN2E5MTk4MzlhNTMzZWNhMGU3ZGQ3ZmEnLFxuICAgICAgICAnNWQ5YThjYTM5NzBlZjBmMjY5ZWU3ZWRhZjE3ODA4OWQ5YWU0Y2RjM2E3MTFmNzEyZGRmZDRmZGFlMWRlODk5OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMDBmNDRkYTY5NmU3MTY3Mjc5MWQwYTA5YjdiZGU0NTlmMTIxNWEyOWIzYzAzYmZlZmQ3ODM1YjM5YTQ4ZGIwJyxcbiAgICAgICAgJ2NkZDllMTMxOTJhMDBiNzcyZWM4ZjMzMDBjMDkwNjY2YjdmZjRhMThmZjUxOTVhYzBmYmQ1Y2Q2MmJjNjVhMDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZCcsXG4gICAgICAgICc5ZDcwNjE5Mjg5NDA0MDVlNmJiNmE0MTc2NTk3NTM1YWYyOTJkZDQxOWUxY2VkNzlhNDRmMThmMjk0NTZhMDBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlZWE2Y2FlNDZkNTViNTMwYWMyODM5ZjE0M2JkN2VjNWNmOGIyNjZhNDFkNmFmNTJkNWU2ODhkOTA5NDY5NmQnLFxuICAgICAgICAnZTU3YzZiNmM5N2RjZTFiYWIwNmU0ZTEyYmYzZWNkNWM5ODFjODk1N2NjNDE0NDJkMzE1NWRlYmYxODA5MDA4OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY3YTkxZDkxMDQ5Y2RjYjM2N2JlNGJlNmZmY2EzY2ZlZWQ2NTdkODA4NTgzZGUzM2ZhOTc4YmMxZWM2Y2IxJyxcbiAgICAgICAgJzliYWNhYTM1NDgxNjQyYmM0MWY0NjNmN2VjOTc4MGU1ZGVjN2FkYzUwOGY3NDBhMTdlOWVhOGUyN2E2OGJlMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMCcsXG4gICAgICAgICc1YmMwODdkMGJjODAxMDZkODhjOWVjY2FjMjBkM2MxYzEzOTk5OTgxZTE0NDM0Njk5ZGNiMDk2YjAyMjc3MWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlN2JjZDBiZDM1OTgzYTc3MTljY2E3NzY0Y2E5MDY3NzliNTNhMDQzYTliOGJjYWVmZjk1OWY0M2FkODYwNDcnLFxuICAgICAgICAnMTBiNzc3MGIyYTNkYTRiMzk0MDMxMDQyMGNhOTUxNDU3OWU4OGUyZTQ3ZmQ2OGIzZWExMDA0N2U4NDYwMzcyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczODVlZWQzNGMxY2RmZjIxZTZkMDgxODY4OWI4MWJkZTcxYTdmNGYxODM5N2U2NjkwYTg0MWUxNTk5YzQzODYyJyxcbiAgICAgICAgJzI4M2JlYmMzZThlYTIzZjU2NzAxZGUxOWU5ZWJmNDU3NmIzMDRlZWMyMDg2ZGM4Y2MwNDU4ZmU1NTQyZTU0NTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmY5ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3JyxcbiAgICAgICAgJzdjODBjNjhlNjAzMDU5YmE2OWI4ZTJhMzBlNDVjNGQ0N2VhNGRkMmY1YzI4MTAwMmQ4Njg5MDYwM2E4NDIxNjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzMyMmQ0MDEyNDNjNGUyNTgyYTIxNDdjMTA0ZDZlY2JmNzc0ZDE2M2RiMGY1ZTUzMTNiN2UwZTc0MmQwZTZiZCcsXG4gICAgICAgICc1NmU3MDc5N2U5NjY0ZWY1YmZiMDE5YmM0ZGRhZjliNzI4MDVmNjNlYTI4NzNhZjYyNGYzYTJlOTZjMjhiMmEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1NjcyYzdkMmRlMGI3ZGEyYmQxNzcwZDg5NjY1ODY4NzQxYjNmOWFmNzY0MzM5NzcyMWQ3NGQyODEzNGFiODMnLFxuICAgICAgICAnN2M0ODFiOWI1YjQzYjJlYjYzNzQwNDliZmE2MmMyZTVlNzdmMTdmY2M1Mjk4ZjQ0YzhlMzA5NGY3OTAzMTNhNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGEnLFxuICAgICAgICAnNTNhNTYyODU2ZGNiNjY0NmRjNmI3NGM1ZDFjMzQxOGM2ZDRkZmYwOGM5N2NkMmJlZDRjYjdmODhkOGM4ZTU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MjYwY2U3ZjQ2MTgwMWMzNGYwNjdjZTBmMDI4NzNhOGYxYjBlNDRkZmM2OTc1MmFjY2VjZDgxOWYzOGZkOGU4JyxcbiAgICAgICAgJ2JjMmRhODJiNmZhNWI1NzFhN2YwOTA0OTc3NmExZWY3ZWNkMjkyMjM4MDUxYzE5OGMxYTg0ZTk1YjJiNGFlMTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTUwMzdkZTBhZmMxZDhkNDNkODM0ODQxNGJiZjQxMDMwNDNlYzhmNTc1YmZkYzQzMjk1M2NjOGQyMDM3ZmEyZCcsXG4gICAgICAgICc0NTcxNTM0YmFhOTRkM2I1ZjlmOThkMDlmYjk5MGJkZGJkNWY1YjAzZWM0ODFmMTBlMGU1ZGM4NDFkNzU1YmRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjUnLFxuICAgICAgICAnN2E5MDg5NzRiY2UxOGNmZTEyYTI3YmIyYWQ1YTQ4OGNkNzQ4NGE3Nzg3MTA0ODcwYjI3MDM0Zjk0ZWVlMzFkZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyMTNjN2E3MTVjZDVkNDUzNThkMGJiZjlkYzBjZTAyMjA0YjEwYmRkZTJhM2Y1ODU0MGFkNjkwOGQwNTU5NzU0JyxcbiAgICAgICAgJzRiNmRhZDBiNWFlNDYyNTA3MDEzYWQwNjI0NWJhMTkwYmI0ODUwZjVmMzZhN2VlZGRmZjJjMjc1MzRiNDU4ZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU3YzI3MmE3YWY0YjM0ZThkYmI5MzUyYTU0MTlhODdlMjgzOGM3MGFkYzYyY2RkZjBjYzNhM2IwOGZiZDUzYycsXG4gICAgICAgICcxNzc0OWM3NjZjOWQwYjE4ZTE2ZmQwOWY2ZGVmNjgxYjUzMGI5NjE0YmZmN2RkMzNlMGIzOTQxODE3ZGNhYWU2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjYnLFxuICAgICAgICAnNmUwNTY4ZGI5YjBiMTMyOTdjZjY3NGRlY2NiNmFmOTMxMjZiNTk2Yjk3M2Y3Yjc3NzAxZDNkYjdmMjNjYjk2ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NmU2NDExM2Y2NzdjZjBlMTBhMjU3MGQ1OTk5NjhkMzE1NDRlMTc5Yjc2MDQzMjk1MmMwMmE0NDE3YmRkZTM5JyxcbiAgICAgICAgJ2M5MGRkZjhkZWU0ZTk1Y2Y1NzcwNjZkNzA2ODFmMGQzNWUyYTMzZDJiNTZkMjAzMmI0YjE3NTJkMTkwMWFjMDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzczOGM1NmIwM2IyYWJlMWU4MjgxYmFhNzQzZjhmOWE4ZjdjYzY0M2RmMjZjYmVlM2FiMTUwMjQyYmNiYjg5MScsXG4gICAgICAgICc4OTNmYjU3ODk1MWFkMjUzN2Y3MThmMmVhY2JmYmJiYjgyMzE0ZWVmNzg4MGNmZTkxN2U3MzVkOTY5OWE4NGMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGInLFxuICAgICAgICAnZmViZmFhMzhmMmJjN2VhZTcyOGVjNjA4MThjMzQwZWIwMzQyOGQ2MzJiYjA2N2UxNzkzNjNlZDc1ZDdkOTkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiOGRhOTQwMzJhOTU3NTE4ZWIwZjY0MzM1NzFlODc2MWNlZmZjNzM2OTNlODRlZGQ0OTE1MGE1NjRmNjc2ZTAzJyxcbiAgICAgICAgJzI4MDRkZmE0NDgwNWExZTRkN2M5OWNjOTc2MjgwOGIwOTJjYzU4NGQ5NWZmM2I1MTE0ODhlNGU3NGVmZGY2ZTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTgwZmVhMTQ0NDFmYjMzYTdkOGFkYWI5NDc1ZDdmYWIyMDE5ZWZmYjUxNTZhNzkyZjFhMTE3NzhlM2MwZGY1ZCcsXG4gICAgICAgICdlZWQxZGU3ZjYzOGUwMDc3MWU4OTc2OGNhM2NhOTQ0NzJkMTU1ZTgwYWYzMjJlYTlmY2I0MjkxYjZhYzllYzc4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJhMTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzAnLFxuICAgICAgICAnNzM3MGY5MWNmYjY3ZTRmNTA4MTgwOWZhMjVkNDBmOWIxNzM1ZGJmN2MwYTExYTEzMGMwZDFhMDQxZTE3N2VhMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MGFkODViMzg5ZDZiOTM2NDYzZjlkMDUxMjY3OGRlMjA4Y2MzMzBiMTEzMDdmZmZhYjdhYzYzZTNmYjA0ZWQ0JyxcbiAgICAgICAgJ2U1MDdhMzYyMGEzODI2MWFmZmRjYmQ5NDI3MjIyYjgzOWFlZmFiZTE1ODI4OTRkOTkxZDRkNDhjYjZlZjE1MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZjY4YjlkMmY2M2I1ZjMzOTIzOWMxYWQ5ODFmMTYyZWU4OGM1Njc4NzIzZWEzMzUxYjdiNDQ0YzllYzRjMGRhJyxcbiAgICAgICAgJzY2MmE5ZjJkYmEwNjM5ODZkZTFkOTBjMmI2YmUyMTVkYmJlYTJjZmU5NTUxMGJmZGYyM2NiZjc5NTAxZmZmODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMScsXG4gICAgICAgICcxZTYzNjMzYWQwZWY0ZjFjMTY2MWE2ZDBlYTAyYjcyODZjYzdlNzRlYzk1MWQxYzk4MjJjMzg1NzZmZWI3M2JjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMDBmYTliMThlYmYzMzFlYjk2MTUzN2E0NWE0MjY2YzcwMzRmMmYwZDRlMWQwNzE2ZmI2ZWFlMjBlYWUyOWUnLFxuICAgICAgICAnZWZhNDcyNjdmZWE1MjFhMWE5ZGMzNDNhMzczNmM5NzRjMmZhZGFmYTgxZTM2YzU0ZTdkMmE0YzY2NzAyNDE0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlN2EyNmNlNjlkZDQ4MjlmM2UxMGNlYzBhOWU5OGVkMzE0M2QwODRmMzA4YjkyYzA5OTdmZGRmYzYwY2IzZTQxJyxcbiAgICAgICAgJzJhNzU4ZTMwMGZhNzk4NGI0NzFiMDA2YTFhYWZiYjE4ZDBhNmIyYzA0MjBlODNlMjBlOGE5NDIxY2YyY2ZkNTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZicsXG4gICAgICAgICc2N2M4NzZkMDZmM2UwNmRlMWRhZGYxNmU1NjYxZGIzYzRiM2FlNmQ0OGUzNWIyZmYzMGJmMGI2MWE3MWJhNDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDY4YTgwYzgyODBiYjg0MDc5MzIzNGFhMTE4ZjA2MjMxZDZmMWZjNjdlNzNjNWE1ZGVkYTBmNWI0OTY5NDNlOCcsXG4gICAgICAgICdkYjhiYTlmZmY0YjU4NmQwMGM0YjFmOTE3N2IwZTI4YjViMGU3YjhmNzg0NTI5NWEyOTRjODQyNjZiMTMzMTIwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyNGFlZDdkZjY1YzgwNDI1MmRjMDI3MDkwN2EzMGIwOTYxMmFlYjk3MzQ0OWNlYTQwOTU5ODBmYzI4ZDNkNWQnLFxuICAgICAgICAnNjQ4YTM2NTc3NGI2MWYyZmYxMzBjMGMzNWFlYzFmNGYxOTIxM2IwYzdlMzMyODQzOTY3MjI0YWY5NmFiN2M4NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2JyxcbiAgICAgICAgJzM1ZWM1MTA5MmQ4NzI4MDUwOTc0YzIzYTFkODVkNGI1ZDUwNmNkYzI4ODQ5MDE5MmViYWMwNmNhZDEwZDVkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzljMzkxOWE4NGE0NzQ4NzBmYWVkOGE5YzFjYzY2MDIxNTIzNDg5MDU0ZDdmMDMwOGNiZmM5OWM4YWMxZjk4Y2QnLFxuICAgICAgICAnZGRiODRmMGY0YTRkZGQ1NzU4NGYwNDRiZjI2MGU2NDE5MDUzMjZmNzZjNjRjOGU2YmU3ZTVlMDNkNGZjNTk5ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDU3MTcwYjFkZDEyZmRmOGRlMDVmMjgxZDhlMDZiYjkxZTE0OTNhOGI5MWQ0Y2M1YTIxMzgyMTIwYTk1OWU1JyxcbiAgICAgICAgJzlhMWFmMGIyNmE2YTQ4MDdhZGQ5YTJkYWY3MWRmMjYyNDY1MTUyYmMzZWUyNGM2NWU4OTliZTkzMjM4NWEyYTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NicsXG4gICAgICAgICc0MGE2YmYyMGU3NjY0MGIyYzkyYjk3YWZlNThjZDgyYzQzMmUxMGE3ZjUxNGQ5ZjNlZThiZTExYWUxYjI4ZWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NzhhNzhjMjhkZWMzZTMwYTA1ZmU5NjI5ZGU4YzM4YmIzMGQxZjVjZjlhM2EyMDhmNzYzODg5YmU1OGFkNzEnLFxuICAgICAgICAnMzQ2MjZkOWFiNWE1YjIyZmY3MDk4ZTEyZjJmZjU4MDA4N2IzODQxMWZmMjRhYzU2M2I1MTNmYzFmZDlmNDNhYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5Mjg5NTVlZTYzN2E4NDQ2MzcyOWZkMzBlN2FmZDJlZDVmOTYyNzRlNWFkN2U1Y2IwOWVkYTljMDZkOTAzYWMnLFxuICAgICAgICAnYzI1NjIxMDAzZDNmNDJhODI3Yjc4YTEzMDkzYTk1ZWVhYzNkMjZlZmE4YThkODNmYzUxODBlOTM1YmNkMDkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxJyxcbiAgICAgICAgJzFmMDM2NDg0MTNhMzhjMGJlMjlkNDk2ZTU4MmNmNTY2M2U4NzUxZTk2ODc3MzMxNTgyYzIzN2EyNGViMWY5NjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYyYjBkY2U5N2VlY2U5N2MxYzliNjA0MTc5OGI4NWRmZGZiNmQ4ODgyZGEyMDMwOGY1NDA0ODI0NTI2MDg3ZScsXG4gICAgICAgICc0OTNkMTNmZWY1MjRiYTE4OGFmNGM0ZGM1NGQwNzkzNmM3YjdlZDZmYjkwZTJjZWIyYzk1MWUwMWYwYzI5OTA3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyN2ZiYmU0YjFlODgwZWE5ZWQyYjJlNjMwMWIyMTJiNTdmMWVlMTQ4Y2Q2ZGQyODc4MGU1ZTJjZjg1NmUyNDEnLFxuICAgICAgICAnYzYwZjljOTIzYzcyN2IwYjcxYmVmMmM2N2QxZDEyNjg3ZmY3YTYzMTg2OTAzMTY2ZDYwNWI2OGJhZWMyOTNlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzJyxcbiAgICAgICAgJ2JlMzI3OWVkNWJiYmIwM2FjNjlhODBmODk4NzlhYTVhMDFhNmI5NjVmMTNmN2U1OWQ0N2E1MzA1YmE1YWQ5M2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRhNDJkNDNjNWNmMTY5ZDkzOTFkZjZkZWNmNDJlZTU0MWI2ZDhmMGM5YTEzNzQwMWUyMzYzMmRkYTM0ZDI0ZicsXG4gICAgICAgICc0ZDlmOTJlNzE2ZDFjNzM1MjZmYzk5Y2NmYjhhZDM0Y2U4ODZlZWRmYThkOGU0ZjEzYTdmNzEzMWRlYmE5NDE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlYzgwZmVmMzYwY2JkZDk1NDE2MGZhZGFiMzUyYjZiOTJiNTM1NzZhODhmZWE0OTQ3MTczYjlkNDMwMGJmMTknLFxuICAgICAgICAnYWVlZmU5Mzc1NmI1MzQwZDJmM2E0OTU4YTdhYmJmNWUwMTQ2ZTc3ZjYyOTVhMDdiNjcxY2RjMWNjMTA3Y2VmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlJyxcbiAgICAgICAgJ2IzMThlMGVjMzM1NDAyOGFkZDY2OTgyN2Y5ZDRiMjg3MGFhYTk3MWQyZjdlNWVkMWQwYjI5NzQ4M2Q4M2VmZDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmE1MGMwZjYxZDIyZTVmMDdlM2FjZWJiMWFhMDdiMTI4ZDAwMTIyMDlhMjhiOTc3NmQ3NmE4NzkzMTgwZWVmOScsXG4gICAgICAgICc2Yjg0YzY5MjIzOTdlYmE5YjcyY2QyODcyMjgxYTY4YTVlNjgzMjkzYTU3YTIxM2IzOGNkOGQ3ZDNmNGYyODExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhMWQ2MWQwY2E3MjFhMTFiMWE1YmY2YjdkODhlODQyMWEyODhhYjVkNWJiYTUyMjBlNTNkMzJiNWYwNjdlYzInLFxuICAgICAgICAnODE1N2Y1NWE3Yzk5MzA2Yzc5YzA3NjYxNjFjOTFlMjk2NmE3Mzg5OWQyNzliNDhhNjU1ZmJhMGYxYWQ4MzZmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZkNDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzJyxcbiAgICAgICAgJzdmOTczNTViOGRiODFjMDlhYmZiN2YzYzViMjUxNTg4OGI2NzlhM2U1MGRkNmJkNmNlZjdjNzMxMTFmNGNjMGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc0YTUzYjljOWEyODU4NzJkMzllNTZlNjkxM2NhYjE1ZDU5YjFmYTUxMjUwOGMwMjJmMzgyZGU4MzE5NDk3YycsXG4gICAgICAgICdjY2M5ZGMzN2FiZmM5YzE2NTdiNDE1NWYyYzQ3ZjllNjY0NmIzYTFkOGNiOTg1NDM4M2RhMTNhYzA3OWFmYTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk1OTM5Njk4MTk0Mzc4NWMzZDNlNTdlZGY1MDE4Y2RiZTAzOWU3MzBlNDkxOGIzZDg4NGZkZmYwOTQ3NWI3YmEnLFxuICAgICAgICAnMmU3ZTU1Mjg4OGMzMzFkZDhiYTAzODZhNGI5Y2Q2ODQ5YzY1M2Y2NGM4NzA5Mzg1ZTliOGFiZjg3NTI0ZjJmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxJyxcbiAgICAgICAgJ2U4MmQ4NmZiNjQ0M2ZjYjc1NjVhZWU1OGIyOTQ4MjIwYTcwZjc1MGFmNDg0Y2E1MmQ0MTQyMTc0ZGNmODk0MDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjQ1ODdlMjMzNTQ3MWViODkwZWU3ODk2ZDdjZmRjODY2YmFjYmRiZDM4MzkzMTdiMzQzNmY5YjQ1NjE3ZTA3MycsXG4gICAgICAgICdkOTlmY2RkNWJmNjkwMmUyYWU5NmRkNjQ0N2MyOTlhMTg1YjkwYTM5MTMzYWVhYjM1ODI5OWU1ZTlmYWY2NTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0ODFiZGUwZTRlNGQ4ODViM2E1NDZkM2U1NDlkZTA0MmYwYWE2Y2VhMjUwZTdmZDM1OGQ2Yzg2ZGQ0NWU0NTgnLFxuICAgICAgICAnMzhlZTdiOGNiYTU0MDRkZDg0YTI1YmYzOWNlY2IyY2E5MDBhNzljNDJiMjYyZTU1NmQ2NGIxYjU5Nzc5MDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiJyxcbiAgICAgICAgJzY5YmUxNTkwMDQ2MTQ1ODBlZjdlNDMzNDUzY2NiMGNhNDhmMzAwYTgxZDA5NDJlMTNmNDk1YTkwN2Y2ZWNjMjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmM0YTlkZjViNzEzZmUyZTlhZWY0MzBiY2MxZGM5N2EwY2Q5Y2NlZGUyZjI4NTg4Y2FkYTNhMGQyZDgzZjM2NicsXG4gICAgICAgICdkM2E4MWNhNmU3ODVjMDYzODM5MzdhZGY0Yjc5OGNhYTZlOGE5ZmJmYTU0N2IxNmQ3NThkNjY2NTgxZjMzYzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMyOGE5N2JmODI5OGJjMGQyM2Q4Yzc0OTQ1MmEzMmU2OTRiNjVlMzBhOTQ3MmEzOTU0YWIzMGZlNTMyNGNhYScsXG4gICAgICAgICc0MGEzMDQ2M2EzMzA1MTkzMzc4ZmVkZjMxZjdjYzBlYjdhZTc4NGYwNDUxY2I5NDU5ZTcxZGM3M2NiZWY5NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMCcsXG4gICAgICAgICc2MjBlZmFiYmM4ZWUyNzgyZTI0ZTdjMGNmYjk1YzVkNzM1Yjc4M2JlOWNmMGY4ZTk1NWFmMzRhMzBlNjJiOTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RkMzYyNWZhZWY1YmEwNjA3NDY2OTcxNmJiZDM3ODhkODliZGRlODE1OTU5OTY4MDkyZjc2Y2M0ZWI5YTk3ODcnLFxuICAgICAgICAnN2ExODhmYTM1MjBlMzBkNDYxZGEyNTAxMDQ1NzMxY2E5NDE0NjE5ODI4ODMzOTU5MzdmNjhkMDBjNjQ0YTU3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmNzEwZDc5ZDllYjk2MjI5N2U0ZjYyMzJiNDBlOGY3ZmViMmJjNjM4MTQ2MTRkNjkyYzEyZGU3NTI0MDgyMjFlJyxcbiAgICAgICAgJ2VhOThlNjcyMzJkM2IzMjk1ZDNiNTM1NTMyMTE1Y2NhYzg2MTJjNzIxODUxNjE3NTI2YWU0N2E5Yzc3YmZjODInXG4gICAgICBdXG4gICAgXVxuICB9LFxuICBuYWY6IHtcbiAgICB3bmQ6IDcsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdmOTMwOGEwMTkyNThjMzEwNDkzNDRmODVmODlkNTIyOWI1MzFjODQ1ODM2Zjk5YjA4NjAxZjExM2JjZTAzNmY5JyxcbiAgICAgICAgJzM4OGY3YjBmNjMyZGU4MTQwZmUzMzdlNjJhMzdmMzU2NjUwMGE5OTkzNGMyMjMxYjZjYjlmZDc1ODRiOGU2NzInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmY4YmRlNGQxYTA3MjA5MzU1YjRhNzI1MGE1YzUxMjhlODhiODRiZGRjNjE5YWI3Y2JhOGQ1NjliMjQwZWZlNCcsXG4gICAgICAgICdkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVjYmRmMDY0NmU1ZGI0ZWFhMzk4ZjM2NWYyZWE3YTBlM2Q0MTliN2UwMzMwZTM5Y2U5MmJkZGVkY2FjNGY5YmMnLFxuICAgICAgICAnNmFlYmNhNDBiYTI1NTk2MGEzMTc4ZDZkODYxYTU0ZGJhODEzZDBiODEzZmRlN2I1YTUwODI2MjgwODcyNjRkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhY2Q0ODRlMmYwYzdmNjUzMDlhZDE3OGE5ZjU1OWFiZGUwOTc5Njk3NGM1N2U3MTRjMzVmMTEwZGZjMjdjY2JlJyxcbiAgICAgICAgJ2NjMzM4OTIxYjBhN2Q5ZmQ2NDM4MDk3MTc2M2I2MWU5YWRkODg4YTQzNzVmOGUwZjA1Y2MyNjJhYzY0ZjljMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc0YWU3Zjg1OGE5NDExZTVlZjQyNDZiNzBjNjVhYWM1NjQ5OTgwYmU1YzE3ODkxYmJlYzE3ODk1ZGEwMDhjYicsXG4gICAgICAgICdkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyODc3M2MyZDk3NTI4OGJjN2QxZDIwNWMzNzQ4NjUxYjA3NWZiYzY2MTBlNThjZGRlZWRkZjhmMTk0MDVhYTgnLFxuICAgICAgICAnYWIwOTAyZThkODgwYTg5NzU4MjEyZWI2NWNkYWY0NzNhMWEwNmRhNTIxZmE5MWYyOWI1Y2I1MmRiMDNlZDgxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3OTI0ZDRmN2Q0M2VhOTY1YTQ2NWFlMzA5NWZmNDExMzFlNTk0NmYzYzg1Zjc5ZTQ0YWRiY2Y4ZTI3ZTA4MGUnLFxuICAgICAgICAnNTgxZTI4NzJhODZjNzJhNjgzODQyZWMyMjhjYzZkZWZlYTQwYWYyYmQ4OTZkM2E1YzUwNGRjOWZmNmEyNmI1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZWZkZWE0Y2RiNjc3NzUwYTQyMGZlZTgwN2VhY2YyMWViOTg5OGFlNzliOTc2ODc2NmU0ZmFhMDRhMmQ0YTM0JyxcbiAgICAgICAgJzQyMTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmI0ZWEwYTc5N2E0NDNkMjkzZWY1Y2ZmNDQ0ZjQ5NzlmMDZhY2ZlYmQ3ZTg2ZDI3NzQ3NTY1NjEzODM4NWI2YycsXG4gICAgICAgICc4NWU4OWJjMDM3OTQ1ZDkzYjM0MzA4M2I1YTFjODYxMzFhMDFmNjBjNTAyNjk3NjNiNTcwYzg1NGU1YzA5YjdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MmJiZjRhNGNkZDEyNTY0ZjkzZmEzMzJjZTMzMzMwMWQ5YWQ0MDI3MWY4MTA3MTgxMzQwYWVmMjViZTU5ZDUnLFxuICAgICAgICAnMzIxZWI0MDc1MzQ4ZjUzNGQ1OWMxODI1OWRkYTNlMWY0YTFiM2IyZTcxYjEwMzljNjdiZDNkOGJjZjgxOTk4YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZmEyMTA0ZDZiMzhkMTFiMDIzMDAxMDU1OTg3OTEyNGU0MmFiOGRmZWZmNWZmMjlkYzljZGFkZDRlY2FjYzNmJyxcbiAgICAgICAgJzJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MjQ4Mjc5YjA5YjRkNjhkYWIyMWE5YjA2NmVkZGE4MzI2M2MzZDg0ZTA5NTcyZTI2OWNhMGNkN2Y1NDUzNzE0JyxcbiAgICAgICAgJzczMDE2ZjdiZjIzNGFhZGU1ZDFhYTcxYmRlYTJiMWZmM2ZjMGRlMmE4ODc5MTJmZmU1NGEzMmNlOTdjYjM0MDInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGFlZDRmMmJlM2E4YmYyNzhlNzAxMzJmYjBiZWI3NTIyZjU3MGUxNDRiZjYxNWMwN2U5OTZkNDQzZGVlODcyOScsXG4gICAgICAgICdhNjlkY2U0YTdkNmM5OGU4ZDRhMWFjYTg3ZWY4ZDcwMDNmODNjMjMwZjNhZmE3MjZhYjQwZTUyMjkwYmUxYzU1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0NGQxMmM3MDY1ZDgxMmU4YWNmMjhkN2NiYjE5ZjkwMTFlY2Q5ZTlmZGYyODFiMGU2YTNiNWU4N2QyMmU3ZGInLFxuICAgICAgICAnMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2YTI0NWJmNmRjNjk4NTA0Yzg5YTIwY2ZkZWQ2MDg1MzE1MmI2OTUzMzZjMjgwNjNiNjFjNjVjYmQyNjllNmI0JyxcbiAgICAgICAgJ2UwMjJjZjQyYzJiZDRhNzA4YjNmNTEyNmYxNmEyNGFkOGIzM2JhNDhkMDQyM2I2ZWZkNWU2MzQ4MTAwZDhhODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTY5N2ZmYTZmZDlkZTYyN2MwNzdlM2QyZmU1NDEwODRjZTEzMzAwYjBiZWMxMTQ2Zjk1YWU1N2YwZDBiZDZhNScsXG4gICAgICAgICdiOWMzOThmMTg2ODA2ZjVkMjc1NjE1MDZlNDU1NzQzM2EyY2YxNTAwOWU0OThhZTdhZGVlOWQ2M2QwMWIyMzk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNWJkYjAxOTk4MTcxOGI5ODZkMGYwN2U4MzRjYjBkOWRlYjgzNjBmZmI3ZjYxZGY5ODIzNDVlZjI3YTc0NzknLFxuICAgICAgICAnMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyZDE0ZGFiNDE1MGJmNDk3NDAyZmRjNDVhMjE1ZTEwZGNiMDFjMzU0OTU5YjEwY2ZlMzFjN2U5ZDg3ZmYzM2QnLFxuICAgICAgICAnODBmYzA2YmQ4Y2M1YjAxMDk4MDg4YTE5NTBlZWQwZGIwMWFhMTMyOTY3YWI0NzIyMzVmNTY0MjQ4M2IyNWVhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MGM2MGFkMDA0MGYyN2RhZGU1YjRiMDZjNDA4ZTU2YjJjNTBlOWY1NmI5YjhiNDI1ZTU1NWMyZjg2MzA4YjZmJyxcbiAgICAgICAgJzFjMzgzMDNmMWNjNWMzMGYyNmU2NmJhZDdmZTcyZjcwYTY1ZWVkNGNiZTcwMjRlYjFhYTAxZjU2NDMwYmQ1N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2E5Mzc1YWQ2MTY3YWQ1NGFhNzRjNjM0OGNjNTRkMzQ0Y2M1ZGM5NDg3ZDg0NzA0OWQ1ZWFiYjBmYTAzYzhmYicsXG4gICAgICAgICdkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDUyOGVjZDliNjk2YjU0YzkwN2E5ZWQwNDU0NDdhNzliYjQwOGVjMzliNjhkZjUwNGJiNTFmNDU5YmMzZmZjOScsXG4gICAgICAgICdlZWNmNDEyNTMxMzZlNWY5OTk2NmYyMTg4MWZkNjU2ZWJjNDM0NTQwNWM1MjBkYmMwNjM0NjViNTIxNDA5OTMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5MzcwYTRiNWY0MzQxMmVhMjVmNTE0ZThlY2RhZDA1MjY2MTE1ZTRhN2VjYjEzODcyMzE4MDhmOGI0NTk2MycsXG4gICAgICAgICc3NThmM2Y0MWFmZDZlZDQyOGIzMDgxYjA1MTJmZDYyYTU0YzNmM2FmYmI1YjY3NjRiNjUzMDUyYTEyOTQ5YzlhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3ZjIzMDkzNmVlODhjYmJkNzNkZjkzMGQ2NDcwMmVmODgxZDgxMWUwZTE0OThlMmYxYzEzZWIxZmMzNDVkNzQnLFxuICAgICAgICAnOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMmRhYzk5MWNjNGNlNGI5ZWE0NDg4N2U1YzdjMGJjZTU4YzgwMDc0YWI5ZDRkYmFlYjI4NTMxYjc3MzlmNTMwJyxcbiAgICAgICAgJ2UwZGVkYzliM2IyZjhkYWQ0ZGExZjMyZGVjMjUzMWRmOWViNWZiZWIwNTk4ZTRmZDFhMTE3ZGJhNzAzYTNjMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzYjNkOWY2NjI2MjFmYjFiNGJlOGZiYmUyNTIwMTI1YTIxNmNkZmM5ZGFlM2RlYmNiYTQ4NTBjNjkwZDQ1YicsXG4gICAgICAgICc1ZWQ0MzBkNzhjMjk2YzM1NDMxMTQzMDZkZDg2MjJkN2M2MjJlMjdjOTcwYTFkZTMxY2IzNzdiMDFhZjczMDdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxNmY4MDQyNDRlNDZlMmEwOTIzMmQ0YWZmM2I1OTk3NmI5OGZhYzE0MzI4YTJkMWEzMjQ5NmI0OTk5OGYyNDcnLFxuICAgICAgICAnY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYWY3NTQyNzJkYzg0NTYzYjAzNTJiN2ExNDMxMWFmNTVkMjQ1MzE1YWNlMjdjNjUzNjllMTVmNzE1MWQ0MWQxJyxcbiAgICAgICAgJ2NiNDc0NjYwZWYzNWY1ZjJhNDFiNjQzZmE1ZTQ2MDU3NWY0ZmE5Yjc5NjIyMzJhNWMzMmY5MDgzMThhMDQ0NzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjYwMGNhNGIyODJjYjk4NmY4NWQwZjE3MDk5NzlkOGI0NGEwOWMwN2NiODZkN2MxMjQ0OTdiYzg2ZjA4MjEyMCcsXG4gICAgICAgICc0MTE5Yjg4NzUzYzE1YmQ2YTY5M2IwM2ZjZGRiYjQ1ZDVhYzZiZTc0YWI1ZjBlZjQ0YjBiZTk0NzVhN2U0YjQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2MzVjYTcyZDdlODQzMmMzMzhlYzUzY2QxMjIyMGJjMDFjNDg2ODVlMjRmN2RjOGM2MDJhNzc0Njk5OGU0MzUnLFxuICAgICAgICAnOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1NGUzMjM5ZjMyNTU3MGNkYmJmNGE4N2RlZWU4YTY2YjdmMmIzMzQ3OWQ0NjhmYmMxYTUwNzQzYmY1NmNjMTgnLFxuICAgICAgICAnNjczZmI4NmU1YmRhMzBmYjNjZDBlZDMwNGVhNDlhMDIzZWUzM2QwMTk3YTY5NWQwYzVkOTgwOTNjNTM2NjgzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzZTZiZDEwNzFhMWU5NmFmZjU3ODU5YzgyZDU3MGYwMzMwODAwNjYxZDFjOTUyZjlmZTI2OTQ2OTFkOWI5ZTgnLFxuICAgICAgICAnNTljOWUwYmJhMzk0ZTc2ZjQwYzBhYTU4Mzc5YTNjYjZhNWEyMjgzOTkzZTkwYzQxNjcwMDJhZjQ5MjBlMzdmNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxODZiNDgzZDA1NmEwMzM4MjZhZTczZDg4ZjczMjk4NWM0Y2NiMWYzMmJhMzVmNGI0Y2M0N2ZkY2YwNGFhNmViJyxcbiAgICAgICAgJzNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGY5ZDcwYTZiOTg3NmNlNTQ0Yzk4NTYxZjRiZTRmNzI1NDQyZTZkMmI3MzdkOWM5MWE4MzIxNzI0Y2UwOTYzZicsXG4gICAgICAgICc1NWViMmRhZmQ4NGQ2Y2NkNWY4NjJiNzg1ZGMzOWQ0YWIxNTcyMjI3MjBlZjlkYTIxN2I4YzQ1Y2YyYmEyNDE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlZGQ1Y2MyM2M1MWU4N2E0OTdjYTgxNWQ1ZGNlMGY4YWI1MjU1NGY4NDllZDg5OTVkZTY0YzVmMzRjZTcxNDMnLFxuICAgICAgICAnZWZhZTljOGRiYzE0MTMwNjYxZThjZWMwMzBjODlhZDBjMTNjNjZjMGQxN2EyOTA1Y2RjNzA2YWI3Mzk5YTg2OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOTA3OThjMmI2NDc2ODMwZGExMmZlMDIyODdlOWU3NzdhYTNmYmExYzM1NWIxN2E3MjJkMzYyZjg0NjE0ZmJhJyxcbiAgICAgICAgJ2UzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWYzYzQyM2E5NWQ5ZjViMzA1NDc1NGVmYTE1MGFjMzljZDI5NTUyZmUzNjAyNTczNjJkZmRlY2VmNDA1M2I0NScsXG4gICAgICAgICdmOThhM2ZkODMxZWIyYjc0OWE5M2IwZTZmMzVjZmI0MGM4Y2Q1YWE2NjdhMTU1ODFiYzJmZWRlZDQ5OGZkOWM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2NmRiYjI0ZDEzNGU3NDVjY2NhYTI4Yzk5YmYyNzQ5MDZiYjY2YjI2ZGNmOThkZjhkMmZlZDUwZDg4NDI0OWEnLFxuICAgICAgICAnNzQ0YjExNTJlYWNiZTVlMzhkY2M4ODc5ODBkYTM4Yjg5NzU4NGE2NWZhMDZjZWRkMmM5MjRmOTdjYmFjNTk5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OWRiZjQ2ZjhjOTQ3NTliYTIxMjc3YzMzNzg0ZjQxNjQ1ZjdiNDRmNmM1OTZhNThjZTkyZTY2NjE5MWFiZTNlJyxcbiAgICAgICAgJ2M1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjEzYWRhOTUxMDNjNDUzNzMwNWU2OTFlNzRlOWE0YThkZDY0N2U3MTFhOTVlNzNjYjYyZGM2MDE4Y2ZkODdiOCcsXG4gICAgICAgICdlMTM4MTdiNDRlZTE0ZGU2NjNiZjRiYzgwODM0MWYzMjY5NDllMjFhNmE3NWMyNTcwNzc4NDE5YmRhZjU3MzNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NTRiNGZhMGU4YWNlZDA2ZDQxNjdhMmM1OWNjYTRjZGExODY5YzA2ZWJhZGZiNjQ4ODU1MDAxNWE4ODUyMmMnLFxuICAgICAgICAnMzBlOTNlODY0ZTY2OWQ4MjIyNGI5NjdjMzAyMGI4ZmE4ZDFlNGUzNTBiNmNiY2M1MzdhNDhiNTc4NDExNjNhMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhkY2FkZjU5OTBlMDQ4YWEzODc0ZDQ2YWJlZjlkNzAxODU4Zjk1ZGU4MDQxZDJhNjgyOGM5OWUyMjYyNTE5JyxcbiAgICAgICAgJ2U0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk2MjQxNDQ1MGM3NmMxNjg5YzdiNDhmODIwMmVjMzdmYjIyNGNmNWFjMGJmYTE1NzAzMjhhOGEzZDdjNzdhYicsXG4gICAgICAgICcxMDBiNjEwZWM0ZmZiNDc2MGQ1YzFmYzEzM2VmNmY2YjEyNTA3YTA1MWYwNGFjNTc2MGFmYTViMjlkYjgzNDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MTQwODc4MzQ5NjRiNTRiMTViMTYwNjQ0ZDkxNTQ4NWExNjk3NzIyNWI4ODQ3YmIwZGQwODUxMzdlYzQ3Y2EnLFxuICAgICAgICAnZWYwYWZiYjIwNTYyMDU0NDhlMTY1MmM0OGU4MTI3ZmM2MDM5ZTc3YzE1YzIzNzhiN2U3ZDE1YTBkZTI5MzMxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2NjMzBhZDZiNDgzZTRiYzc5Y2UyYzlkZDhiYzU0OTkzZTk0N2ViOGRmNzg3YjQ0Mjk0M2QzZjdiNTI3ZWFmJyxcbiAgICAgICAgJzhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTYyNGQ4NDc4MDczMjg2MGNlMWM3OGZjYmZlZmUwOGIyYjI5ODIzZGI5MTNmNjQ5Mzk3NWJhMGZmNDg0NzYxMCcsXG4gICAgICAgICc2ODY1MWNmOWI2ZGE5MDNlMDkxNDQ0OGM2Y2Q5ZDRjYTg5Njg3OGY1MjgyYmU0YzhjYzA2ZTJhNDA0MDc4NTc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzczM2NlODBkYTk1NWE4YTI2OTAyYzk1NjMzZTYyYTk4NTE5MjQ3NGI1YWYyMDdkYTZkZjdiNGZkNWZjNjFjZDQnLFxuICAgICAgICAnZjU0MzVhMmJkMmJhZGY3ZDQ4NWE0ZDhiOGRiOWZjY2UzZTFlZjhlMDIwMWU0NTc4YzU0NjczYmMxZGM1ZWExZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNWQ5NDQxMjU0OTQ1MDY0Y2YxYTFjMzNiYmQzYjQ5Zjg5NjZjNTA5MjE3MWU2OTllZjI1OGRmYWI4MWMwNDVjJyxcbiAgICAgICAgJ2Q1NmViMzBiNjk0NjNlNzIzNGY1MTM3YjczYjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTFkMGZjZjJlYzlkZTY3NWI2MTIxMzZlNWNlNzBkMjcxYzIxNDE3YzlkMmI4YWFhYWMxMzg1OTlkMDcxNzk0MCcsXG4gICAgICAgICdlZGQ3N2Y1MGJjYjVhM2NhYjJlOTA3MzczMDk2NjdmMjY0MTQ2MmE1NDA3MGYzZDUxOTIxMmQzOWMxOTdhNjI5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyMmZiZTE1YzBhZjhjY2M1NzgwYzA3MzVmODRkYmU5YTc5MGJhZGVlODI0NWMwNmM3Y2EzNzMzMWNiMzY5ODAnLFxuICAgICAgICAnYTg1NWJhYmFkNWNkNjBjODhiNDMwYTY5ZjUzYTFhN2EzODI4OTE1NDk2NDc5OWJlNDNkMDZkNzdkMzFkYTA2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMxMTA5MWRkOTg2MGU4ZTIwZWUxMzQ3M2MxMTU1ZjVmNjk2MzVlMzk0NzA0ZWFhNzQwMDk0NTIyNDZjZmE5YjMnLFxuICAgICAgICAnNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNGMxZmQwNGQzMDFiZTg5YjMxYzA0NDJkM2U2YWMyNDg4MzkyOGI0NWE5MzQwNzgxODY3ZDQyMzJlYzJkYmRmJyxcbiAgICAgICAgJzk0MTQ2ODVlOTdiMWI1OTU0YmQ0NmY3MzAxNzQxMzZkNTdmMWNlZWI0ODc0NDNkYzUzMjE4NTdiYTczYWJlZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjE5ZWE1ZDZiNTQ3MDFjMWMxNGRlNWI1NTdlYjQyYThkMTNmM2FiYmNkMDhhZmZjYzJhNWU2YjA0OWI4ZDYzJyxcbiAgICAgICAgJzRjYjk1OTU3ZTgzZDQwYjBmNzNhZjQ1NDRjY2NmNmIxZjRiMDhkM2MwN2IyN2ZiOGQ4YzI5NjJhNDAwNzY2ZDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDdiODc0MGY3NGE4ZmJhYWIxZjY4M2RiOGY0NWRlMjY1NDNhNTQ5MGJjYTYyNzA4NzIzNjkxMjQ2OWEwYjQ0OCcsXG4gICAgICAgICdmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyZDMxYzIyMmY4ZjZmMGVmODZmN2M5OGQzYTMzMzVlYWQ1YmNkMzJhYmRkOTQyODlmZTRkMzA5MWFhODI0YmYnLFxuICAgICAgICAnNWYzMDMyZjU4OTIxNTZlMzljY2QzZDc5MTViOWUxZGEyZTZkYWM5ZTZmMjZlOTYxMTE4ZDE0Yjg0NjJlMTY2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NDYxZjM3MTkxNGFiMzI2NzEwNDVhMTU1ZDk4MzFlYTg3OTNkNzdjZDU5NTkyYzQzNDBmODZjYmMxODM0N2I1JyxcbiAgICAgICAgJzhlYzBiYTIzOGI5NmJlYzBjYmRkZGNhZTBhYTQ0MjU0MmVlZTFmZjUwYzk4NmVhNmIzOTg0N2IzY2MwOTJmZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUwNzlhZGIxZGYxODYwMDc0MzU2YTI1YWEzODIwNmE2ZDcxNmIyYzNlNjc0NTNkMjg3Njk4YmFkN2IyYjJkNicsXG4gICAgICAgICc4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2ZWM5M2U0NDdlYzgzZjA0NjdiMTgzMDJlZTYyMGY3ZTY1ZGUzMzE4NzRjOWRjNzJiZmQ4NjE2YmE5ZGE2YjUnLFxuICAgICAgICAnNWU0NjMxMTUwZTYyZmI0MGQwZThjMmE3Y2E1ODA0YTM5ZDU4MTg2YTUwZTQ5NzEzOTYyNjc3OGUyNWIwNjc0ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE1Zjk4MGMyNDVmNmYwMzg5NzgyOTBhZmE3MGI2YmQ4ODU1ODk3Zjk4YjZhYTQ4NWI5NjA2NWQ1MzdiZDk5JyxcbiAgICAgICAgJ2Y2NWY1ZDNlMjkyYzJlMDgxOWE1MjgzOTFjOTk0NjI0ZDc4NDg2OWQ3ZTZlYTY3ZmIxODA0MTAyNGVkYzA3ZGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzhjOTQwNzU0NGFjMTMyNjkyZWUxOTEwYTAyNDM5OTU4YWUwNDg3NzE1MTM0MmVhOTZjNGI2YjM1YTQ5ZjUxJyxcbiAgICAgICAgJ2YzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDk0ZjRiZTIxOWExYTc3MDE2ZGNkODM4NDMxYWVhMDAwMWNkYzhhZTdhNmZjNjg4NzI2NTc4ZDk3MDI4NTdhNScsXG4gICAgICAgICc0MjI0MmE5NjkyODNhNWYzMzliYTdmMDc1ZTM2YmEyYWY5MjVjZTMwZDc2N2VkNmU1NWY0YjAzMTg4MGQ1NjJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1OThhODAzMGRhNmQ4NmM2YmM3ZjJmNTE0NGVhNTQ5ZDI4MjExZWE1OGZhYTcwZWJmNGMxZTY2NWMxZmU5YjUnLFxuICAgICAgICAnMjA0YjVkNmY4NDgyMmMzMDdlNGI0YTcxNDA3MzdhZWMyM2ZjNjNiNjViMzVmODZhMTAwMjZkYmQyZDg2NGU2YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDE5MTYzNjVhYmIyYjVkMDkxOTJmNWYyZGJlYWZlYzIwOGYwMjBmMTI1NzBhMTg0ZGJhZGMzZTU4NTk1OTk3JyxcbiAgICAgICAgJzRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZhOTkxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDFkNjA2M2E1ODZmYTQ3NWE3MjQ2MDRkYTAzYmM1YjkyYTJlMGQyZTBhMzZhY2ZlNGM3M2E1NTE0NzQyODgxJyxcbiAgICAgICAgJzczODY3ZjU5YzA2NTllODE5MDRmOWExYzc1NDM2OThlNjI1NjJkNjc0NGMxNjljZTdhMzZkZTAxYThkNjE1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZTk1YmIzOTlhNjk3MWQzNzYwMjY5NDdmODliZGUyZjI4MmIzMzgxMDkyOGJlNGRlZDExMmFjNGQ3MGUyMGQ1JyxcbiAgICAgICAgJzM5ZjIzZjM2NjgwOTA4NWJlZWJmYzcxMTgxMzEzNzc1YTk5YzlhZWQ3ZDhiYTM4YjE2MTM4NGM3NDYwMTI4NjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzZlNDY0MWE1Mzk0OGZkNDc2YzM5ZjhhOTlmZDk3NGU1ZWMwNzU2NGI1MzE1ZDhiZjk5NDcxYmNhMGVmMmY2NicsXG4gICAgICAgICdkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzNjU4MWVhN2JmYmJiMjkwYzE5MWEyZjUwN2E0MWNmNTY0Mzg0MjE3MGU5MTRmYWVhYjI3YzJjNTc5ZjcyNicsXG4gICAgICAgICdlYWQxMjE2ODU5NWZlMWJlOTkyNTIxMjliNmU1NmIzMzkxZjdhYjE0MTBjZDFlMGVmM2RjZGNhYmQyZmRhMjI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhhYjg5ODE2ZGFkZmQ2YjZhMWYyNjM0ZmNmMDBlYzg0MDM3ODEwMjVlZDY4OTBjNDg0OTc0MjcwNmJkNDNlZGUnLFxuICAgICAgICAnNmZkY2VmMDlmMmY2ZDBhMDQ0ZTY1NGFlZjYyNDEzNmY1MDNkNDU5YzNlODk4NDU4NThhNDdhOTEyOWNkZDI0ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZTMzZjFhNzQ2YzljNTc3ODEzMzM0NGQ5Mjk5ZmNhYTIwYjA5MzhlOGFjZmYyNTQ0YmI0MDI4NGI4YzVmYjk0JyxcbiAgICAgICAgJzYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWI3YzFkY2IzY2VjMWI3ZWU3ZjMwZGVkNzlkZDIwYTBlZDFmNGNjMThjYmNmY2ZhNDEwMzYxZmQ4ZjA4ZjMxJyxcbiAgICAgICAgJzNkOThhOWNkZDAyNmRkNDNmMzkwNDhmMjVhODg0N2Y0ZmNhZmFkMTg5NWQ3YTYzM2M2ZmVkM2MzNWU5OTk1MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjlkZjlmYmQ4ZDllNDY1MDkyNzVmNGIxMjVkNmQ0NWQ3ZmJlOWEzYjg3OGE3YWY4NzJhMjgwMDY2MWFjNWY1MScsXG4gICAgICAgICdiNGM0ZmU5OWM3NzVhNjA2ZTJkODg2MjE3OTEzOWZmZGE2MWRjODYxYzAxOWU1NWNkMjg3NmViMmEyN2Q4NGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTBiMWNhZTA2YjBhODQ3YTNmZWE2ZTY3MWFhZjhhZGZkZmU1OGNhMmY3NjgxMDVjODA4MmIyZTQ0OWZjZTI1MicsXG4gICAgICAgICdhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlOGNlYWZiOWIzZTlhMTM2ZGM3ZmY2N2U4NDAyOTViNDk5ZGZiM2IyMTMzZTRiYTExM2YyZTRjMGUxMjFlNScsXG4gICAgICAgICdjZjIxNzQxMThjOGI2ZDdhNGI0OGY2ZDUzNGNlNWM3OTQyMmMwODZhNjM0NjA1MDJiODI3Y2U2MmEzMjY2ODNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyNGE0NGUwNDdlMTliNmY1YWZiODFjN2NhMmY2OTA4MGE1MDc2Njg5YTAxMDkxOWY0MjcyNWMyYjc4OWEzM2InLFxuICAgICAgICAnNmZiOGQ1NTkxYjQ2NmY4ZmM2M2RiNTBmMWMwZjFjNjkwMTNmOTk2ODg3YjgyNDRkMmNkZWM0MTdhZmVhOGZhMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYTAxNjA2YTdhNmM5Y2RkMjQ5ZmRmY2ZhY2I5OTU4NDAwMWVkZDI4YWJiYWI3N2I1MTA0ZTk4ZThlM2IzNWQ0JyxcbiAgICAgICAgJzMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWY4YWRkYmYyYjY2MWM4YTZjNjMyODY1NWViOTY2NTEyNTIwMDdkOGM1ZWEzMWJlNGFkMTk2ZGU4Y2UyMTMxZicsXG4gICAgICAgICc2NzQ5ZTY3YzAyOWI4NWY1MmEwMzRlYWZkMDk2ODM2YjI1MjA4MTg2ODBlMjZhYzhmM2RmYmNkYjcxNzQ5NzAwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzYWUxOTc0NTY2Y2EwNmNjNTE2ZDQ3ZTBmYjE2NWE2NzRhM2RhYmNmY2ExNWU3MjJmMGUzNDUwZjQ1ODg5JyxcbiAgICAgICAgJzJhZWFiZTdlNDUzMTUxMDExNjIxN2YwN2JmNGQwNzMwMGRlOTdlNDg3NGY4MWY1MzM0MjBhNzJlZWIwYmQ2YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTkxZWUzNTUzMTNkOTk3MjFjZjY5OTNmZmVkMWUzZTMwMTk5M2ZmM2VkMjU4ODAyMDc1ZWE4Y2VkMzk3ZTI0NicsXG4gICAgICAgICdiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzExMzk2ZDU1ZmRhNTRjNDlmMTlhYTk3MzE4ZDhkYTYxZmE4NTg0ZTQ3YjA4NDk0NTA3N2NmMDMyNTViNTI5ODQnLFxuICAgICAgICAnOTk4Yzc0YThjZDQ1YWMwMTI4OWQ1ODMzYTdiZWI0NzQ0ZmY1MzZiMDFiMjU3YmU0YzU3NjdiZWE5M2VhNTdhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczYzVkMmExYmEzOWM1YTE3OTAwMDA3MzhjOWUwYzQwYjhkY2RmZDU0Njg3NTRiNjQwNTU0MDE1N2UwMTdhYTdhJyxcbiAgICAgICAgJ2IyMjg0Mjc5OTk1YTM0ZTJmOWQ0ZGU3Mzk2ZmMxOGI4MGY5YjhiOWZkZDI3MGY2NjYxZjc5Y2E0YzgxYmQyNTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2M4NzA0YjhhNjBhMGRlZmEzYTk5YTcyOTlmMmU5YzNmYmMzOTVhZmIwNGFjMDc4NDI1ZWY4YTE3OTNjYzAzMCcsXG4gICAgICAgICdiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M1MzNlNGY3ZWE4NTU1YWFjZDk3NzdhYzVjYWQyOWI5N2RkNGRlZmNjYzUzZWU3ZWEyMDQxMTliMjg4OWIxOTcnLFxuICAgICAgICAnNmYwYTI1NmJjNWVmZGY0MjlhMmZiNjI0MmYxYTQzYTJkOWI5MjViYjRhNGIzYTI2YmI4ZTBmNDVlYjU5NjA5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjMTRmOGYyY2NiMjdkNmYxMDlmNmQwOGQwM2NjOTZhNjliYThjMzRlZWMwN2JiY2Y1NjZkNDhlMzNkYTY1OTMnLFxuICAgICAgICAnYzM1OWQ2OTIzYmIzOThmN2ZkNDQ3M2UxNmZlMWMyODQ3NWI3NDBkZDA5ODA3NWU2YzBlODY0OTExM2RjM2EzOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNmNiYzMwNDZiYzZhNDUwYmFjMjQ3ODlmYTE3MTE1YTRjOTczOWVkNzVmOGYyMWNlNDQxZjcyZTBiOTBlNmVmJyxcbiAgICAgICAgJzIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNDdkNmQ5YTAyYzQ4OTI3ZWJmYjg2YzEzNTliMWNhZjEzMGEzYzAyNjdkMTFjZTYzNDRiMzlmOTlkNDNjYzM4JyxcbiAgICAgICAgJzYwZWE3ZjYxYTM1MzUyNGQxYzk4N2Y2ZWNlYzkyZjA4NmQ1NjVhYjY4Nzg3MGNiMTI2ODlmZjFlMzFjNzQ0NDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2NTQ1ZDIxODFkYjhkOTgzZjdkY2IzNzVlZjU4NjZkNDdjNjdiMWJmMzFjOGNmODU1ZWY3NDM3YjcyNjU2YScsXG4gICAgICAgICc0OWI5NjcxNWFiNjg3OGE3OWU3OGYwN2NlNTY4MGM1ZDY2NzMwNTFiNDkzNWJkODk3ZmVhODI0Yjc3ZGMyMDhhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MDc0N2NjOWQwMTJjYjFhMTNiODE0ODMwOWM2ZGU3ZWMyNWQ2OTQ1ZDY1NzE0NmI5ZDU5OTRiOGZlYjExMTEnLFxuICAgICAgICAnNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3ZTBmYTJkNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTQyYzhlYzgyYzk5Nzk4Y2NmM2E2MTBiZTg3MGU3ODMzOGM3ZjcxMzM0OGJkMzRjODIwM2VmNDAzN2YzNTAyJyxcbiAgICAgICAgJzc1NzFkNzRlZTVlMGZiOTJhN2E4YjMzYTA3NzgzMzQxYTU0OTIxNDRjYzU0YmNjNDBhOTQ0NzM2OTM2MDY0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzc3NWFiNzA4OWJjNmFmODIzYWJhMmUxYWY3MGIyMzZkMjUxY2FkYjBjODY3NDMyODc1MjJhMWIzYjBkZWRlYScsXG4gICAgICAgICdiZTUyZDEwN2JjZmEwOWQ4YmNiOTczNmE4MjhjZmE3ZmFjOGRiMTdiZjdhNzZhMmM0MmFkOTYxNDA5MDE4Y2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NlZTMxY2JmN2UzNGVjMzc5ZDk0ZmI4MTRkM2Q3NzVhZDk1NDU5NWQxMzE0YmE4ODQ2OTU5ZTNlODJmNzRlMjYnLFxuICAgICAgICAnOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNGY5ZWFlYTA5YjY5MTc2MTlmNmVhNmE0ZWI1NDY0ZWZkZGI1OGZkNDViMWViZWZjZGMxYTAxZDA4YjQ3OTg2JyxcbiAgICAgICAgJzM5ZTVjOTkyNWI1YTU0YjA3NDMzYTRmMThjNjE3MjZmOGJiMTMxYzAxMmNhNTQyZWIyNGE4YWMwNzIwMDY4MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDQyNjNkZmMzZDJkZjkyM2EwMTc5YTQ4OTY2ZDMwY2U4NGUyNTE1YWZjM2RjY2MxYjc3OTA3NzkyZWJjYzYwZScsXG4gICAgICAgICc2MmRmYWYwN2EwZjc4ZmViMzBlMzBkNjI5NTg1M2NlMTg5ZTEyNzc2MGFkNmNmN2ZhZTE2NGUxMjJhMjA4ZDU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ4NDU3NTI0ODIwZmE2NWE0ZjhkMzVlYjY5MzA4NTdjMDAzMmFjYzBhNGEyZGU0MjIyMzNlZWRhODk3NjEyYzQnLFxuICAgICAgICAnMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZmVlZWYxODgxMTAxZjJjYjExNjQ0ZjNhMmFmZGZjMjA0NWUxOTkxOTE1MjkyM2YzNjdhMTc2N2MxMWNjZWRhJyxcbiAgICAgICAgJ2VjZmI3MDU2Y2YxZGUwNDJmOTQyMGJhYjM5Njc5M2MwYzM5MGJkZTc0YjRiYmRmZjE2YTgzYWUwOWE5YTc1MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmQ3ZWY2YjE3NTQzZjgzNzNjNTczZjQ0ZTFmMzg5ODM1ZDg5YmNiYzYwNjJjZWQzNmM4MmRmODNiOGZhZTg1OScsXG4gICAgICAgICdjZDQ1MGVjMzM1NDM4OTg2ZGZlZmExMGM1N2ZlYTliY2M1MjFhMDk1OWIyZDgwYmJmNzRiMTkwZGNhNzEyZDEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3NTYwNWQ1OTEwMmE1YTI2ODQ1MDBkM2I5OTFmMmUzZjNjODhiOTMyMjU1NDcwMzVhZjI1YWY2NmUwNDU0MWYnLFxuICAgICAgICAnZjVjNTQ3NTRhOGY3MWVlNTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYjk4NjYwZjRjNGRmYWEwNmEyYmU0NTNkNTAyMGJjOTlhMGMyZTYwYWJlMzg4NDU3ZGQ0M2ZlZmIxZWQ2MjBjJyxcbiAgICAgICAgJzZjYjlhODg3NmQ5Y2I4NTIwNjA5YWYzYWRkMjZjZDIwYTBhN2NkOGE5NDExMTMxY2U4NWY0NDEwMDA5OTIyM2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTNlODdiMDI3ZDg1MTRkMzU5MzlmMmU2ODkyYjE5OTIyMTU0NTk2OTQxODg4MzM2ZGMzNTYzZTNiOGRiYTk0MicsXG4gICAgICAgICdmZWY1YTNjNjgwNTlhNmRlYzVkNjI0MTE0YmYxZTkxYWFjMmI5ZGE1NjhkNmFiZWIyNTcwZDU1NjQ2YjhhZGYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMTYzMDI2ZTlmZDZmZTAxN2MzOGYwNmE1YmU2ZmMxMjU0MjRiMzcxY2UyNzA4ZTdiZjQ0OTE2OTFlNTc2NGEnLFxuICAgICAgICAnMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMjY4ZjVlZjlhZDUxZTRkNzhkZTNhNzUwYzJkYzg5YjFlNjI2ZDQzNTA1ODY3OTk5OTMyZTVkYjMzYWYzZDgwJyxcbiAgICAgICAgJzVmMzEwZDRiM2M5OWI5ZWJiMTlmNzdkNDFjMWRlZTAxOGNmMGQzNGZkNDE5MTYxNDAwM2U5NDVhMTIxNmU0MjMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYwN2YzMTE4YTlkZjAzNWU5ZmFkODVlYjZjN2JmZTQyYjAyZjAxY2E5OWNlZWEzYmY3ZmZkYmE5M2M0NzUwZCcsXG4gICAgICAgICc0MzgxMzZkNjAzZTg1OGEzYTVjNDQwYzM4ZWNjYmFkZGMxZDI5NDIxMTRlMmVkZGQ0NzQwZDA5OGNlZDFmMGQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhkOGI5ODU1YzdjMDUyYTM0MTQ2ZmQyMGZmYjY1OGJlYTRiOWY2OWUwZDgyNWViZWMxNmU4YzNjZTJiNTI2YTEnLFxuICAgICAgICAnY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MmRiMGI1Mzg0ZGZiZjA1YmZhOWQ0NzJkN2FlMjZkZmU0Yjg1MWNlY2E5MWIxZWJhNTQyNjMxODBkYTMyYjYzJyxcbiAgICAgICAgJ2MzYjk5N2QwNTBlZTVkNDIzZWJhZjY2YTZkYjlmNTdiMzE4MGM5MDI4NzU2NzlkZTkyNGI2OWQ4NGE3YjM3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNjJmOTQ5MGQzZDUxZGE2Mzk1ZWZkMjRlODA5MTljYzdkMGYyOWMzZjNmYTQ4YzZmZmY1NDNiZWNiZDQzMzUyJyxcbiAgICAgICAgJzZkODlhZDdiYTQ4NzZiMGIyMmMyY2EyODBjNjgyODYyZjM0MmM4NTkxZjFkYWY1MTcwZTA3YmZkOWNjYWZhN2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2YzMGVhMjQ3NmIzOTliNDk1NzUwOWM4OGY3N2QwMTkxYWZhMmZmNWNiN2IxNGZkNmQ4ZTdkNjVhYWFiMTE5MycsXG4gICAgICAgICdjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUwOThmZjFlMWQ5ZjE0ZmI0NmEyMTBmYWRhNmM5MDNmZWYwZmI3YjRhMWRkMWQ5YWM2MGEwMzYxODAwYjdhMDAnLFxuICAgICAgICAnOTczMTE0MWQ4MWZjOGY4MDg0ZDM3YzZlNzU0MjAwNmIzZWUxYjQwZDYwZGZlNTM2MmE1YjEzMmZkMTdkZGMwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyYjc4YzdkZTllZTUxMmE3Mjg5NWJlNmI5Y2JlZmE2ZTJmM2M0Y2NjZTQ0NWM5NmI5ZjJjODFlMjc3OGFkNTgnLFxuICAgICAgICAnZWUxODQ5ZjUxM2RmNzFlMzJlZmMzODk2ZWUyODI2MGM3M2JiODA1NDdhZTIyNzViYTQ5NzIzNzc5NGM4NzUzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMmNiNzRmZGRjOGU5ZmJjZDA3NmVlZjJhN2M3MmIwY2UzN2Q1MGYwODI2OWRmYzA3NGI1ODE1NTA1NDdhNGY3JyxcbiAgICAgICAgJ2QzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQzODQ0NzU2NmQ0ZDdiZWRhZGMyOTk0OTZhYjM1NzQyNjAwOWEzNWYyMzVjYjE0MWJlMGQ5OWNkMTBhZTNhOCcsXG4gICAgICAgICdjNGUxMDIwOTE2OTgwYTRkYTVkMDFhYzVlNmFkMzMwNzM0ZWYwZDc5MDY2MzFjNGYyMzkwNDI2YjJlZGQ3OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQxNjJkNDg4Yjg5NDAyMDM5YjU4NGM2ZmM2YzMwODg3MDU4N2Q5YzQ2ZjY2MGI4NzhhYjY1YzgyYzcxMWQ2N2UnLFxuICAgICAgICAnNjcxNjNlOTAzMjM2Mjg5Zjc3NmYyMmMyNWZiOGEzYWZjMTczMmYyYjg0YjRlOTVkYmRhNDdhZTVhMDg1MjY0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczZmFkM2ZhODRjYWYwZjM0ZjBmODliZmQyZGNmNTRmYzE3NWQ3NjdhZWMzZTUwNjg0ZjNiYTRhNGJmNWY2ODNkJyxcbiAgICAgICAgJ2NkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1M2ZhMjBlZmNkZmU2MTgyNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NzRmMjYwMGEzMDA3YTAwNTY4YzFhN2NlMDVkMDgxNmMxZmI4NGJmMTM3MDc5OGYxYzY5NTMyZmFlYjFhODZiJyxcbiAgICAgICAgJzI5OWQyMWY5NDEzZjMzYjNlZGY0M2IyNTcwMDQ1ODBiNzBkYjU3ZGEwYjE4MjI1OWUwOWVlY2M2OWUwZDM4YTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDMyZjRkYTU0YWRlNzRhYmI4MWI4MTVhZDFmYjNiMjYzZDgyZDZjNjkyNzE0YmNmZjg3ZDI5YmQ1ZWU5ZjA4ZicsXG4gICAgICAgICdmOTQyOWU3MzhiOGU1M2I5NjhlOTkwMTZjMDU5NzA3NzgyZTE0ZjQ1MzUzNTlkNTgyZmM0MTY5MTBiM2VlYTg3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwZTRlNjcwNDM1Mzg1NTU2ZTU5MzY1NzEzNTg0NWQzNmZiYjY5MzFmNzJiMDhjYjFlZDk1NGYxZTNjZTNmZjYnLFxuICAgICAgICAnNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiZTIwNjIwMDNjNTFjYzMwMDQ2ODI5MDQzMzBlNGRlZTdmM2RjZDEwYjAxZTU4MGJmMTk3MWIwNGQ0Y2FkMjk3JyxcbiAgICAgICAgJzYyMTg4YmM0OWQ2MWU1NDI4NTczZDQ4YTc0ZTFjNjU1YjFjNjEwOTA5MDU2ODJhMGQ1NTU4ZWQ3MmRjY2I5YmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTMxNDQ0MjNhY2UzNDUxZWQyOWUwZmI5YWMyYWYyMTFjYjZlODRhNjAxZGY1OTkzYzQxOTg1OWZmZjVkZjA0YScsXG4gICAgICAgICc3YzEwZGZiMTY0YzM0MjVmNWM3MWEzZjlkNzk5MjAzOGYxMDY1MjI0ZjcyYmI5ZDFkOTAyYTZkMTMwMzdiNDdjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IwMTVmODA0NGY1ZmNiZGNmMjFjYTI2ZDZjMzRmYjgxOTc4MjkyMDVjN2I3ZDJhN2NiNjY0MThjMTU3YjExMmMnLFxuICAgICAgICAnYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNWU5ZTFkYTY0OWQ5N2Q4OWU0ODY4MTE3YTQ2NWEzYTRmOGExOGRlNTdhMTQwZDM2YjNmMmFmMzQxYTIxYjUyJyxcbiAgICAgICAgJzRjYjA0NDM3ZjM5MWVkNzMxMTFhMTNjYzFkNGRkMGRiMTY5MzQ2NWMyMjQwNDgwZDg5NTVlODU5MmYyNzQ0N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNhZTQxMDQ3ZGQ3Y2EwNjVkYmY4ZWQ3N2I5OTI0Mzk5ODMwMDVjZDcyZTE2ZDZmOTk2YTUzMTZkMzY5NjZiYicsXG4gICAgICAgICdiZDFhZWIyMWFkMjJlYmIyMmExMGYwMzAzNDE3YzZkOTY0ZjhjZGQ3ZGYwYWNhNjE0YjEwZGMxNGQxMjVhYzQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2UyNzYzZDg4NWY5NThmYzY2Y2RkMjI4MDBmMGE0ODcxOTdkMGE4MmUzNzdiNDlmODBhZjg3Yzg5N2IwNjUnLFxuICAgICAgICAnYmZlZmFjZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTg1ZmRmZDEyN2MwNTY3YzZmNTNlYzFiYjYzZWMzMTU4ZTU5N2M0MGJmZTc0N2M4M2NkZGZjOTEwNjQxOTE3JyxcbiAgICAgICAgJzYwM2MxMmRhZjNkOTg2MmVmMmIyNWZlMWRlMjg5YWVkMjRlZDI5MWUwZWM2NzA4NzAzYTViZDU2N2YzMmVkMDMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzRhMWFkNmI1Zjc2ZTM5ZGIyZGQyNDk0MTBlYWM3Zjk5ZTc0YzU5Y2I4M2QyZDBlZDVmZjE1NDNkYTc3MDNlOScsXG4gICAgICAgICdjYzYxNTdlZjE4YzljNjNjZDYxOTNkODM2MzFiYmVhMDA5M2UwOTY4OTQyZThjMzNkNTczN2ZkNzkwZTBkYjA4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwNjgyYTUwNzAzMzc1ZjYwMmQ0MTY2NjRiYTE5YjdmYzliYWI0MmM3Mjc0NzQ2M2E3MWQwODk2YjIyZjZkYTMnLFxuICAgICAgICAnNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5ZTIxNThmMGQ3YzBkNWYyNmMzNzkxZWZlZmE3OTU5NzY1NGU3YTJiMjQ2NGY1MmIxZWU2YzEzNDc3NjllZjU3JyxcbiAgICAgICAgJzcxMmZjZGQxYjkwNTNmMDkwMDNhMzQ4MWZhNzc2MmU5ZmZkN2M4ZWYzNWEzODUwOWUyZmJmMjYyOTAwODM3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzZlMjY5ODlhNDNjOWNmZWJhNDAyOWMyMDI1MzhjMjgxNzJlNTY2ZTNjNGZjZTczMjI4NTdmM2JlMzI3ZDY2JyxcbiAgICAgICAgJ2VkOGNjOWQwNGIyOWViODc3ZDI3MGI0ODc4ZGM0M2MxOWFlZmQzMWY0ZWVlMDllZTdiNDc4MzRjMWZhNGIxYzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzVkNDZlZmVhMzc3MWU2ZTY4YWJiODlhMTNhZDc0N2VjZjE4OTIzOTNkZmM0ZjFiNzAwNDc4OGM1MDM3NGRhOCcsXG4gICAgICAgICc5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwOWEyMGM2N2Q2NDkwMGZmYjY5OGM0YzgyNWY2ZDVmMjMxMGZiMDQ1MWM4NjkzNDViNzMxOWY2NDU2MDU3MjEnLFxuICAgICAgICAnOWU5OTQ5ODBkOTkxN2UyMmI3NmIwNjE5MjdmYTA0MTQzZDA5NmNjYzU0OTYzZTZhNWViZmE1ZjNmOGUyODZjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxYjM4OTAzYTQzZjdmMTE0ZWQ0NTAwYjRlYWM3MDgzZmRlZmVjZTFjZjI5YzYzNTI4ZDU2MzQ0NmY5NzJjMTgwJyxcbiAgICAgICAgJzQwMzZlZGM5MzFhNjBhZTg4OTM1M2Y3N2ZkNTNkZTRhMjcwOGIyNmI2ZjVkYTcyYWQzMzk0MTE5ZGFmNDA4ZjknXG4gICAgICBdXG4gICAgXVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4uL2N1cnZlcycpO1xudmFyIHJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KGN1cnZlcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zKSwgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgcmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCdcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykge1xuICAgIHZhciBrID0gb3B0aW9ucy5rID9cbiAgICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHZhciBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5fcmVzZWVkID0gbnVsbDtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMuSyA9IG51bGw7XG4gIHRoaXMuViA9IG51bGw7XG5cbiAgdmFyIGVudHJvcHkgPSB1dGlscy50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICdoZXgnKTtcbiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jIHx8ICdoZXgnKTtcbiAgdmFyIHBlcnMgPSB1dGlscy50b0FycmF5KG9wdGlvbnMucGVycywgb3B0aW9ucy5wZXJzRW5jIHx8ICdoZXgnKTtcbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcbiAgdGhpcy5faW5pdChlbnRyb3B5LCBub25jZSwgcGVycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHO1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKSB7XG4gIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTtcblxuICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgdGhpcy5WID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5WLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5LW2ldID0gMHgwMDtcbiAgICB0aGlzLlZbaV0gPSAweDAxO1xuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHNlZWQpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gMHgxMDAwMDAwMDAwMDAwOyAgLy8gMl40OFxufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl9obWFjID0gZnVuY3Rpb24gaG1hYygpIHtcbiAgcmV0dXJuIG5ldyBoYXNoLmhtYWModGhpcy5oYXNoLCB0aGlzLkspO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2VlZCkge1xuICB2YXIga21hYyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDAgXSk7XG4gIGlmIChzZWVkKVxuICAgIGttYWMgPSBrbWFjLnVwZGF0ZShzZWVkKTtcbiAgdGhpcy5LID0ga21hYy5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICBpZiAoIXNlZWQpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuSyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMSBdKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWVkKVxuICAgICAgICAgICAgICAgLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUucmVzZWVkID0gZnVuY3Rpb24gcmVzZWVkKGVudHJvcHksIGVudHJvcHlFbmMsIGFkZCwgYWRkRW5jKSB7XG4gIC8vIE9wdGlvbmFsIGVudHJvcHkgZW5jXG4gIGlmICh0eXBlb2YgZW50cm9weUVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW50cm9weUVuYztcbiAgICBlbnRyb3B5RW5jID0gbnVsbDtcbiAgfVxuXG4gIGVudHJvcHkgPSB1dGlscy50b0FycmF5KGVudHJvcHksIGVudHJvcHlFbmMpO1xuICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5fcmVzZWVkID4gdGhpcy5yZXNlZWRJbnRlcnZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc2VlZCBpcyByZXF1aXJlZCcpO1xuXG4gIC8vIE9wdGlvbmFsIGVuY29kaW5nXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuXG4gIC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YVxuICBpZiAoYWRkKSB7XG4gICAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyB8fCAnaGV4Jyk7XG4gICAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIH1cblxuICB2YXIgdGVtcCA9IFtdO1xuICB3aGlsZSAodGVtcC5sZW5ndGggPCBsZW4pIHtcbiAgICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gICAgdGVtcCA9IHRlbXAuY29uY2F0KHRoaXMuVik7XG4gIH1cblxuICB2YXIgcmVzID0gdGVtcC5zbGljZSgwLCBsZW4pO1xuICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgdGhpcy5fcmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBLZXlQYWlyKGVjLCBvcHRpb25zKSB7XG4gIHRoaXMuZWMgPSBlYztcbiAgdGhpcy5wcml2ID0gbnVsbDtcbiAgdGhpcy5wdWIgPSBudWxsO1xuXG4gIC8vIEtleVBhaXIoZWMsIHsgcHJpdjogLi4uLCBwdWI6IC4uLiB9KVxuICBpZiAob3B0aW9ucy5wcml2KVxuICAgIHRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LCBvcHRpb25zLnByaXZFbmMpO1xuICBpZiAob3B0aW9ucy5wdWIpXG4gICAgdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLCBvcHRpb25zLnB1YkVuYyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWMsIHB1YiwgZW5jKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHViOiBwdWIsXG4gICAgcHViRW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21Qcml2YXRlID0gZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMsIHByaXYsIGVuYykge1xuICBpZiAocHJpdiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHByaXY7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHJpdjogcHJpdixcbiAgICBwcml2RW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0KGtleS54LCAnTmVlZCB4IGNvb3JkaW5hdGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fFxuICAgICAgICAgICAgICAgdGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnZWR3YXJkcycpIHtcbiAgICAgIGFzc2VydChrZXkueCAmJiBrZXkueSwgJ05lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGUnKTtcbiAgICB9XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksIGVuYyk7XG59O1xuXG4vLyBFQ0RIXG5LZXlQYWlyLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiBkZXJpdmUocHViKSB7XG4gIHJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpO1xufTtcblxuLy8gRUNEU0FcbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLmVjLnNpZ24obXNnLCB0aGlzLCBlbmMsIG9wdGlvbnMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNpZ25hdHVyZShvcHRpb25zLCBlbmMpIHtcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBTaWduYXR1cmUpXG4gICAgcmV0dXJuIG9wdGlvbnM7XG5cbiAgaWYgKHRoaXMuX2ltcG9ydERFUihvcHRpb25zLCBlbmMpKVxuICAgIHJldHVybjtcblxuICBhc3NlcnQob3B0aW9ucy5yICYmIG9wdGlvbnMucywgJ1NpZ25hdHVyZSB3aXRob3V0IHIgb3IgcycpO1xuICB0aGlzLnIgPSBuZXcgQk4ob3B0aW9ucy5yLCAxNik7XG4gIHRoaXMucyA9IG5ldyBCTihvcHRpb25zLnMsIDE2KTtcbiAgaWYgKG9wdGlvbnMucmVjb3ZlcnlQYXJhbSA9PT0gdW5kZWZpbmVkKVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG51bGw7XG4gIGVsc2VcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBvcHRpb25zLnJlY292ZXJ5UGFyYW07XG59XG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcblxuZnVuY3Rpb24gUG9zaXRpb24oKSB7XG4gIHRoaXMucGxhY2UgPSAwO1xufVxuXG5mdW5jdGlvbiBnZXRMZW5ndGgoYnVmLCBwKSB7XG4gIHZhciBpbml0aWFsID0gYnVmW3AucGxhY2UrK107XG4gIGlmICghKGluaXRpYWwgJiAweDgwKSkge1xuICAgIHJldHVybiBpbml0aWFsO1xuICB9XG4gIHZhciBvY3RldExlbiA9IGluaXRpYWwgJiAweGY7XG4gIHZhciB2YWwgPSAwO1xuICBmb3IgKHZhciBpID0gMCwgb2ZmID0gcC5wbGFjZTsgaSA8IG9jdGV0TGVuOyBpKyssIG9mZisrKSB7XG4gICAgdmFsIDw8PSA4O1xuICAgIHZhbCB8PSBidWZbb2ZmXTtcbiAgfVxuICBwLnBsYWNlID0gb2ZmO1xuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBybVBhZGRpbmcoYnVmKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLSAxO1xuICB3aGlsZSAoIWJ1ZltpXSAmJiAhKGJ1ZltpICsgMV0gJiAweDgwKSAmJiBpIDwgbGVuKSB7XG4gICAgaSsrO1xuICB9XG4gIGlmIChpID09PSAwKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gYnVmLnNsaWNlKGkpO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVIgPSBmdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsIGVuYykge1xuICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBlbmMpO1xuICB2YXIgcCA9IG5ldyBQb3NpdGlvbigpO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmICgobGVuICsgcC5wbGFjZSkgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIHZhciByID0gZGF0YS5zbGljZShwLnBsYWNlLCBybGVuICsgcC5wbGFjZSk7XG4gIHAucGxhY2UgKz0gcmxlbjtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc2xlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBzbGVuICsgcC5wbGFjZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcyA9IGRhdGEuc2xpY2UocC5wbGFjZSwgc2xlbiArIHAucGxhY2UpO1xuICBpZiAoclswXSA9PT0gMCAmJiAoclsxXSAmIDB4ODApKSB7XG4gICAgciA9IHIuc2xpY2UoMSk7XG4gIH1cbiAgaWYgKHNbMF0gPT09IDAgJiYgKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG5cbiAgdGhpcy5yID0gbmV3IEJOKHIpO1xuICB0aGlzLnMgPSBuZXcgQk4ocyk7XG4gIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG51bGw7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDB4ODApIHtcbiAgICBhcnIucHVzaChsZW4pO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgb2N0ZXRzID0gMSArIChNYXRoLmxvZyhsZW4pIC8gTWF0aC5MTjIgPj4+IDMpO1xuICBhcnIucHVzaChvY3RldHMgfCAweDgwKTtcbiAgd2hpbGUgKC0tb2N0ZXRzKSB7XG4gICAgYXJyLnB1c2goKGxlbiA+Pj4gKG9jdGV0cyA8PCAzKSkgJiAweGZmKTtcbiAgfVxuICBhcnIucHVzaChsZW4pO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvREVSID0gZnVuY3Rpb24gdG9ERVIoZW5jKSB7XG4gIHZhciByID0gdGhpcy5yLnRvQXJyYXkoKTtcbiAgdmFyIHMgPSB0aGlzLnMudG9BcnJheSgpO1xuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKVxuICAgIHIgPSBbIDAgXS5jb25jYXQocik7XG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHNbMF0gJiAweDgwKVxuICAgIHMgPSBbIDAgXS5jb25jYXQocyk7XG5cbiAgciA9IHJtUGFkZGluZyhyKTtcbiAgcyA9IHJtUGFkZGluZyhzKTtcblxuICB3aGlsZSAoIXNbMF0gJiYgIShzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuICB2YXIgYXJyID0gWyAweDAyIF07XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHIubGVuZ3RoKTtcbiAgYXJyID0gYXJyLmNvbmNhdChyKTtcbiAgYXJyLnB1c2goMHgwMik7XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHMubGVuZ3RoKTtcbiAgdmFyIGJhY2tIYWxmID0gYXJyLmNvbmNhdChzKTtcbiAgdmFyIHJlcyA9IFsgMHgzMCBdO1xuICBjb25zdHJ1Y3RMZW5ndGgocmVzLCBiYWNrSGFsZi5sZW5ndGgpO1xuICByZXMgPSByZXMuY29uY2F0KGJhY2tIYWxmKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZVxuKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcHVibGljL3ByaXZhdGUga2V5IHBhcmFtZXRlcnNcbipcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXNcbiogQHBhcmFtIHtQb2ludH0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCAoYWthIGBBYCBpbiBlZGRzYSB0ZXJtcylcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCBlbmNvZGVkIGFzIGJ5dGVzXG4qXG4qL1xuZnVuY3Rpb24gS2V5UGFpcihlZGRzYSwgcGFyYW1zKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcbiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTtcbiAgaWYgKGVkZHNhLmlzUG9pbnQocGFyYW1zLnB1YikpXG4gICAgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtcbiAgZWxzZVxuICAgIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTtcbn1cblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBwdWI6IHB1YiB9KTtcbn07XG5cbktleVBhaXIuZnJvbVNlY3JldCA9IGZ1bmN0aW9uIGZyb21TZWNyZXQoZWRkc2EsIHNlY3JldCkge1xuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gc2VjcmV0O1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgc2VjcmV0OiBzZWNyZXQgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQoKSB7XG4gIHJldHVybiB0aGlzLl9zZWNyZXQ7XG59O1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5wdWIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YicsIGZ1bmN0aW9uIHB1YigpIHtcbiAgaWYgKHRoaXMuX3B1YkJ5dGVzKVxuICAgIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuX3B1YkJ5dGVzKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2Qnl0ZXMnLCBmdW5jdGlvbiBwcml2Qnl0ZXMoKSB7XG4gIHZhciBlZGRzYSA9IHRoaXMuZWRkc2E7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIHZhciBsYXN0SXggPSBlZGRzYS5lbmNvZGluZ0xlbmd0aCAtIDE7XG5cbiAgdmFyIGEgPSBoYXNoLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbiAgYVswXSAmPSAyNDg7XG4gIGFbbGFzdEl4XSAmPSAxMjc7XG4gIGFbbGFzdEl4XSB8PSA2NDtcblxuICByZXR1cm4gYTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdicsIGZ1bmN0aW9uIHByaXYoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnaGFzaCcsIGZ1bmN0aW9uIGhhc2goKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmhhc2goKS51cGRhdGUodGhpcy5zZWNyZXQoKSkuZGlnZXN0KCk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkge1xuICByZXR1cm4gdGhpcy5oYXNoKCkuc2xpY2UodGhpcy5lZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG59KTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSkge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBjYW4gb25seSB2ZXJpZnknKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EudmVyaWZ5KG1lc3NhZ2UsIHNpZywgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRTZWNyZXQgPSBmdW5jdGlvbiBnZXRTZWNyZXQoZW5jKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGlzIHB1YmxpYyBvbmx5Jyk7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnB1YkJ5dGVzKCksIGVuYyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBlZGRzYSBpbnN0YW5jZVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxPYmplY3R9IHNpZyAtXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fFBvaW50fSBbc2lnLlJdIC0gUiBwb2ludCBhcyBQb2ludCBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxibn0gW3NpZy5TXSAtIFMgc2NhbGFyIGFzIGJuIG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlJlbmNvZGVkXSAtIFIgcG9pbnQgZW5jb2RlZFxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5TZW5jb2RlZF0gLSBTIHNjYWxhciBlbmNvZGVkXG4qL1xuZnVuY3Rpb24gU2lnbmF0dXJlKGVkZHNhLCBzaWcpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuXG4gIGlmICh0eXBlb2Ygc2lnICE9PSAnb2JqZWN0JylcbiAgICBzaWcgPSBwYXJzZUJ5dGVzKHNpZyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2lnKSkge1xuICAgIHNpZyA9IHtcbiAgICAgIFI6IHNpZy5zbGljZSgwLCBlZGRzYS5lbmNvZGluZ0xlbmd0aCksXG4gICAgICBTOiBzaWcuc2xpY2UoZWRkc2EuZW5jb2RpbmdMZW5ndGgpXG4gICAgfTtcbiAgfVxuXG4gIGFzc2VydChzaWcuUiAmJiBzaWcuUywgJ1NpZ25hdHVyZSB3aXRob3V0IFIgb3IgUycpO1xuXG4gIGlmIChlZGRzYS5pc1BvaW50KHNpZy5SKSlcbiAgICB0aGlzLl9SID0gc2lnLlI7XG4gIGlmIChzaWcuUyBpbnN0YW5jZW9mIEJOKVxuICAgIHRoaXMuX1MgPSBzaWcuUztcblxuICB0aGlzLl9SZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlIpID8gc2lnLlIgOiBzaWcuUmVuY29kZWQ7XG4gIHRoaXMuX1NlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUykgPyBzaWcuUyA6IHNpZy5TZW5jb2RlZDtcbn1cblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUycsIGZ1bmN0aW9uIFMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLlNlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1InLCBmdW5jdGlvbiBSKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1JlbmNvZGVkJywgZnVuY3Rpb24gUmVuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMuUigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTZW5jb2RlZCcsIGZ1bmN0aW9uIFNlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVJbnQodGhpcy5TKCkpO1xufSk7XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLlJlbmNvZGVkKCkuY29uY2F0KHRoaXMuU2VuY29kZWQoKSk7XG59O1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gdG9IZXgoKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy50b0J5dGVzKCksICdoZXgnKS50b1VwcGVyQ2FzZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxuZXhwb3J0cy5jZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKVxuXG52YXIgUlNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdSU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MScpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQcml2YXRlS2V5ID0gUlNBUHJpdmF0ZUtleVxuXG52YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQdWJsaWNLZXkgPSBSU0FQdWJsaWNLZXlcblxudmFyIFB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ2cnKS5pbnQoKVxuICAgICkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuZXhwb3J0cy5Qcml2YXRlS2V5ID0gUHJpdmF0ZUtleUluZm9cbnZhciBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICB0aGlzLmtleSgnZGVjcnlwdCcpLnNlcSgpLm9iaihcbiAgICAgICAgdGhpcy5rZXkoJ2tkZScpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICAgICAgICB0aGlzLmtleSgnc2FsdCcpLm9jdHN0cigpLFxuICAgICAgICAgICAgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHRoaXMua2V5KCdjaXBoZXInKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2FsZ28nKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdpdicpLm9jdHN0cigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5cbmV4cG9ydHMuRW5jcnlwdGVkUHJpdmF0ZUtleSA9IEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvXG5cbnZhciBEU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0RTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgIHRoaXMua2V5KCdnJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1Yl9rZXknKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5EU0FQcml2YXRlS2V5ID0gRFNBUHJpdmF0ZUtleVxuXG5leHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmludCgpXG59KVxuXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcblxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4uL2FzbjEnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhcGkgPSBleHBvcnRzO1xuXG5hcGkuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBFbnRpdHkobmFtZSwgYm9keSk7XG59O1xuXG5mdW5jdGlvbiBFbnRpdHkobmFtZSwgYm9keSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmJvZHkgPSBib2R5O1xuXG4gIHRoaXMuZGVjb2RlcnMgPSB7fTtcbiAgdGhpcy5lbmNvZGVycyA9IHt9O1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fY3JlYXRlTmFtZWQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZChiYXNlKSB7XG4gIHZhciBuYW1lZDtcbiAgdHJ5IHtcbiAgICBuYW1lZCA9IHJlcXVpcmUoJ3ZtJykucnVuSW5UaGlzQ29udGV4dChcbiAgICAgICcoZnVuY3Rpb24gJyArIHRoaXMubmFtZSArICcoZW50aXR5KSB7XFxuJyArXG4gICAgICAnICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcXG4nICtcbiAgICAgICd9KSdcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbmFtZWQgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcbiAgICB9O1xuICB9XG4gIGluaGVyaXRzKG5hbWVkLCBiYXNlKTtcbiAgbmFtZWQucHJvdG90eXBlLl9pbml0TmFtZWQgPSBmdW5jdGlvbiBpbml0bmFtZWQoZW50aXR5KSB7XG4gICAgYmFzZS5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIH07XG5cbiAgcmV0dXJuIG5ldyBuYW1lZCh0aGlzKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldERlY29kZXIgPSBmdW5jdGlvbiBfZ2V0RGVjb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGRlY29kZXJcbiAgaWYgKCF0aGlzLmRlY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5kZWNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoYXNuMS5kZWNvZGVyc1tlbmNdKTtcbiAgcmV0dXJuIHRoaXMuZGVjb2RlcnNbZW5jXTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIGVuYywgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5fZ2V0RGVjb2RlcihlbmMpLmRlY29kZShkYXRhLCBvcHRpb25zKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldEVuY29kZXIgPSBmdW5jdGlvbiBfZ2V0RW5jb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGVuY29kZXJcbiAgaWYgKCF0aGlzLmVuY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5lbmNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoYXNuMS5lbmNvZGVyc1tlbmNdKTtcbiAgcmV0dXJuIHRoaXMuZW5jb2RlcnNbZW5jXTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIGVuYywgLyogaW50ZXJuYWwgKi8gcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMuX2dldEVuY29kZXIoZW5jKS5lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xufTtcbiIsInZhciBpbmRleE9mID0gZnVuY3Rpb24gKHhzLCBpdGVtKSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHJldHVybiB4cy5pbmRleE9mKGl0ZW0pO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoeHNbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59O1xudmFyIE9iamVjdF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChPYmplY3Qua2V5cykgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuKVxuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbih4c1tpXSwgaSwgeHMpO1xuICAgIH1cbn07XG5cbnZhciBkZWZpbmVQcm9wID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ18nLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIG9ialtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG5cbnZhciBnbG9iYWxzID0gWydBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRXZhbEVycm9yJywgJ0Z1bmN0aW9uJyxcbidJbmZpbml0eScsICdKU09OJywgJ01hdGgnLCAnTmFOJywgJ051bWJlcicsICdPYmplY3QnLCAnUmFuZ2VFcnJvcicsXG4nUmVmZXJlbmNlRXJyb3InLCAnUmVnRXhwJywgJ1N0cmluZycsICdTeW50YXhFcnJvcicsICdUeXBlRXJyb3InLCAnVVJJRXJyb3InLFxuJ2RlY29kZVVSSScsICdkZWNvZGVVUklDb21wb25lbnQnLCAnZW5jb2RlVVJJJywgJ2VuY29kZVVSSUNvbXBvbmVudCcsICdlc2NhcGUnLFxuJ2V2YWwnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLCAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICd1bmRlZmluZWQnLCAndW5lc2NhcGUnXTtcblxuZnVuY3Rpb24gQ29udGV4dCgpIHt9XG5Db250ZXh0LnByb3RvdHlwZSA9IHt9O1xuXG52YXIgU2NyaXB0ID0gZXhwb3J0cy5TY3JpcHQgPSBmdW5jdGlvbiBOb2RlU2NyaXB0IChjb2RlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjcmlwdCkpIHJldHVybiBuZXcgU2NyaXB0KGNvZGUpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkcyBhICdjb250ZXh0JyBhcmd1bWVudC5cIik7XG4gICAgfVxuICAgIFxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZiAoIWlmcmFtZS5zdHlsZSkgaWZyYW1lLnN0eWxlID0ge307XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgd0V2YWwgPSB3aW4uZXZhbCwgd0V4ZWNTY3JpcHQgPSB3aW4uZXhlY1NjcmlwdDtcblxuICAgIGlmICghd0V2YWwgJiYgd0V4ZWNTY3JpcHQpIHtcbiAgICAgICAgLy8gd2luLmV2YWwoKSBtYWdpY2FsbHkgYXBwZWFycyB3aGVuIHRoaXMgaXMgY2FsbGVkIGluIElFOlxuICAgICAgICB3RXhlY1NjcmlwdC5jYWxsKHdpbiwgJ251bGwnKTtcbiAgICAgICAgd0V2YWwgPSB3aW4uZXZhbDtcbiAgICB9XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNvbnRleHRba2V5XSkge1xuICAgICAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgd2luS2V5cyA9IE9iamVjdF9rZXlzKHdpbik7XG5cbiAgICB2YXIgcmVzID0gd0V2YWwuY2FsbCh3aW4sIHRoaXMuY29kZSk7XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyh3aW4pLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgY2lyY3VsYXIgb2JqZWN0cyBsaWtlIGB0b3BgIGFuZCBgd2luZG93YCBieSBvbmx5XG4gICAgICAgIC8vIHVwZGF0aW5nIGV4aXN0aW5nIGNvbnRleHQgcHJvcGVydGllcyBvciBuZXcgcHJvcGVydGllcyBpbiB0aGUgYHdpbmBcbiAgICAgICAgLy8gdGhhdCB3YXMgb25seSBpbnRyb2R1Y2VkIGFmdGVyIHRoZSBldmFsLlxuICAgICAgICBpZiAoa2V5IGluIGNvbnRleHQgfHwgaW5kZXhPZih3aW5LZXlzLCBrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gd2luW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gY29udGV4dCkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3AoY29udGV4dCwga2V5LCB3aW5ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5UaGlzQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZhbCh0aGlzLmNvZGUpOyAvLyBtYXliZS4uLlxufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5Jbk5ld0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjdHggPSBTY3JpcHQuY3JlYXRlQ29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0gdGhpcy5ydW5JbkNvbnRleHQoY3R4KTtcblxuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGZvckVhY2goT2JqZWN0X2tleXMoY3R4KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59O1xuXG5mb3JFYWNoKE9iamVjdF9rZXlzKFNjcmlwdC5wcm90b3R5cGUpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGV4cG9ydHNbbmFtZV0gPSBTY3JpcHRbbmFtZV0gPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICB2YXIgcyA9IFNjcmlwdChjb2RlKTtcbiAgICAgICAgcmV0dXJuIHNbbmFtZV0uYXBwbHkocywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9O1xufSk7XG5cbmV4cG9ydHMuaXNDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQ7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gUmVwb3J0ZXIob3B0aW9ucykge1xuICB0aGlzLl9yZXBvcnRlclN0YXRlID0ge1xuICAgIG9iajogbnVsbCxcbiAgICBwYXRoOiBbXSxcbiAgICBvcHRpb25zOiBvcHRpb25zIHx8IHt9LFxuICAgIGVycm9yczogW11cbiAgfTtcbn1cbmV4cG9ydHMuUmVwb3J0ZXIgPSBSZXBvcnRlcjtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmlzRXJyb3IgPSBmdW5jdGlvbiBpc0Vycm9yKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXR1cm4geyBvYmo6IHN0YXRlLm9iaiwgcGF0aExlbjogc3RhdGUucGF0aC5sZW5ndGggfTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUub2JqID0gZGF0YS5vYmo7XG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGRhdGEucGF0aExlbik7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJLZXkgPSBmdW5jdGlvbiBlbnRlcktleShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5wdXNoKGtleSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXhpdEtleSA9IGZ1bmN0aW9uIGV4aXRLZXkoaW5kZXgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBpbmRleCAtIDEpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlS2V5ID0gZnVuY3Rpb24gbGVhdmVLZXkoaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB0aGlzLmV4aXRLZXkoaW5kZXgpO1xuICBpZiAoc3RhdGUub2JqICE9PSBudWxsKVxuICAgIHN0YXRlLm9ialtrZXldID0gdmFsdWU7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucGF0aCA9IGZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGguam9pbignLycpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyT2JqZWN0ID0gZnVuY3Rpb24gZW50ZXJPYmplY3QoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIHByZXYgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHt9O1xuICByZXR1cm4gcHJldjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZU9iamVjdCA9IGZ1bmN0aW9uIGxlYXZlT2JqZWN0KHByZXYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgbm93ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSBwcmV2O1xuICByZXR1cm4gbm93O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHZhciBlcnI7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIGluaGVyaXRlZCA9IG1zZyBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG4gIGlmIChpbmhlcml0ZWQpIHtcbiAgICBlcnIgPSBtc2c7XG4gIH0gZWxzZSB7XG4gICAgZXJyID0gbmV3IFJlcG9ydGVyRXJyb3Ioc3RhdGUucGF0aC5tYXAoZnVuY3Rpb24oZWxlbSkge1xuICAgICAgcmV0dXJuICdbJyArIEpTT04uc3RyaW5naWZ5KGVsZW0pICsgJ10nO1xuICAgIH0pLmpvaW4oJycpLCBtc2cubWVzc2FnZSB8fCBtc2csIG1zZy5zdGFjayk7XG4gIH1cblxuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICB0aHJvdyBlcnI7XG5cbiAgaWYgKCFpbmhlcml0ZWQpXG4gICAgc3RhdGUuZXJyb3JzLnB1c2goZXJyKTtcblxuICByZXR1cm4gZXJyO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLndyYXBSZXN1bHQgPSBmdW5jdGlvbiB3cmFwUmVzdWx0KHJlc3VsdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB0aGlzLmlzRXJyb3IocmVzdWx0KSA/IG51bGwgOiByZXN1bHQsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnNcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFJlcG9ydGVyRXJyb3IocGF0aCwgbXNnKSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMucmV0aHJvdyhtc2cpO1xufTtcbmluaGVyaXRzKFJlcG9ydGVyRXJyb3IsIEVycm9yKTtcblxuUmVwb3J0ZXJFcnJvci5wcm90b3R5cGUucmV0aHJvdyA9IGZ1bmN0aW9uIHJldGhyb3cobXNnKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1zZyArICcgYXQ6ICcgKyAodGhpcy5wYXRoIHx8ICcoc2hhbGxvdyknKTtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlcG9ydGVyRXJyb3IpO1xuXG4gIGlmICghdGhpcy5zdGFjaykge1xuICAgIHRyeSB7XG4gICAgICAvLyBJRSBvbmx5IGFkZHMgc3RhY2sgd2hlbiB0aHJvd25cbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG4iLCJ2YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5FbmNvZGVyQnVmZmVyO1xudmFyIERlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRGVjb2RlckJ1ZmZlcjtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbi8vIFN1cHBvcnRlZCB0YWdzXG52YXIgdGFncyA9IFtcbiAgJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2JqaWQnLCAnYm9vbCcsXG4gICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnb2JqRGVzYycsXG4gICdiaXRzdHInLCAnYm1wc3RyJywgJ2NoYXJzdHInLCAnZ2Vuc3RyJywgJ2dyYXBoc3RyJywgJ2lhNXN0cicsICdpc282NDZzdHInLFxuICAnbnVtc3RyJywgJ29jdHN0cicsICdwcmludHN0cicsICd0NjFzdHInLCAndW5pc3RyJywgJ3V0ZjhzdHInLCAndmlkZW9zdHInXG5dO1xuXG4vLyBQdWJsaWMgbWV0aG9kcyBsaXN0XG52YXIgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55JywgJ2NvbnRhaW5zJ1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbnZhciBvdmVycmlkZWQgPSBbXG4gICdfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLFxuICAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLFxuICAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsXG5cbiAgJ19lbmNvZGVDb21wb3NpdGUnLCAnX2VuY29kZVN0cicsICdfZW5jb2RlT2JqaWQnLCAnX2VuY29kZVRpbWUnLFxuICAnX2VuY29kZU51bGwnLCAnX2VuY29kZUludCcsICdfZW5jb2RlQm9vbCdcbl07XG5cbmZ1bmN0aW9uIE5vZGUoZW5jLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHRoaXMuX2Jhc2VTdGF0ZSA9IHN0YXRlO1xuXG4gIHN0YXRlLmVuYyA9IGVuYztcblxuICBzdGF0ZS5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsO1xuXG4gIC8vIFN0YXRlXG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmFyZ3MgPSBudWxsO1xuICBzdGF0ZS5yZXZlcnNlQXJncyA9IG51bGw7XG4gIHN0YXRlLmNob2ljZSA9IG51bGw7XG4gIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7XG4gIHN0YXRlLmFueSA9IGZhbHNlO1xuICBzdGF0ZS5vYmogPSBmYWxzZTtcbiAgc3RhdGUudXNlID0gbnVsbDtcbiAgc3RhdGUudXNlRGVjb2RlciA9IG51bGw7XG4gIHN0YXRlLmtleSA9IG51bGw7XG4gIHN0YXRlWydkZWZhdWx0J10gPSBudWxsO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuY29udGFpbnMgPSBudWxsO1xuXG4gIC8vIFNob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9uIGVhY2ggbWV0aG9kXG4gIGlmICghc3RhdGUucGFyZW50KSB7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl93cmFwKCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcblxudmFyIHN0YXRlUHJvcHMgPSBbXG4gICdlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsXG4gICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JyxcbiAgJ2ltcGxpY2l0JywgJ2NvbnRhaW5zJ1xuXTtcblxuTm9kZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgY3N0YXRlID0ge307XG4gIHN0YXRlUHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY3N0YXRlW3Byb3BdID0gc3RhdGVbcHJvcF07XG4gIH0pO1xuICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7XG4gIHJlcy5fYmFzZVN0YXRlID0gY3N0YXRlO1xuICByZXR1cm4gcmVzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3dyYXAgPSBmdW5jdGlvbiB3cmFwKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7XG4gICAgICByZXR1cm4gY2xvbmVbbWV0aG9kXS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgYm9keS5jYWxsKHRoaXMpO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlblxuICBzdGF0ZS5jaGlsZHJlbiA9IHN0YXRlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9PT0gdGhpcztcbiAgfSwgdGhpcyk7XG4gIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJncyhhcmdzKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7XG4gIH0sIHRoaXMpO1xuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuICEoYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpO1xuICAgIHN0YXRlLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAvLyBSZXBsYWNlIHBhcmVudCB0byBtYWludGFpbiBiYWNrd2FyZCBsaW5rXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPSB0aGlzO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5hcmdzID09PSBudWxsKTtcbiAgICBzdGF0ZS5hcmdzID0gYXJncztcbiAgICBzdGF0ZS5yZXZlcnNlQXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8IGFyZy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KVxuICAgICAgICByZXR1cm4gYXJnO1xuXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKVxuICAgICAgICAgIGtleSB8PSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIG5vdCBpbXBsZW1lbnRlZCBmb3IgZW5jb2Rpbmc6ICcgKyBzdGF0ZS5lbmMpO1xuICB9O1xufSk7XG5cbi8vXG4vLyBQdWJsaWMgbWV0aG9kc1xuLy9cblxudGFncy5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICBOb2RlLnByb3RvdHlwZVt0YWddID0gZnVuY3Rpb24gX3RhZ01ldGhvZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIGFzc2VydChpdGVtKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS51c2UgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub3B0aW9uYWwgPSBmdW5jdGlvbiBvcHRpb25hbCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmRlZiA9IGZ1bmN0aW9uIGRlZih2YWwpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IHZhbDtcbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZXhwbGljaXQgPSBmdW5jdGlvbiBleHBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuaW1wbGljaXQgPSBmdW5jdGlvbiBpbXBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub2JqID0gZnVuY3Rpb24gb2JqKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICBzdGF0ZS5vYmogPSB0cnVlO1xuXG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMClcbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24ga2V5KG5ld0tleSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmtleSA9PT0gbnVsbCk7XG4gIHN0YXRlLmtleSA9IG5ld0tleTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLmFueSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jaG9pY2UgPSBmdW5jdGlvbiBjaG9pY2Uob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuY2hvaWNlID09PSBudWxsKTtcbiAgc3RhdGUuY2hvaWNlID0gb2JqO1xuICB0aGlzLl91c2VBcmdzKE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhpdGVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUuY29udGFpbnMgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIERlY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIGlucHV0LndyYXBSZXN1bHQoc3RhdGUuY2hpbGRyZW5bMF0uX2RlY29kZShpbnB1dCwgb3B0aW9ucykpO1xuXG4gIHZhciByZXN1bHQgPSBzdGF0ZVsnZGVmYXVsdCddO1xuICB2YXIgcHJlc2VudCA9IHRydWU7XG5cbiAgdmFyIHByZXZLZXkgPSBudWxsO1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICB2YXIgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICAgICAgdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIHByZXNlbnQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVzZW50ID0gdGhpcy5fcGVla1RhZyhpbnB1dCwgdGFnLCBzdGF0ZS5hbnkpO1xuXG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihwcmVzZW50KSlcbiAgICAgICAgcmV0dXJuIHByZXNlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUHVzaCBvYmplY3Qgb24gc3RhY2tcbiAgdmFyIHByZXZPYmo7XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICBwcmV2T2JqID0gaW5wdXQuZW50ZXJPYmplY3QoKTtcblxuICBpZiAocHJlc2VudCkge1xuICAgIC8vIFVud3JhcCBleHBsaWNpdCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHRoaXMuX2RlY29kZVRhZyhpbnB1dCwgc3RhdGUuZXhwbGljaXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoZXhwbGljaXQpKVxuICAgICAgICByZXR1cm4gZXhwbGljaXQ7XG4gICAgICBpbnB1dCA9IGV4cGxpY2l0O1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IGlucHV0Lm9mZnNldDtcblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBpbnB1dC5vZmZzZXQsIGlucHV0Lmxlbmd0aCwgJ2NvbnRlbnQnKTtcblxuICAgIC8vIFNlbGVjdCBwcm9wZXIgbWV0aG9kIGZvciB0YWdcbiAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgcmVzdWx0ID0gcmVzdWx0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcblxuICAgIGlmIChpbnB1dC5pc0Vycm9yKHJlc3VsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgLy8gRGVjb2RlIGNoaWxkcmVuXG4gICAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsICYmIHN0YXRlLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlY29kZSBjb250YWluZWQvZW5jb2RlZCBieSBzY2hlbWEsIG9ubHkgaW4gYml0IG9yIG9jdGV0IHN0cmluZ3NcbiAgICBpZiAoc3RhdGUuY29udGFpbnMgJiYgKHN0YXRlLnRhZyA9PT0gJ29jdHN0cicgfHwgc3RhdGUudGFnID09PSAnYml0c3RyJykpIHtcbiAgICAgIHZhciBkYXRhID0gbmV3IERlY29kZXJCdWZmZXIocmVzdWx0KTtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAgIC5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcbiAgZWxzZSBpZiAocHJldktleSAhPT0gbnVsbClcbiAgICBpbnB1dC5leGl0S2V5KHByZXZLZXkpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcScgfHwgdGFnID09PSAnc2V0JylcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJyB8fCB0YWcgPT09ICdzZXRvZicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywgc3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBzdGF0ZS5hcmdzWzBdLCBzdGF0ZS5hcmdzWzFdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgbnVsbCwgbnVsbCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVUaW1lKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU51bGwoaW5wdXQsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlQm9vbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUludChpbnB1dCwgc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcblxuICBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iailcbiAgICAgICAgLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuICB9XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZ2V0VXNlID0gZnVuY3Rpb24gX2dldFVzZShlbnRpdHksIG9iaikge1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgLy8gQ3JlYXRlIGFsdGVyZWQgdXNlIGRlY29kZXIgaWYgaW1wbGljaXQgaXMgc2V0XG4gIHN0YXRlLnVzZURlY29kZXIgPSB0aGlzLl91c2UoZW50aXR5LCBvYmopO1xuICBhc3NlcnQoc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuY2hpbGRyZW5bMF07XG4gIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0KSB7XG4gICAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuY2xvbmUoKTtcbiAgICBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgfVxuICByZXR1cm4gc3RhdGUudXNlRGVjb2Rlcjtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVDaG9pY2UgPSBmdW5jdGlvbiBkZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgdmFyIG1hdGNoID0gZmFsc2U7XG5cbiAgT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKS5zb21lKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2tleV07XG4gICAgdHJ5IHtcbiAgICAgIHZhciB2YWx1ZSA9IG5vZGUuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCB0aGlzKTtcblxuICBpZiAoIW1hdGNoKVxuICAgIHJldHVybiBpbnB1dC5lcnJvcignQ2hvaWNlIG5vdCBtYXRjaGVkJyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vXG4vLyBFbmNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2NyZWF0ZUVuY29kZXJCdWZmZXIgPSBmdW5jdGlvbiBjcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBFbmNvZGVyQnVmZmVyKGRhdGEsIHRoaXMucmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwgJiYgc3RhdGVbJ2RlZmF1bHQnXSA9PT0gZGF0YSlcbiAgICByZXR1cm47XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2VuY29kZVZhbHVlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuO1xuXG4gIGlmICh0aGlzLl9za2lwRGVmYXVsdChyZXN1bHQsIHJlcG9ydGVyLCBwYXJlbnQpKVxuICAgIHJldHVybjtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVZhbHVlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gc3RhdGUuY2hpbGRyZW5bMF0uX2VuY29kZShkYXRhLCByZXBvcnRlciB8fCBuZXcgUmVwb3J0ZXIoKSk7XG5cbiAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgLy8gU2V0IHJlcG9ydGVyIHRvIHNoYXJlIGl0IHdpdGggYSBjaGlsZCBjbGFzc1xuICB0aGlzLnJlcG9ydGVyID0gcmVwb3J0ZXI7XG5cbiAgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwpXG4gICAgICBkYXRhID0gc3RhdGVbJ2RlZmF1bHQnXVxuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVuY29kZSBjaGlsZHJlbiBmaXJzdFxuICB2YXIgY29udGVudCA9IG51bGw7XG4gIHZhciBwcmltaXRpdmUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmFueSkge1xuICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyXG4gICAgcmVzdWx0ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaG9pY2UpIHtcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNvbnRhaW5zKSB7XG4gICAgY29udGVudCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICBwcmltaXRpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNoaWxkcmVuKSB7XG4gICAgY29udGVudCA9IHN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUudGFnID09PSAnbnVsbF8nKVxuICAgICAgICByZXR1cm4gY2hpbGQuX2VuY29kZShudWxsLCByZXBvcnRlciwgZGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLmtleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBzaG91bGQgaGF2ZSBhIGtleScpO1xuICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgZXhwZWN0ZWQsIGJ1dCBpbnB1dCBpcyBub3Qgb2JqZWN0Jyk7XG5cbiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnc2Vxb2YnIHx8IHN0YXRlLnRhZyA9PT0gJ3NldG9mJykge1xuICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbFxuICAgICAgaWYgKCEoc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzLmxlbmd0aCA9PT0gMSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVG9vIG1hbnkgYXJncyBmb3IgOiAnICsgc3RhdGUudGFnKTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ3NlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXknKTtcblxuICAgICAgdmFyIGNoaWxkID0gdGhpcy5jbG9uZSgpO1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IG51bGw7XG4gICAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLmFyZ3NbMF0sIGRhdGEpLl9lbmNvZGUoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgfSwgY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHRoaXMuX2VuY29kZVByaW1pdGl2ZShzdGF0ZS50YWcsIGRhdGEpO1xuICAgICAgcHJpbWl0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFbmNvZGUgZGF0YSBpdHNlbGZcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgdmFyIHRhZyA9IHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWc7XG4gICAgdmFyIGNscyA9IHN0YXRlLmltcGxpY2l0ID09PSBudWxsID8gJ3VuaXZlcnNhbCcgOiAnY29udGV4dCc7XG5cbiAgICBpZiAodGFnID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXBvcnRlci5lcnJvcignVGFnIGNvdWxkIGJlIG9taXR0ZWQgb25seSBmb3IgLnVzZSgpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZSh0YWcsIHByaW1pdGl2ZSwgY2xzLCBjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBXcmFwIGluIGV4cGxpY2l0XG4gIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUoc3RhdGUuZXhwbGljaXQsIGZhbHNlLCAnY29udGV4dCcsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVDaG9pY2UgPSBmdW5jdGlvbiBlbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2RhdGEudHlwZV07XG4gIGlmICghbm9kZSkge1xuICAgIGFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRhdGEudHlwZSArICcgbm90IGZvdW5kIGluICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKSkpO1xuICB9XG4gIHJldHVybiBub2RlLl9lbmNvZGUoZGF0YS52YWx1ZSwgcmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVByaW1pdGl2ZSA9IGZ1bmN0aW9uIGVuY29kZVByaW1pdGl2ZSh0YWcsIGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICgvc3RyJC8udGVzdCh0YWcpKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIHN0YXRlLnJldmVyc2VBcmdzWzBdLCBzdGF0ZS5hcmdzWzFdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBudWxsLCBudWxsKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVRpbWUoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVOdWxsKCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUludChkYXRhLCBzdGF0ZS5hcmdzICYmIHN0YXRlLnJldmVyc2VBcmdzWzBdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUJvb2woZGF0YSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdGFnOiAnICsgdGFnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc051bXN0ciA9IGZ1bmN0aW9uIGlzTnVtc3RyKHN0cikge1xuICByZXR1cm4gL15bMC05IF0qJC8udGVzdChzdHIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzUHJpbnRzdHIgPSBmdW5jdGlvbiBpc1ByaW50c3RyKHN0cikge1xuICByZXR1cm4gL15bQS1aYS16MC05ICdcXChcXClcXCssXFwtXFwuXFwvOj1cXD9dKiQvLnRlc3Qoc3RyKTtcbn07XG4iLCJ2YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyk7XG5cbmV4cG9ydHMudGFnQ2xhc3MgPSB7XG4gIDA6ICd1bml2ZXJzYWwnLFxuICAxOiAnYXBwbGljYXRpb24nLFxuICAyOiAnY29udGV4dCcsXG4gIDM6ICdwcml2YXRlJ1xufTtcbmV4cG9ydHMudGFnQ2xhc3NCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWdDbGFzcyk7XG5cbmV4cG9ydHMudGFnID0ge1xuICAweDAwOiAnZW5kJyxcbiAgMHgwMTogJ2Jvb2wnLFxuICAweDAyOiAnaW50JyxcbiAgMHgwMzogJ2JpdHN0cicsXG4gIDB4MDQ6ICdvY3RzdHInLFxuICAweDA1OiAnbnVsbF8nLFxuICAweDA2OiAnb2JqaWQnLFxuICAweDA3OiAnb2JqRGVzYycsXG4gIDB4MDg6ICdleHRlcm5hbCcsXG4gIDB4MDk6ICdyZWFsJyxcbiAgMHgwYTogJ2VudW0nLFxuICAweDBiOiAnZW1iZWQnLFxuICAweDBjOiAndXRmOHN0cicsXG4gIDB4MGQ6ICdyZWxhdGl2ZU9pZCcsXG4gIDB4MTA6ICdzZXEnLFxuICAweDExOiAnc2V0JyxcbiAgMHgxMjogJ251bXN0cicsXG4gIDB4MTM6ICdwcmludHN0cicsXG4gIDB4MTQ6ICd0NjFzdHInLFxuICAweDE1OiAndmlkZW9zdHInLFxuICAweDE2OiAnaWE1c3RyJyxcbiAgMHgxNzogJ3V0Y3RpbWUnLFxuICAweDE4OiAnZ2VudGltZScsXG4gIDB4MTk6ICdncmFwaHN0cicsXG4gIDB4MWE6ICdpc282NDZzdHInLFxuICAweDFiOiAnZ2Vuc3RyJyxcbiAgMHgxYzogJ3VuaXN0cicsXG4gIDB4MWQ6ICdjaGFyc3RyJyxcbiAgMHgxZTogJ2JtcHN0cidcbn07XG5leHBvcnRzLnRhZ0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZyk7XG4iLCJ2YXIgZGVjb2RlcnMgPSBleHBvcnRzO1xuXG5kZWNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZGVjb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgREVSRGVjb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTURlY29kZXIoZW50aXR5KSB7XG4gIERFUkRlY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTURlY29kZXIsIERFUkRlY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyO1xuXG5QRU1EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICB2YXIgbGFiZWwgPSBvcHRpb25zLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIHJlID0gL14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgdmFyIGJhc2U2NCA9IGxpbmVzLnNsaWNlKHN0YXJ0ICsgMSwgZW5kKS5qb2luKCcnKTtcbiAgLy8gUmVtb3ZlIGV4Y2Vzc2l2ZSBzeW1ib2xzXG4gIGJhc2U2NC5yZXBsYWNlKC9bXmEtejAtOVxcK1xcLz1dKy9naSwgJycpO1xuXG4gIHZhciBpbnB1dCA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7XG59O1xuIiwidmFyIGVuY29kZXJzID0gZXhwb3J0cztcblxuZW5jb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmVuY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYnVmID0gREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgdmFyIHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzXG4vLyB0aGFua3MgdG8gQFJhbnRhbmVuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBUaW1lID0gYXNuLmRlZmluZSgnVGltZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHV0Y1RpbWU6IHRoaXMudXRjdGltZSgpLFxuICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKVxuICB9KVxufSlcblxudmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3R5cGUnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpXG4gIClcbn0pXG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdjdXJ2ZScpLm9iamlkKCkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgU3ViamVjdFB1YmxpY0tleUluZm8gPSBhc24uZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5cbnZhciBSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lID0gYXNuLmRlZmluZSgnUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRvZihBdHRyaWJ1dGVUeXBlVmFsdWUpXG59KVxuXG52YXIgUkROU2VxdWVuY2UgPSBhc24uZGVmaW5lKCdSRE5TZXF1ZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXFvZihSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lKVxufSlcblxudmFyIE5hbWUgPSBhc24uZGVmaW5lKCdOYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgcmRuU2VxdWVuY2U6IHRoaXMudXNlKFJETlNlcXVlbmNlKVxuICB9KVxufSlcblxudmFyIFZhbGlkaXR5ID0gYXNuLmRlZmluZSgnVmFsaWRpdHknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdub3RCZWZvcmUnKS51c2UoVGltZSksXG4gICAgdGhpcy5rZXkoJ25vdEFmdGVyJykudXNlKFRpbWUpXG4gIClcbn0pXG5cbnZhciBFeHRlbnNpb24gPSBhc24uZGVmaW5lKCdFeHRlbnNpb24nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdleHRuSUQnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdjcml0aWNhbCcpLmJvb2woKS5kZWYoZmFsc2UpLFxuICAgIHRoaXMua2V5KCdleHRuVmFsdWUnKS5vY3RzdHIoKVxuICApXG59KVxuXG52YXIgVEJTQ2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdUQlNDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5leHBsaWNpdCgwKS5pbnQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdpc3N1ZXInKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSxcbiAgICB0aGlzLmtleSgnc3ViamVjdCcpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleUluZm8nKS51c2UoU3ViamVjdFB1YmxpY0tleUluZm8pLFxuICAgIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RVbmlxdWVJRCcpLmltcGxpY2l0KDIpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2V4dGVuc2lvbnMnKS5leHBsaWNpdCgzKS5zZXFvZihFeHRlbnNpb24pLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFg1MDlDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1g1MDlDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3Ric0NlcnRpZmljYXRlJykudXNlKFRCU0NlcnRpZmljYXRlKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlQWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpXG4gIClcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gWDUwOUNlcnRpZmljYXRlXG4iLCIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURbXFxuXFxyXStERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspW1xcblxccl0rKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylbXFxuXFxyXSsvbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qPyBLRVkpfENFUlRJRklDQVRFKS0tLS0tL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qPyBLRVkpfENFUlRJRklDQVRFKS0tLS0tKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKyktLS0tLUVORCBcXDEtLS0tLSQvbVxudmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNzd29yZCkge1xuICB2YXIga2V5ID0gb2tleS50b1N0cmluZygpXG4gIHZhciBtYXRjaCA9IGtleS5tYXRjaChmaW5kUHJvYylcbiAgdmFyIGRlY3J5cHRlZFxuICBpZiAoIW1hdGNoKSB7XG4gICAgdmFyIG1hdGNoMiA9IGtleS5tYXRjaChmdWxsUmVnZXgpXG4gICAgZGVjcnlwdGVkID0gbmV3IEJ1ZmZlcihtYXRjaDJbMl0ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gQnVmZmVyLmZyb20obWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gQnVmZmVyLmZyb20obWF0Y2hbM10ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV1cbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lY1xudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxuXG5mdW5jdGlvbiB2ZXJpZnkgKHNpZywgaGFzaCwga2V5LCBzaWduVHlwZSwgdGFnKSB7XG4gIHZhciBwdWIgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHViLnR5cGUgPT09ICdlYycpIHtcbiAgICAvLyByc2Ega2V5cyBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgZWNkc2Egb25lcyBpbiBvcGVuc3NsXG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGRzYVZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHViLm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbMV1cbiAgdmFyIHBhZE51bSA9IDBcbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDIgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICAgIHBhZE51bSsrXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG4gIHBhZCA9IEJ1ZmZlci5mcm9tKHBhZClcbiAgdmFyIHJlZCA9IEJOLm1vbnQocHViLm1vZHVsdXMpXG4gIHNpZyA9IG5ldyBCTihzaWcpLnRvUmVkKHJlZClcblxuICBzaWcgPSBzaWcucmVkUG93KG5ldyBCTihwdWIucHVibGljRXhwb25lbnQpKVxuICBzaWcgPSBCdWZmZXIuZnJvbShzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IHBhZE51bSA8IDggPyAxIDogMFxuICBsZW4gPSBNYXRoLm1pbihzaWcubGVuZ3RoLCBwYWQubGVuZ3RoKVxuICBpZiAoc2lnLmxlbmd0aCAhPT0gcGFkLmxlbmd0aCkgb3V0ID0gMVxuXG4gIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSBvdXQgfD0gc2lnW2ldIF4gcGFkW2ldXG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoeS50b1JlZChtb250cCkucmVkUG93KHIubXVsKHcpLm1vZChxKSkuZnJvbVJlZCgpKVxuICAgIC5tb2QocClcbiAgICAubW9kKHEpXG4gIHJldHVybiB2LmNtcChyKSA9PT0gMFxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIGlmIChiLmNtcChxKSA+PSBxKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiIsInZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFQ0RIIChjdXJ2ZSkge1xuICByZXR1cm4gbmV3IEVDREgoY3VydmUpXG59XG5cbnZhciBhbGlhc2VzID0ge1xuICBzZWNwMjU2azE6IHtcbiAgICBuYW1lOiAnc2VjcDI1NmsxJyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMjI0cjE6IHtcbiAgICBuYW1lOiAncDIyNCcsXG4gICAgYnl0ZUxlbmd0aDogMjhcbiAgfSxcbiAgcHJpbWUyNTZ2MToge1xuICAgIG5hbWU6ICdwMjU2JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBwcmltZTE5MnYxOiB7XG4gICAgbmFtZTogJ3AxOTInLFxuICAgIGJ5dGVMZW5ndGg6IDI0XG4gIH0sXG4gIGVkMjU1MTk6IHtcbiAgICBuYW1lOiAnZWQyNTUxOScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDM4NHIxOiB7XG4gICAgbmFtZTogJ3AzODQnLFxuICAgIGJ5dGVMZW5ndGg6IDQ4XG4gIH0sXG4gIHNlY3A1MjFyMToge1xuICAgIG5hbWU6ICdwNTIxJyxcbiAgICBieXRlTGVuZ3RoOiA2NlxuICB9XG59XG5cbmFsaWFzZXMucDIyNCA9IGFsaWFzZXMuc2VjcDIyNHIxXG5hbGlhc2VzLnAyNTYgPSBhbGlhc2VzLnNlY3AyNTZyMSA9IGFsaWFzZXMucHJpbWUyNTZ2MVxuYWxpYXNlcy5wMTkyID0gYWxpYXNlcy5zZWNwMTkycjEgPSBhbGlhc2VzLnByaW1lMTkydjFcbmFsaWFzZXMucDM4NCA9IGFsaWFzZXMuc2VjcDM4NHIxXG5hbGlhc2VzLnA1MjEgPSBhbGlhc2VzLnNlY3A1MjFyMVxuXG5mdW5jdGlvbiBFQ0RIIChjdXJ2ZSkge1xuICB0aGlzLmN1cnZlVHlwZSA9IGFsaWFzZXNbY3VydmVdXG4gIGlmICghdGhpcy5jdXJ2ZVR5cGUpIHtcbiAgICB0aGlzLmN1cnZlVHlwZSA9IHtcbiAgICAgIG5hbWU6IGN1cnZlXG4gICAgfVxuICB9XG4gIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuZWModGhpcy5jdXJ2ZVR5cGUubmFtZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIHRoaXMua2V5cyA9IHZvaWQgMFxufVxuXG5FQ0RILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KVxufVxuXG5FQ0RILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyLCBpbmVuYywgZW5jKSB7XG4gIGluZW5jID0gaW5lbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuICAgIG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpXG4gIH1cbiAgdmFyIG90aGVyUHViID0gdGhpcy5jdXJ2ZS5rZXlGcm9tUHVibGljKG90aGVyKS5nZXRQdWJsaWMoKVxuICB2YXIgb3V0ID0gb3RoZXJQdWIubXVsKHRoaXMua2V5cy5nZXRQcml2YXRlKCkpLmdldFgoKVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB2YXIga2V5ID0gdGhpcy5rZXlzLmdldFB1YmxpYyhmb3JtYXQgPT09ICdjb21wcmVzc2VkJywgdHJ1ZSlcbiAgaWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcbiAgICBpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcbiAgICAgIGtleVswXSA9IDdcbiAgICB9IGVsc2Uge1xuICAgICAga2V5WzBdID0gNlxuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLnNldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKVxuICB9XG4gIHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1YilcbiAgcmV0dXJuIHRoaXNcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYylcbiAgfVxuXG4gIHZhciBfcHJpdiA9IG5ldyBCTihwcml2KVxuICBfcHJpdiA9IF9wcml2LnRvU3RyaW5nKDE2KVxuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICB0aGlzLmtleXMuX2ltcG9ydFByaXZhdGUoX3ByaXYpXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlIChibiwgZW5jLCBsZW4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGJuKSkge1xuICAgIGJuID0gYm4udG9BcnJheSgpXG4gIH1cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4pXG4gIGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgYnVmID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIGJ1Zl0pXG4gIH1cbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpXG4gIH1cbn1cbiIsImV4cG9ydHMucHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJy4vcHVibGljRW5jcnlwdCcpXG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcmVxdWlyZSgnLi9wcml2YXRlRGVjcnlwdCcpXG5cbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBwcml2YXRlRW5jcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHVibGljRW5jcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gZnVuY3Rpb24gcHVibGljRGVjcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHJpdmF0ZURlY3J5cHQoa2V5LCBidWYsIHRydWUpXG59XG4iLCJ2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQgKHB1YmxpY0tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwdWJsaWNLZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwdWJsaWNLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNLZXkpXG4gIHZhciBwYWRkZWRNc2dcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcGFkZGVkTXNnID0gbmV3IEJOKG1zZylcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKVxuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcmV0dXJuIGNydChwYWRkZWRNc2csIGtleSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSlcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuXG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpXG4gIH1cbiAgdmFyIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gaExlbjIgLSAyKVxuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDFcbiAgdmFyIHNlZWQgPSByYW5kb21CeXRlcyhoTGVuKVxuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBCdWZmZXIuYWxsb2MoMSwgMSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSlcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgcmV0dXJuIG5ldyBCTihCdWZmZXIuY29uY2F0KFtCdWZmZXIuYWxsb2MoMSksIG1hc2tlZFNlZWQsIG1hc2tlZERiXSwgaykpXG59XG5mdW5jdGlvbiBwa2NzMSAoa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHNcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBwcyA9IEJ1ZmZlci5hbGxvYyhrIC0gbUxlbiAtIDMsIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMylcbiAgfVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFswLCByZXZlcnNlID8gMSA6IDJdKSwgcHMsIEJ1ZmZlci5hbGxvYygxKSwgbXNnXSwgaykpXG59XG5mdW5jdGlvbiBub25aZXJvIChsZW4pIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gMFxuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4gKiAyKVxuICB2YXIgY3VyID0gMFxuICB2YXIgbnVtXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKGN1ciA9PT0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gICAgICBjdXIgPSAwXG4gICAgfVxuICAgIG51bSA9IGNhY2hlW2N1cisrXVxuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtXG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJpdmF0ZURlY3J5cHQgKHByaXZhdGVLZXksIGVuYywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZ1xuICBpZiAocHJpdmF0ZUtleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHByaXZhdGVLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cblxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHByaXZhdGVLZXkpXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChlbmMubGVuZ3RoID4gayB8fCBuZXcgQk4oZW5jKS5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtc2dcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBCTihlbmMpLCBrZXkpXG4gIH0gZWxzZSB7XG4gICAgbXNnID0gY3J0KGVuYywga2V5KVxuICB9XG4gIHZhciB6QnVmZmVyID0gQnVmZmVyLmFsbG9jKGsgLSBtc2cubGVuZ3RoKVxuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKVxuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHJldHVybiBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICByZXR1cm4gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2dcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbn1cblxuZnVuY3Rpb24gb2FlcCAoa2V5LCBtc2cpIHtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtYXNrZWRTZWVkID0gbXNnLnNsaWNlKDEsIGhMZW4gKyAxKVxuICB2YXIgbWFza2VkRGIgPSBtc2cuc2xpY2UoaExlbiArIDEpXG4gIHZhciBzZWVkID0geG9yKG1hc2tlZFNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpXG4gIHZhciBkYiA9IHhvcihtYXNrZWREYiwgbWdmKHNlZWQsIGsgLSBoTGVuIC0gMSkpXG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBpID0gaExlblxuICB3aGlsZSAoZGJbaV0gPT09IDApIHtcbiAgICBpKytcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIGRiLnNsaWNlKGkpXG59XG5cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMilcbiAgdmFyIGkgPSAyXG4gIHZhciBzdGF0dXMgPSAwXG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICB2YXIgcHMgPSBtc2cuc2xpY2UoMiwgaSAtIDEpXG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrXG4gIH1cbiAgaWYgKHN0YXR1cykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIG1zZy5zbGljZShpKVxufVxuZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBhID0gQnVmZmVyLmZyb20oYSlcbiAgYiA9IEJ1ZmZlci5mcm9tKGIpXG4gIHZhciBkaWYgPSAwXG4gIHZhciBsZW4gPSBhLmxlbmd0aFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmKytcbiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgZGlmICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gZGlmXG59XG4iLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclxcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxudmFyIHNhZmVCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpXG52YXIgcmFuZG9tYnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgQnVmZmVyID0gc2FmZUJ1ZmZlci5CdWZmZXJcbnZhciBrQnVmZmVyTWF4TGVuZ3RoID0gc2FmZUJ1ZmZlci5rTWF4TGVuZ3RoXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbnZhciBrTWF4VWludDMyID0gTWF0aC5wb3coMiwgMzIpIC0gMVxuZnVuY3Rpb24gYXNzZXJ0T2Zmc2V0IChvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICE9PSBvZmZzZXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga01heFVpbnQzMiB8fCBvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtCdWZmZXJNYXhMZW5ndGggfHwgb2Zmc2V0ID4gbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBvdXQgb2YgcmFuZ2UnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSAhPT0gc2l6ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoc2l6ZSA+IGtNYXhVaW50MzIgfHwgc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKHNpemUgKyBvZmZzZXQgPiBsZW5ndGggfHwgc2l6ZSA+IGtCdWZmZXJNYXhMZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnVmZmVyIHRvbyBzbWFsbCcpXG4gIH1cbn1cbmlmICgoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHx8ICFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gcmFuZG9tRmlsbFxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gcmFuZG9tRmlsbFN5bmNcbn0gZWxzZSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IG9sZEJyb3dzZXJcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IG9sZEJyb3dzZXJcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9mZnNldFxuICAgIG9mZnNldCA9IDBcbiAgICBzaXplID0gYnVmLmxlbmd0aFxuICB9IGVsc2UgaWYgKHR5cGVvZiBzaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBzaXplXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNiXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUsIGNiKVxufVxuXG5mdW5jdGlvbiBhY3R1YWxGaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgIHZhciBvdXJCdWYgPSBidWYuYnVmZmVyXG4gICAgdmFyIHVpbnQgPSBuZXcgVWludDhBcnJheShvdXJCdWYsIG9mZnNldCwgc2l6ZSlcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVpbnQpXG4gICAgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCwgYnVmKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH1cbiAgaWYgKGNiKSB7XG4gICAgcmFuZG9tYnl0ZXMoc2l6ZSwgZnVuY3Rpb24gKGVyciwgYnl0ZXMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNiKGVycilcbiAgICAgIH1cbiAgICAgIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gICAgICBjYihudWxsLCBidWYpXG4gICAgfSlcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnl0ZXMgPSByYW5kb21ieXRlcyhzaXplKVxuICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICByZXR1cm4gYnVmXG59XG5mdW5jdGlvbiByYW5kb21GaWxsU3luYyAoYnVmLCBvZmZzZXQsIHNpemUpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2Zmc2V0ID0gMFxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIGlmIChzaXplID09PSB1bmRlZmluZWQpIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG5cbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUpXG59XG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZFxuXHQgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8vIFJlZmVyZW5jZSBvcmlnaW5hbCBpbml0XG5cdCAgICB2YXIgc3VwZXJJbml0ID0gV29yZEFycmF5LmluaXQ7XG5cblx0ICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5c1xuXHQgICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdCAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29udmVydCBvdGhlciBhcnJheSB2aWV3cyB0byB1aW50OFxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxuXHQgICAgICAgICAgICAodHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcblx0ICAgICAgICApIHtcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSGFuZGxlIFVpbnQ4QXJyYXlcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIEV4dHJhY3QgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWRBcnJheUJ5dGVMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gdHlwZWRBcnJheVtpXSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgd29yZCBhcnJheVxuXHQgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdFxuXHQgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBzdWJJbml0LnByb3RvdHlwZSA9IFdvcmRBcnJheTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5saWIuV29yZEFycmF5O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IEJFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmMTZCRSA9IENfZW5jLlV0ZjE2ID0gQ19lbmMuVXRmMTZCRSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGYxNlN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGYxNi5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgQkUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTYucGFyc2UodXRmMTZTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtMTYgTEUgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIENfZW5jLlV0ZjE2TEUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHIgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgTEUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5wYXJzZSh1dGYxNlN0cik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGYxNlN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHtcblx0ICAgICAgICByZXR1cm4gKCh3b3JkIDw8IDgpICYgMHhmZjAwZmYwMCkgfCAoKHdvcmQgPj4+IDgpICYgMHgwMGZmMDBmZik7XG5cdCAgICB9XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuZW5jLlV0ZjE2O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTI1NlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGEyNTZcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTY7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTIyNCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTIyNCA9IENfYWxnby5TSEEyMjQgPSBTSEEyNTYuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG5cdCAgICAgICAgICAgICAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIZWxwZXIoU0hBMjI0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEyMjQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIbWFjSGVscGVyKFNIQTIyNCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjI0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpLCByZXF1aXJlKFwiLi9zaGE1MTJcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4veDY0LWNvcmVcIiwgXCIuL3NoYTUxMlwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX3g2NCA9IEMueDY0O1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkO1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMzg0IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMzg0ID0gQ19hbGdvLlNIQTM4NCA9IFNIQTUxMi5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4KSwgbmV3IFg2NFdvcmQuaW5pdCgweDYyOWEyOTJhLCAweDM2N2NkNTA3KSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyksIG5ldyBYNjRXb3JkLmluaXQoMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEpLCBuZXcgWDY0V29yZC5pbml0KDB4OGViNDRhODcsIDB4Njg1ODE1MTEpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweGRiMGMyZTBkLCAweDY0Zjk4ZmE3KSwgbmV3IFg2NFdvcmQuaW5pdCgweDQ3YjU0ODFkLCAweGJlZmE0ZmE0KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSBTSEE1MTIuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICBoYXNoLnNpZ0J5dGVzIC09IDE2O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhlbHBlcihTSEEzODQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTM4NChtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMzg0KTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEzODQ7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4veDY0LWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4veDY0LWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX3g2NCA9IEMueDY0O1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlc1xuXHQgICAgdmFyIFJIT19PRkZTRVRTID0gW107XG5cdCAgICB2YXIgUElfSU5ERVhFUyAgPSBbXTtcblx0ICAgIHZhciBST1VORF9DT05TVEFOVFMgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBDb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gQ29tcHV0ZSByaG8gb2Zmc2V0IGNvbnN0YW50c1xuXHQgICAgICAgIHZhciB4ID0gMSwgeSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCAyNDsgdCsrKSB7XG5cdCAgICAgICAgICAgIFJIT19PRkZTRVRTW3ggKyA1ICogeV0gPSAoKHQgKyAxKSAqICh0ICsgMikgLyAyKSAlIDY0O1xuXG5cdCAgICAgICAgICAgIHZhciBuZXdYID0geSAlIDU7XG5cdCAgICAgICAgICAgIHZhciBuZXdZID0gKDIgKiB4ICsgMyAqIHkpICUgNTtcblx0ICAgICAgICAgICAgeCA9IG5ld1g7XG5cdCAgICAgICAgICAgIHkgPSBuZXdZO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENvbXB1dGUgcGkgaW5kZXggY29uc3RhbnRzXG5cdCAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgIFBJX0lOREVYRVNbeCArIDUgKiB5XSA9IHkgKyAoKDIgKiB4ICsgMyAqIHkpICUgNSkgKiA1O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29tcHV0ZSByb3VuZCBjb25zdGFudHNcblx0ICAgICAgICB2YXIgTEZTUiA9IDB4MDE7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50TXN3ID0gMDtcblx0ICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRMc3cgPSAwO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNzsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoTEZTUiAmIDB4MDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYml0UG9zaXRpb24gPSAoMSA8PCBqKSAtIDE7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGJpdFBvc2l0aW9uIDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRDb25zdGFudExzdyBePSAxIDw8IGJpdFBvc2l0aW9uO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAoYml0UG9zaXRpb24gPj0gMzIpICovIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRDb25zdGFudE1zdyBePSAxIDw8IChiaXRQb3NpdGlvbiAtIDMyKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgbmV4dCBMRlNSXG5cdCAgICAgICAgICAgICAgICBpZiAoTEZTUiAmIDB4ODApIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBQcmltaXRpdmUgcG9seW5vbWlhbCBvdmVyIEdGKDIpOiB4XjggKyB4XjYgKyB4XjUgKyB4XjQgKyAxXG5cdCAgICAgICAgICAgICAgICAgICAgTEZTUiA9IChMRlNSIDw8IDEpIF4gMHg3MTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgTEZTUiA8PD0gMTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIFJPVU5EX0NPTlNUQU5UU1tpXSA9IFg2NFdvcmQuY3JlYXRlKHJvdW5kQ29uc3RhbnRNc3csIHJvdW5kQ29uc3RhbnRMc3cpO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdHMgZm9yIHRlbXBvcmFyeSB2YWx1ZXNcblx0ICAgIHZhciBUID0gW107XG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gWDY0V29yZC5jcmVhdGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0zIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMyA9IENfYWxnby5TSEEzID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IG91dHB1dExlbmd0aFxuXHQgICAgICAgICAqICAgVGhlIGRlc2lyZWQgbnVtYmVyIG9mIGJpdHMgaW4gdGhlIG91dHB1dCBoYXNoLlxuXHQgICAgICAgICAqICAgT25seSB2YWx1ZXMgcGVybWl0dGVkIGFyZTogMjI0LCAyNTYsIDM4NCwgNTEyLlxuXHQgICAgICAgICAqICAgRGVmYXVsdDogNTEyXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBIYXNoZXIuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIG91dHB1dExlbmd0aDogNTEyXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZSA9IFtdXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgc3RhdGVbaV0gPSBuZXcgWDY0V29yZC5pbml0KCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9ICgxNjAwIC0gMiAqIHRoaXMuY2ZnLm91dHB1dExlbmd0aCkgLyAzMjtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblx0ICAgICAgICAgICAgdmFyIG5CbG9ja1NpemVMYW5lcyA9IHRoaXMuYmxvY2tTaXplIC8gMjtcblxuXHQgICAgICAgICAgICAvLyBBYnNvcmJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQmxvY2tTaXplTGFuZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgTTJpICA9IE1bb2Zmc2V0ICsgMiAqIGldO1xuXHQgICAgICAgICAgICAgICAgdmFyIE0yaTEgPSBNW29mZnNldCArIDIgKiBpICsgMV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBNMmkgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTTJpIDw8IDgpICB8IChNMmkgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTTJpIDw8IDI0KSB8IChNMmkgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICAgIE0yaTEgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTTJpMSA8PCA4KSAgfCAoTTJpMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkxIDw8IDI0KSB8IChNMmkxID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEFic29yYiBtZXNzYWdlIGludG8gc3RhdGVcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07XG5cdCAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gTTJpMTtcblx0ICAgICAgICAgICAgICAgIGxhbmUubG93ICBePSBNMmk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSb3VuZHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgcm91bmQgPSAwOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBUaGV0YVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBNaXggY29sdW1uIGxhbmVzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAwLCB0THN3ID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRNc3cgXj0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0THN3IF49IGxhbmUubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFRlbXBvcmFyeSB2YWx1ZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHggPSBUW3hdO1xuXHQgICAgICAgICAgICAgICAgICAgIFR4LmhpZ2ggPSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIFR4LmxvdyAgPSB0THN3O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHg0ID0gVFsoeCArIDQpICUgNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MSA9IFRbKHggKyAxKSAlIDVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDFNc3cgPSBUeDEuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTHN3ID0gVHgxLmxvdztcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1peCBzdXJyb3VuZGluZyBjb2x1bW5zXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSBUeDQuaGlnaCBeICgoVHgxTXN3IDw8IDEpIHwgKFR4MUxzdyA+Pj4gMzEpKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdExzdyA9IFR4NC5sb3cgIF4gKChUeDFMc3cgPDwgMSkgfCAoVHgxTXN3ID4+PiAzMSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5oaWdoIF49IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUubG93ICBePSB0THN3O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmhvIFBpXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBsYW5lSW5kZXggPSAxOyBsYW5lSW5kZXggPCAyNTsgbGFuZUluZGV4KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdExzdztcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZU1zdyA9IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByaG9PZmZzZXQgPSBSSE9fT0ZGU0VUU1tsYW5lSW5kZXhdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRlIGxhbmVzXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJob09mZnNldCA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRNc3cgPSAobGFuZU1zdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVMc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0THN3ID0gKGxhbmVMc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTXN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHJob09mZnNldCA+PSAzMikgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0TXN3ID0gKGxhbmVMc3cgPDwgKHJob09mZnNldCAtIDMyKSkgfCAobGFuZU1zdyA+Pj4gKDY0IC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgPSAobGFuZU1zdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTHN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc3Bvc2UgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVFBpTGFuZSA9IFRbUElfSU5ERVhFU1tsYW5lSW5kZXhdXTtcblx0ICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmhpZ2ggPSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJobyBwaSBhdCB4ID0geSA9IDBcblx0ICAgICAgICAgICAgICAgIHZhciBUMCA9IFRbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGUwID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICBUMC5oaWdoID0gc3RhdGUwLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICBUMC5sb3cgID0gc3RhdGUwLmxvdztcblxuXHQgICAgICAgICAgICAgICAgLy8gQ2hpXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUluZGV4ID0geCArIDUgKiB5O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2xhbmVJbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUTGFuZSA9IFRbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxhbmUgPSBUWygoeCArIDEpICUgNSkgKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUeDJMYW5lID0gVFsoKHggKyAyKSAlIDUpICsgNSAqIHldO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCByb3dzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUuaGlnaCA9IFRMYW5lLmhpZ2ggXiAoflR4MUxhbmUuaGlnaCAmIFR4MkxhbmUuaGlnaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUubG93ICA9IFRMYW5lLmxvdyAgXiAoflR4MUxhbmUubG93ICAmIFR4MkxhbmUubG93KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElvdGFcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudCA9IFJPVU5EX0NPTlNUQU5UU1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHJvdW5kQ29uc3RhbnQubG93O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCaXRzID0gdGhpcy5ibG9ja1NpemUgKiAzMjtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDEgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKChNYXRoLmNlaWwoKG5CaXRzTGVmdCArIDEpIC8gYmxvY2tTaXplQml0cykgKiBibG9ja1NpemVCaXRzKSA+Pj4gNSkgLSAxXSB8PSAweDgwO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblx0ICAgICAgICAgICAgdmFyIG91dHB1dExlbmd0aEJ5dGVzID0gdGhpcy5jZmcub3V0cHV0TGVuZ3RoIC8gODtcblx0ICAgICAgICAgICAgdmFyIG91dHB1dExlbmd0aExhbmVzID0gb3V0cHV0TGVuZ3RoQnl0ZXMgLyA4O1xuXG5cdCAgICAgICAgICAgIC8vIFNxdWVlemVcblx0ICAgICAgICAgICAgdmFyIGhhc2hXb3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dExlbmd0aExhbmVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTtcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmVMc3cgPSBsYW5lLmxvdztcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIGxhbmVNc3cgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZU1zdyA8PCA4KSAgfCAobGFuZU1zdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDI0KSB8IChsYW5lTXN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgICAgICBsYW5lTHN3ID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgOCkgIHwgKGxhbmVMc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZUxzdyA8PCAyNCkgfCAobGFuZUxzdyA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTcXVlZXplIHN0YXRlIHRvIHJldHJpZXZlIGhhc2hcblx0ICAgICAgICAgICAgICAgIGhhc2hXb3Jkcy5wdXNoKGxhbmVMc3cpO1xuXHQgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZU1zdyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KGhhc2hXb3Jkcywgb3V0cHV0TGVuZ3RoQnl0ZXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSBjbG9uZS5fc3RhdGUgPSB0aGlzLl9zdGF0ZS5zbGljZSgwKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IHN0YXRlW2ldLmNsb25lKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMyA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTMpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTMobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMyA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEEzKTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqIEBwcmVzZXJ2ZVxuXHQoYykgMjAxMiBieSBDw6lkcmljIE1lc25pbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuXHRSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cblx0ICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cblx0VEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXHQqL1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIENvbnN0YW50cyB0YWJsZVxuXHQgICAgdmFyIF96bCA9IFdvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG5cdCAgICAgICAgNywgIDQsIDEzLCAgMSwgMTAsICA2LCAxNSwgIDMsIDEyLCAgMCwgIDksICA1LCAgMiwgMTQsIDExLCAgOCxcblx0ICAgICAgICAzLCAxMCwgMTQsICA0LCAgOSwgMTUsICA4LCAgMSwgIDIsICA3LCAgMCwgIDYsIDEzLCAxMSwgIDUsIDEyLFxuXHQgICAgICAgIDEsICA5LCAxMSwgMTAsICAwLCAgOCwgMTIsICA0LCAxMywgIDMsICA3LCAxNSwgMTQsICA1LCAgNiwgIDIsXG5cdCAgICAgICAgNCwgIDAsICA1LCAgOSwgIDcsIDEyLCAgMiwgMTAsIDE0LCAgMSwgIDMsICA4LCAxMSwgIDYsIDE1LCAxM10pO1xuXHQgICAgdmFyIF96ciA9IFdvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgIDUsIDE0LCAgNywgIDAsICA5LCAgMiwgMTEsICA0LCAxMywgIDYsIDE1LCAgOCwgIDEsIDEwLCAgMywgMTIsXG5cdCAgICAgICAgNiwgMTEsICAzLCAgNywgIDAsIDEzLCAgNSwgMTAsIDE0LCAxNSwgIDgsIDEyLCAgNCwgIDksICAxLCAgMixcblx0ICAgICAgICAxNSwgIDUsICAxLCAgMywgIDcsIDE0LCAgNiwgIDksIDExLCAgOCwgMTIsICAyLCAxMCwgIDAsICA0LCAxMyxcblx0ICAgICAgICA4LCAgNiwgIDQsICAxLCAgMywgMTEsIDE1LCAgMCwgIDUsIDEyLCAgMiwgMTMsICA5LCAgNywgMTAsIDE0LFxuXHQgICAgICAgIDEyLCAxNSwgMTAsICA0LCAgMSwgIDUsICA4LCAgNywgIDYsICAyLCAxMywgMTQsICAwLCAgMywgIDksIDExXSk7XG5cdCAgICB2YXIgX3NsID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgIDExLCAxNCwgMTUsIDEyLCAgNSwgIDgsICA3LCAgOSwgMTEsIDEzLCAxNCwgMTUsICA2LCAgNywgIDksICA4LFxuXHQgICAgICAgIDcsIDYsICAgOCwgMTMsIDExLCAgOSwgIDcsIDE1LCAgNywgMTIsIDE1LCAgOSwgMTEsICA3LCAxMywgMTIsXG5cdCAgICAgICAgMTEsIDEzLCAgNiwgIDcsIDE0LCAgOSwgMTMsIDE1LCAxNCwgIDgsIDEzLCAgNiwgIDUsIDEyLCAgNywgIDUsXG5cdCAgICAgICAgICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCAgOSwgIDgsICA5LCAxNCwgIDUsICA2LCAgOCwgIDYsICA1LCAxMixcblx0ICAgICAgICA5LCAxNSwgIDUsIDExLCAgNiwgIDgsIDEzLCAxMiwgIDUsIDEyLCAxMywgMTQsIDExLCAgOCwgIDUsICA2IF0pO1xuXHQgICAgdmFyIF9zciA9IFdvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgIDgsICA5LCAgOSwgMTEsIDEzLCAxNSwgMTUsICA1LCAgNywgIDcsICA4LCAxMSwgMTQsIDE0LCAxMiwgIDYsXG5cdCAgICAgICAgOSwgMTMsIDE1LCAgNywgMTIsICA4LCAgOSwgMTEsICA3LCAgNywgMTIsICA3LCAgNiwgMTUsIDEzLCAxMSxcblx0ICAgICAgICA5LCAgNywgMTUsIDExLCAgOCwgIDYsICA2LCAxNCwgMTIsIDEzLCAgNSwgMTQsIDEzLCAxMywgIDcsICA1LFxuXHQgICAgICAgIDE1LCAgNSwgIDgsIDExLCAxNCwgMTQsICA2LCAxNCwgIDYsICA5LCAxMiwgIDksIDEyLCAgNSwgMTUsICA4LFxuXHQgICAgICAgIDgsICA1LCAxMiwgIDksIDEyLCAgNSwgMTQsICA2LCAgOCwgMTMsICA2LCAgNSwgMTUsIDEzLCAxMSwgMTEgXSk7XG5cblx0ICAgIHZhciBfaGwgPSAgV29yZEFycmF5LmNyZWF0ZShbIDB4MDAwMDAwMDAsIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4QTk1M0ZENEVdKTtcblx0ICAgIHZhciBfaHIgPSAgV29yZEFycmF5LmNyZWF0ZShbIDB4NTBBMjhCRTYsIDB4NUM0REQxMjQsIDB4NkQ3MDNFRjMsIDB4N0E2RDc2RTksIDB4MDAwMDAwMDBdKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSSVBFTUQxNjAgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSSVBFTUQxNjAgPSBDX2FsZ28uUklQRU1EMTYwID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCAgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDY3NDUyMzAxLCAweEVGQ0RBQjg5LCAweDk4QkFEQ0ZFLCAweDEwMzI1NDc2LCAweEMzRDJFMUYwXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0X2kgPSBvZmZzZXQgKyBpO1xuXHQgICAgICAgICAgICAgICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXRfaV0gPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIEggID0gdGhpcy5faGFzaC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGhsID0gX2hsLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaHIgPSBfaHIud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB6bCA9IF96bC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHpyID0gX3pyLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2wgPSBfc2wud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzciA9IF9zci53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYWwsIGJsLCBjbCwgZGwsIGVsO1xuXHQgICAgICAgICAgICB2YXIgYXIsIGJyLCBjciwgZHIsIGVyO1xuXG5cdCAgICAgICAgICAgIGFyID0gYWwgPSBIWzBdO1xuXHQgICAgICAgICAgICBiciA9IGJsID0gSFsxXTtcblx0ICAgICAgICAgICAgY3IgPSBjbCA9IEhbMl07XG5cdCAgICAgICAgICAgIGRyID0gZGwgPSBIWzNdO1xuXHQgICAgICAgICAgICBlciA9IGVsID0gSFs0XTtcblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgdmFyIHQ7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuXHQgICAgICAgICAgICAgICAgdCA9IChhbCArICBNW29mZnNldCt6bFtpXV0pfDA7XG5cdCAgICAgICAgICAgICAgICBpZiAoaTwxNil7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjEoYmwsY2wsZGwpICsgaGxbMF07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8MzIpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMihibCxjbCxkbCkgKyBobFsxXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw0OCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYzKGJsLGNsLGRsKSArIGhsWzJdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDY0KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjQoYmwsY2wsZGwpICsgaGxbM107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjUoYmwsY2wsZGwpICsgaGxbNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0ID0gdHwwO1xuXHQgICAgICAgICAgICAgICAgdCA9ICByb3RsKHQsc2xbaV0pO1xuXHQgICAgICAgICAgICAgICAgdCA9ICh0K2VsKXwwO1xuXHQgICAgICAgICAgICAgICAgYWwgPSBlbDtcblx0ICAgICAgICAgICAgICAgIGVsID0gZGw7XG5cdCAgICAgICAgICAgICAgICBkbCA9IHJvdGwoY2wsIDEwKTtcblx0ICAgICAgICAgICAgICAgIGNsID0gYmw7XG5cdCAgICAgICAgICAgICAgICBibCA9IHQ7XG5cblx0ICAgICAgICAgICAgICAgIHQgPSAoYXIgKyBNW29mZnNldCt6cltpXV0pfDA7XG5cdCAgICAgICAgICAgICAgICBpZiAoaTwxNil7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjUoYnIsY3IsZHIpICsgaHJbMF07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8MzIpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNChicixjcixkcikgKyBoclsxXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw0OCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYzKGJyLGNyLGRyKSArIGhyWzJdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDY0KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjIoYnIsY3IsZHIpICsgaHJbM107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjEoYnIsY3IsZHIpICsgaHJbNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0ID0gdHwwO1xuXHQgICAgICAgICAgICAgICAgdCA9ICByb3RsKHQsc3JbaV0pIDtcblx0ICAgICAgICAgICAgICAgIHQgPSAodCtlcil8MDtcblx0ICAgICAgICAgICAgICAgIGFyID0gZXI7XG5cdCAgICAgICAgICAgICAgICBlciA9IGRyO1xuXHQgICAgICAgICAgICAgICAgZHIgPSByb3RsKGNyLCAxMCk7XG5cdCAgICAgICAgICAgICAgICBjciA9IGJyO1xuXHQgICAgICAgICAgICAgICAgYnIgPSB0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIHQgICAgPSAoSFsxXSArIGNsICsgZHIpfDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsyXSArIGRsICsgZXIpfDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFszXSArIGVsICsgYXIpfDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFs0XSArIGFsICsgYnIpfDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFswXSArIGJsICsgY3IpfDA7XG5cdCAgICAgICAgICAgIEhbMF0gPSAgdDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgOCkgIHwgKG5CaXRzVG90YWwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsIDw8IDI0KSB8IChuQml0c1RvdGFsID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IChkYXRhV29yZHMubGVuZ3RoICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoO1xuXHQgICAgICAgICAgICB2YXIgSCA9IGhhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgSF9pID0gSFtpXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcFxuXHQgICAgICAgICAgICAgICAgSFtpXSA9ICgoKEhfaSA8PCA4KSAgfCAoSF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXG5cdCAgICBmdW5jdGlvbiBmMSh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoeCkgXiAoeSkgXiAoeikpO1xuXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGYyKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkmKHkpKSB8ICgofngpJih6KSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmMyh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoKHgpIHwgKH4oeSkpKSBeICh6KSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGY0KHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkgJiAoeikpIHwgKCh5KSYofih6KSkpKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjUoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKHgpIF4gKCh5KSB8KH4oeikpKSk7XG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gcm90bCh4LG4pIHtcblx0ICAgICAgICByZXR1cm4gKHg8PG4pIHwgKHg+Pj4oMzItbikpO1xuXHQgICAgfVxuXG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5SSVBFTUQxNjAoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlJJUEVNRDE2MCA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFJJUEVNRDE2MCk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjUklQRU1EMTYwKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1JJUEVNRDE2MCA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihSSVBFTUQxNjApO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5SSVBFTUQxNjA7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vaG1hY1wiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGExXCIsIFwiLi9obWFjXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTE7XG5cdCAgICB2YXIgSE1BQyA9IENfYWxnby5ITUFDO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgUEJLREYyID0gQ19hbGdvLlBCS0RGMiA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UuIERlZmF1bHQ6IFNIQTFcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsXG5cdCAgICAgICAgICAgIGhhc2hlcjogU0hBMSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9uczogMVxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgSE1BQ1xuXHQgICAgICAgICAgICB2YXIgaG1hYyA9IEhNQUMuY3JlYXRlKGNmZy5oYXNoZXIsIHBhc3N3b3JkKTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXggPSBXb3JkQXJyYXkuY3JlYXRlKFsweDAwMDAwMDAxXSk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5V29yZHMgPSBkZXJpdmVkS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tJbmRleFdvcmRzID0gYmxvY2tJbmRleC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9ucztcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlcblx0ICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBobWFjLnVwZGF0ZShzYWx0KS5maW5hbGl6ZShibG9ja0luZGV4KTtcblx0ICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tXb3JkcyA9IGJsb2NrLndvcmRzO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHNMZW5ndGggPSBibG9ja1dvcmRzLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0aW9uc1xuXHQgICAgICAgICAgICAgICAgdmFyIGludGVybWVkaWF0ZSA9IGJsb2NrO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnRlcm1lZGlhdGUgPSBobWFjLmZpbmFsaXplKGludGVybWVkaWF0ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaG1hYy5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlV29yZHMgPSBpbnRlcm1lZGlhdGUud29yZHM7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBYT1IgaW50ZXJtZWRpYXRlIHdpdGggYmxvY2tcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJsb2NrV29yZHNMZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBibG9ja1dvcmRzW2pdIF49IGludGVybWVkaWF0ZVdvcmRzW2pdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgYmxvY2tJbmRleFdvcmRzWzBdKys7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAqL1xuXHQgICAgQy5QQktERjIgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykge1xuXHQgICAgICAgIHJldHVybiBQQktERjIuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlBCS0RGMjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIENpcGhlciBGZWVkYmFjayBibG9jayBtb2RlLlxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5DRkIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIENGQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgIENGQi5FbmNyeXB0b3IgPSBDRkIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQuY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcik7XG5cblx0ICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ0ZCLkRlY3J5cHRvciA9IENGQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICB2YXIgdGhpc0Jsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTtcblxuXHQgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIGJlY29tZXMgdGhlIHByZXZpb3VzIGJsb2NrXG5cdCAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9jaztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0KHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKSB7XG5cdCAgICAgICAgdmFyIGtleXN0cmVhbTtcblxuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cblx0ICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAga2V5c3RyZWFtID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBrZXlzdHJlYW0gPSB0aGlzLl9wcmV2QmxvY2s7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBDRkI7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMubW9kZS5DRkI7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ1RSID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUi5FbmNyeXB0b3IgPSBDVFIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXJcblx0ICAgICAgICAgICAgY291bnRlcltibG9ja1NpemUgLSAxXSA9IChjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdICsgMSkgfCAwXG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIENUUjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNUUjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqIEBwcmVzZXJ2ZVxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuY1xuXHQgKiBkZXJpdmVkIGZyb20gQ3J5cHRvSlMubW9kZS5DVFJcblx0ICogSmFuIEhydWJ5IGpocnVieS53ZWJAZ21haWwuY29tXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW4gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIENUUkdsYWRtYW4gPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdFx0ZnVuY3Rpb24gaW5jV29yZCh3b3JkKVxuXHRcdHtcblx0XHRcdGlmICgoKHdvcmQgPj4gMjQpICYgMHhmZikgPT09IDB4ZmYpIHsgLy9vdmVyZmxvd1xuXHRcdFx0dmFyIGIxID0gKHdvcmQgPj4gMTYpJjB4ZmY7XG5cdFx0XHR2YXIgYjIgPSAod29yZCA+PiA4KSYweGZmO1xuXHRcdFx0dmFyIGIzID0gd29yZCAmIDB4ZmY7XG5cblx0XHRcdGlmIChiMSA9PT0gMHhmZikgLy8gb3ZlcmZsb3cgYjFcblx0XHRcdHtcblx0XHRcdGIxID0gMDtcblx0XHRcdGlmIChiMiA9PT0gMHhmZilcblx0XHRcdHtcblx0XHRcdFx0YjIgPSAwO1xuXHRcdFx0XHRpZiAoYjMgPT09IDB4ZmYpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRiMyA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0KytiMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQrK2IyO1xuXHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0KytiMTtcblx0XHRcdH1cblxuXHRcdFx0d29yZCA9IDA7XG5cdFx0XHR3b3JkICs9IChiMSA8PCAxNik7XG5cdFx0XHR3b3JkICs9IChiMiA8PCA4KTtcblx0XHRcdHdvcmQgKz0gYjM7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHR3b3JkICs9ICgweDAxIDw8IDI0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB3b3JkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGluY0NvdW50ZXIoY291bnRlcilcblx0XHR7XG5cdFx0XHRpZiAoKGNvdW50ZXJbMF0gPSBpbmNXb3JkKGNvdW50ZXJbMF0pKSA9PT0gMClcblx0XHRcdHtcblx0XHRcdFx0Ly8gZW5jcl9kYXRhIGluIGZpbGVlbmMuYyBmcm9tICBEciBCcmlhbiBHbGFkbWFuJ3MgY291bnRzIG9ubHkgd2l0aCBEV09SRCBqIDwgOFxuXHRcdFx0XHRjb3VudGVyWzFdID0gaW5jV29yZChjb3VudGVyWzFdKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudGVyO1xuXHRcdH1cblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUkdsYWRtYW4uRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblxuXHRcdFx0XHRpbmNDb3VudGVyKGNvdW50ZXIpO1xuXG5cdFx0XHRcdHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSR2xhZG1hbi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7XG5cblx0ICAgIHJldHVybiBDVFJHbGFkbWFuO1xuXHR9KCkpO1xuXG5cblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW47XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBPdXRwdXQgRmVlZGJhY2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuT0ZCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBPRkIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gT0ZCLkVuY3J5cHRvciA9IE9GQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIga2V5c3RyZWFtID0gdGhpcy5fa2V5c3RyZWFtO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbSA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgT0ZCLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIE9GQjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLk9GQjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIEVsZWN0cm9uaWMgQ29kZWJvb2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuRUNCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBFQ0IgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICBFQ0IuRW5jcnlwdG9yID0gRUNCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBFQ0IuRGVjcnlwdG9yID0gRUNCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICByZXR1cm4gRUNCO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuRUNCO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogQU5TSSBYLjkyMyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLkFuc2lYOTIzID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAvLyBDb21wdXRlIGxhc3QgYnl0ZSBwb3NpdGlvblxuXHQgICAgICAgIHZhciBsYXN0Qnl0ZVBvcyA9IGRhdGFTaWdCeXRlcyArIG5QYWRkaW5nQnl0ZXMgLSAxO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEud29yZHNbbGFzdEJ5dGVQb3MgPj4+IDJdIHw9IG5QYWRkaW5nQnl0ZXMgPDwgKDI0IC0gKGxhc3RCeXRlUG9zICUgNCkgKiA4KTtcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzICs9IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLkFuc2l4OTIzO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogSVNPIDEwMTI2IHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIFBhZFxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKG5QYWRkaW5nQnl0ZXMgLSAxKSkuXG5cdCAgICAgICAgICAgICBjb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoW25QYWRkaW5nQnl0ZXMgPDwgMjRdLCAxKSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzEwMTI2O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogSVNPL0lFQyA5Nzk3LTEgUGFkZGluZyBNZXRob2QgMi5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc285Nzk3MSA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIEFkZCAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLmNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHg4MDAwMDAwMF0sIDEpKTtcblxuXHQgICAgICAgIC8vIFplcm8gcGFkIHRoZSByZXN0XG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnBhZChkYXRhLCBibG9ja1NpemUpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gUmVtb3ZlIHplcm8gcGFkZGluZ1xuXHQgICAgICAgIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZy51bnBhZChkYXRhKTtcblxuXHQgICAgICAgIC8vIFJlbW92ZSBvbmUgbW9yZSBieXRlIC0tIHRoZSAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzLS07XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzk3OTcxO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogWmVybyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLlplcm9QYWRkaW5nID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gYmxvY2tTaXplQnl0ZXMgLSAoKGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcykgfHwgYmxvY2tTaXplQnl0ZXMpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgIC8vIFVucGFkXG5cdCAgICAgICAgdmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gZGF0YS5zaWdCeXRlcyAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgIGlmICgoKGRhdGFXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmYpKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gaSArIDE7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmc7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBBIG5vb3AgcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Ob1BhZGRpbmcgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLk5vUGFkZGluZztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcztcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIEhleCA9IENfZW5jLkhleDtcblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0O1xuXG5cdCAgICB2YXIgSGV4Rm9ybWF0dGVyID0gQ19mb3JtYXQuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoZSBjaXBoZXJ0ZXh0IG9mIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0LnRvU3RyaW5nKEhleCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIGNpcGhlcnRleHQgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5IZXgucGFyc2UoaGV4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGlucHV0KSB7XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gSGV4LnBhcnNlKGlucHV0KTtcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuZm9ybWF0LkhleDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIExvb2t1cCB0YWJsZXNcblx0ICAgIHZhciBTQk9YID0gW107XG5cdCAgICB2YXIgSU5WX1NCT1ggPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzAgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzMgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMSA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8zID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgbG9va3VwIHRhYmxlc1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuXHQgICAgICAgIHZhciBkID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoaSA8IDEyOCkge1xuXHQgICAgICAgICAgICAgICAgZFtpXSA9IGkgPDwgMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gV2FsayBHRigyXjgpXG5cdCAgICAgICAgdmFyIHggPSAwO1xuXHQgICAgICAgIHZhciB4aSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHNib3hcblx0ICAgICAgICAgICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNCk7XG5cdCAgICAgICAgICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2Mztcblx0ICAgICAgICAgICAgU0JPWFt4XSA9IHN4O1xuXHQgICAgICAgICAgICBJTlZfU0JPWFtzeF0gPSB4O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cblx0ICAgICAgICAgICAgdmFyIHgyID0gZFt4XTtcblx0ICAgICAgICAgICAgdmFyIHg0ID0gZFt4Ml07XG5cdCAgICAgICAgICAgIHZhciB4OCA9IGRbeDRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcblx0ICAgICAgICAgICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMlt4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8wW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8yW3N4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzNbc3hdID0gdDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlclxuXHQgICAgICAgICAgICBpZiAoIXgpIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4aSA9IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dO1xuXHQgICAgICAgICAgICAgICAgeGkgXj0gZFtkW3hpXV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cFxuXHQgICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQUVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBBRVMgPSBDX2FsZ28uQUVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgdDtcblxuXHQgICAgICAgICAgICAvLyBTa2lwIHJlc2V0IG9mIG5Sb3VuZHMgaGFzIGJlZW4gc2V0IGJlZm9yZSBhbmQga2V5IGRpZCBub3QgY2hhbmdlXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9uUm91bmRzICYmIHRoaXMuX2tleVByaW9yUmVzZXQgPT09IHRoaXMuX2tleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlQcmlvclJlc2V0ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0ga2V5LnNpZ0J5dGVzIC8gNDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHNcblx0ICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDY7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Yga2V5IHNjaGVkdWxlIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUga2V5IHNjaGVkdWxlXG5cdCAgICAgICAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrc1JvdyA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlXb3Jkc1trc1Jvd107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDFdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCEoa3NSb3cgJSBrZXlTaXplKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3Qgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YiB3b3JkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWl4IFJjb25cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCBePSBSQ09OWyhrc1JvdyAvIGtleVNpemUpIHwgMF0gPDwgMjQ7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXlTaXplID4gNiAmJiBrc1JvdyAlIGtleVNpemUgPT0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIGtleVNjaGVkdWxlW2tzUm93XSA9IGtleVNjaGVkdWxlW2tzUm93IC0ga2V5U2l6ZV0gXiB0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYga2V5IHNjaGVkdWxlXG5cdCAgICAgICAgICAgIHZhciBpbnZLZXlTY2hlZHVsZSA9IHRoaXMuX2ludktleVNjaGVkdWxlID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrc1JvdyA9IGtzUm93cyAtIGludktzUm93O1xuXG5cdCAgICAgICAgICAgICAgICBpZiAoaW52S3NSb3cgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1Jvd107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSA0XTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93IDwgNCB8fCBrc1JvdyA8PSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gdDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gSU5WX1NVQl9NSVhfMFtTQk9YW3QgPj4+IDI0XV0gXiBJTlZfU1VCX01JWF8xW1NCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdXSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5WX1NVQl9NSVhfMltTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdXSBeIElOVl9TVUJfTUlYXzNbU0JPWFt0ICYgMHhmZl1dO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9rZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFN3YXAgMm5kIGFuZCA0dGggcm93c1xuXHQgICAgICAgICAgICB2YXIgdCA9IE1bb2Zmc2V0ICsgMV07XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDtcblxuXHQgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgSU5WX1NVQl9NSVhfMCwgSU5WX1NVQl9NSVhfMSwgSU5WX1NVQl9NSVhfMiwgSU5WX1NVQl9NSVhfMywgSU5WX1NCT1gpO1xuXG5cdCAgICAgICAgICAgIC8vIEludiBzd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIGtleVNjaGVkdWxlLCBTVUJfTUlYXzAsIFNVQl9NSVhfMSwgU1VCX01JWF8yLCBTVUJfTUlYXzMsIFNCT1gpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzO1xuXG5cdCAgICAgICAgICAgIC8vIEdldCBpbnB1dCwgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICB2YXIgczAgPSBNW29mZnNldF0gICAgIF4ga2V5U2NoZWR1bGVbMF07XG5cdCAgICAgICAgICAgIHZhciBzMSA9IE1bb2Zmc2V0ICsgMV0gXiBrZXlTY2hlZHVsZVsxXTtcblx0ICAgICAgICAgICAgdmFyIHMyID0gTVtvZmZzZXQgKyAyXSBeIGtleVNjaGVkdWxlWzJdO1xuXHQgICAgICAgICAgICB2YXIgczMgPSBNW29mZnNldCArIDNdIF4ga2V5U2NoZWR1bGVbM107XG5cblx0ICAgICAgICAgICAgLy8gS2V5IHNjaGVkdWxlIHJvdyBjb3VudGVyXG5cdCAgICAgICAgICAgIHZhciBrc1JvdyA9IDQ7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCBuUm91bmRzOyByb3VuZCsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zLCBhZGQgcm91bmQga2V5XG5cdCAgICAgICAgICAgICAgICB2YXIgdDAgPSBTVUJfTUlYXzBbczAgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgICAgICB2YXIgdDEgPSBTVUJfTUlYXzBbczEgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgICAgICB2YXIgdDIgPSBTVUJfTUlYXzBbczIgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczMgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgICAgICB2YXIgdDMgPSBTVUJfTUlYXzBbczMgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGF0ZVxuXHQgICAgICAgICAgICAgICAgczAgPSB0MDtcblx0ICAgICAgICAgICAgICAgIHMxID0gdDE7XG5cdCAgICAgICAgICAgICAgICBzMiA9IHQyO1xuXHQgICAgICAgICAgICAgICAgczMgPSB0Mztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICB2YXIgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgb3V0cHV0XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSAgICAgPSB0MDtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHQxO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDJdID0gdDI7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0Mztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMjU2LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuQUVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihBRVMpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLkFFUztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMSBjb25zdGFudHNcblx0ICAgIHZhciBQQzEgPSBbXG5cdCAgICAgICAgNTcsIDQ5LCA0MSwgMzMsIDI1LCAxNywgOSwgIDEsXG5cdCAgICAgICAgNTgsIDUwLCA0MiwgMzQsIDI2LCAxOCwgMTAsIDIsXG5cdCAgICAgICAgNTksIDUxLCA0MywgMzUsIDI3LCAxOSwgMTEsIDMsXG5cdCAgICAgICAgNjAsIDUyLCA0NCwgMzYsIDYzLCA1NSwgNDcsIDM5LFxuXHQgICAgICAgIDMxLCAyMywgMTUsIDcsICA2MiwgNTQsIDQ2LCAzOCxcblx0ICAgICAgICAzMCwgMjIsIDE0LCA2LCAgNjEsIDUzLCA0NSwgMzcsXG5cdCAgICAgICAgMjksIDIxLCAxMywgNSwgIDI4LCAyMCwgMTIsIDRcblx0ICAgIF07XG5cblx0ICAgIC8vIFBlcm11dGVkIENob2ljZSAyIGNvbnN0YW50c1xuXHQgICAgdmFyIFBDMiA9IFtcblx0ICAgICAgICAxNCwgMTcsIDExLCAyNCwgMSwgIDUsXG5cdCAgICAgICAgMywgIDI4LCAxNSwgNiwgIDIxLCAxMCxcblx0ICAgICAgICAyMywgMTksIDEyLCA0LCAgMjYsIDgsXG5cdCAgICAgICAgMTYsIDcsICAyNywgMjAsIDEzLCAyLFxuXHQgICAgICAgIDQxLCA1MiwgMzEsIDM3LCA0NywgNTUsXG5cdCAgICAgICAgMzAsIDQwLCA1MSwgNDUsIDMzLCA0OCxcblx0ICAgICAgICA0NCwgNDksIDM5LCA1NiwgMzQsIDUzLFxuXHQgICAgICAgIDQ2LCA0MiwgNTAsIDM2LCAyOSwgMzJcblx0ICAgIF07XG5cblx0ICAgIC8vIEN1bXVsYXRpdmUgYml0IHNoaWZ0IGNvbnN0YW50c1xuXHQgICAgdmFyIEJJVF9TSElGVFMgPSBbMSwgIDIsICA0LCAgNiwgIDgsICAxMCwgMTIsIDE0LCAxNSwgMTcsIDE5LCAyMSwgMjMsIDI1LCAyNywgMjhdO1xuXG5cdCAgICAvLyBTQk9YZXMgYW5kIHJvdW5kIHBlcm11dGF0aW9uIGNvbnN0YW50c1xuXHQgICAgdmFyIFNCT1hfUCA9IFtcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDA6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHgyMDAwMDAwMDogMHg4MDgwMDIsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDA6IDB4Mixcblx0ICAgICAgICAgICAgMHg0MDAwMDAwMDogMHgyMDAsXG5cdCAgICAgICAgICAgIDB4NTAwMDAwMDA6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDYwMDAwMDAwOiAweDgwMDIwMixcblx0ICAgICAgICAgICAgMHg3MDAwMDAwMDogMHg4MDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDA6IDB4MjAyLFxuXHQgICAgICAgICAgICAweDkwMDAwMDAwOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwMDogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDAwOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDAwMDogMHg4MDAyLFxuXHQgICAgICAgICAgICAweGQwMDAwMDAwOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHhlMDAwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweGYwMDAwMDAwOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDAwOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHgyODAwMDAwMDogMHg4MjAyLFxuXHQgICAgICAgICAgICAweDM4MDAwMDAwOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4NDgwMDAwMDA6IDB4ODA4MjAwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDAwOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDAwMDogMHg4MDgwMDIsXG5cdCAgICAgICAgICAgIDB4NzgwMDAwMDA6IDB4Mixcblx0ICAgICAgICAgICAgMHg4ODAwMDAwMDogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwMDA6IDB4ODIwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDAwMDogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4YjgwMDAwMDA6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweGM4MDAwMDAwOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHhkODAwMDAwMDogMHg4MDAyLFxuXHQgICAgICAgICAgICAweGU4MDAwMDAwOiAweDIwMixcblx0ICAgICAgICAgICAgMHhmODAwMDAwMDogMHg4MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAxOiAweDIsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwMDE6IDB4ODA4MjAwLFxuXHQgICAgICAgICAgICAweDMwMDAwMDAxOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDAwMTogMHg4MDgwMDIsXG5cdCAgICAgICAgICAgIDB4NTAwMDAwMDE6IDB4ODIwMCxcblx0ICAgICAgICAgICAgMHg2MDAwMDAwMTogMHgyMDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDAwMDE6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAxOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHg5MDAwMDAwMTogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4YTAwMDAwMDE6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGIwMDAwMDAxOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDE6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGQwMDAwMDAxOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHhlMDAwMDAwMTogMHg4MDAyLFxuXHQgICAgICAgICAgICAweGYwMDAwMDAxOiAweDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDE6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweDI4MDAwMDAxOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHgzODAwMDAwMTogMHgyMDAsXG5cdCAgICAgICAgICAgIDB4NDgwMDAwMDE6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHg1ODAwMDAwMTogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwMDE6IDB4Mixcblx0ICAgICAgICAgICAgMHg3ODAwMDAwMTogMHg4MjAyLFxuXHQgICAgICAgICAgICAweDg4MDAwMDAxOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwMDE6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweGE4MDAwMDAxOiAweDIwMixcblx0ICAgICAgICAgICAgMHhiODAwMDAwMTogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDE6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDAxOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDE6IDB4ODIwMCxcblx0ICAgICAgICAgICAgMHhmODAwMDAwMTogMHg4MDgwMDJcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgyMDAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDMwMDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4NDAwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHg1MDAwMDAwOiAweDQwMDg0MDAwLFxuXHQgICAgICAgICAgICAweDYwMDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4YTAwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHhiMDAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweGMwMDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDA6IDB4NDAxMCxcblx0ICAgICAgICAgICAgMHhmMDAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDI4MDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwMDogMHg4MDAwMCxcblx0ICAgICAgICAgICAgMHg3ODAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDg4MDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweGM4MDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDogMHg4NDAwMCxcblx0ICAgICAgICAgICAgMHhlODAwMDAwOiAweDQwMDg0MDAwLFxuXHQgICAgICAgICAgICAweGY4MDAwMDA6IDB4NDAxMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDExMDAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDEyMDAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDEzMDAwMDAwOiAweDQwMDg0MDAwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDE2MDAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDE3MDAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4NDAxMCxcblx0ICAgICAgICAgICAgMHgxOTAwMDAwMDogMHg4MDAwMCxcblx0ICAgICAgICAgICAgMHgxYTAwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDAwMDogMHg4NDAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHgxZTAwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjAwMDAwMDogMHg0MDA4NDAxMCxcblx0ICAgICAgICAgICAgMHgxMDgwMDAwMDogMHg4NDAxMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDAwMDogMHg4MDAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwMDAwMDogMHg0MDA4MDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDE1ODAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE4ODAwMDAwOiAweDQwMDg0MDAwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDFhODAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDFiODAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDFjODAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwMDA6IDB4NDAxMCxcblx0ICAgICAgICAgICAgMHgxZTgwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDAwMDogMHg4NDAwMFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDEwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDMwMDAwMDogMHgxMDEwNCxcblx0ICAgICAgICAgICAgMHg0MDAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4NTAwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwOiAweDQwMTAxMDQsXG5cdCAgICAgICAgICAgIDB4NzAwMDAwOiAweDQwMTAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4YTAwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweGMwMDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweGQwMDAwMDogMHgxMDAwMCxcblx0ICAgICAgICAgICAgMHhlMDAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHhmMDAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDgwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4NDgwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHg3ODAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDg4MDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDk4MDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwOiAweDQwMTAwMDAsXG5cdCAgICAgICAgICAgIDB4YjgwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweGM4MDAwMDogMHgxMDEwMCxcblx0ICAgICAgICAgICAgMHhkODAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHhlODAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHhmODAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHgxMjAwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDEzMDAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHgxNDAwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHgxNTAwMDAwOiAweDQwMTAxMDQsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwMDogMHg0MDAwMDA0LFxuXHQgICAgICAgICAgICAweDE3MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHgxYjAwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxZTAwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDFmMDAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgxMDgwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MTI4MDAwMDogMHg0MDEwMTAwLFxuXHQgICAgICAgICAgICAweDEzODAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxNDgwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDE1ODAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHgxNjgwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHgxNzgwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwMDogMHgxMDAwMCxcblx0ICAgICAgICAgICAgMHgxOTgwMDAwOiAweDQwMTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwMDogMHgxMDEwNCxcblx0ICAgICAgICAgICAgMHgxYjgwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweDFkODAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTgwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4MWY4MDAwMDogMHgxMDEwMFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDA6IDB4ODAwMDEwNDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweDMwMDAwOiAweDgwNDAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4NTAwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDYwMDAwOiAweDgwMDAwMDQwLFxuXHQgICAgICAgICAgICAweDcwMDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDogMHg4MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDogMHg0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4YTAwMDA6IDB4NDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDA6IDB4ODAwMDEwMDAsXG5cdCAgICAgICAgICAgIDB4YzAwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4ZDAwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHhlMDAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweGYwMDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDgwMDA6IDB4ODAwMDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDA6IDB4NDAsXG5cdCAgICAgICAgICAgIDB4MjgwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MzgwMDA6IDB4ODAwMDEwMDAsXG5cdCAgICAgICAgICAgIDB4NDgwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDU4MDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDY4MDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4NzgwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODgwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDogMHg0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4YjgwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHhjODAwMDogMHg4MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHhkODAwMDogMHg0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4ZTgwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweGY4MDAwOiAweDgwMDAwMDQwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDogMHg0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwOiAweDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxMjAwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwOiAweDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwOiAweDgwNDAwMDQwLFxuXHQgICAgICAgICAgICAweDE2MDAwMDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxNzAwMDA6IDB4ODAwMDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDE5MDAwMDogMHg4MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYTAwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWIwMDAwOiAweDQwMTA0MCxcblx0ICAgICAgICAgICAgMHgxYzAwMDA6IDB4ODAwMDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTAwMDA6IDB4NDAsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTA4MDAwOiAweDgwNDAwMDAwLFxuXHQgICAgICAgICAgICAweDExODAwMDogMHg4MDQwMTA0MCxcblx0ICAgICAgICAgICAgMHgxMjgwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxMzgwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDogMHg0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxNzgwMDA6IDB4NDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwOiAweDgwMDAwMDQwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDFhODAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHgxYjgwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwOiAweDEwNDAsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwMDogMHg0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWY4MDAwOiAweDQwMTA0MFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTAwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDIwMDA6IDB4NDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg0MDAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDUwMDA6IDB4MTAwMDA4MCxcblx0ICAgICAgICAgICAgMHg2MDAwOiAweDIxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDcwMDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4ODAwMDogMHgxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4YTAwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHhiMDAwOiAweDIxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGMwMDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweGUwMDA6IDB4MTA0MDA4MCxcblx0ICAgICAgICAgICAgMHhmMDAwOiAweDIxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE4MDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MjgwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgzODAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDgwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHg1ODAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDY4MDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4ODAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDk4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHhhODAwOiAweDIxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGI4MDA6IDB4MTAwMDA4MCxcblx0ICAgICAgICAgICAgMHhjODAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweGQ4MDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZTgwMDogMHgxMDAwMDAwLFxuXHQgICAgICAgICAgICAweGY4MDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MTAwMDA6IDB4NDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTIwMDA6IDB4MjAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTQwMDA6IDB4MTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxNTAwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxNjAwMDogMHgyMDA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxNzAwMDogMHgxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwOiAweDIxMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE5MDAwOiAweDIxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWIwMDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MWQwMDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MWUwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZjAwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweDEwODAwOiAweDIxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDExODAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTI4MDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwMDogMHgyMDA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxNDgwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNTgwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE2ODAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDE3ODAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDE4ODAwOiAweDQwMDgwLFxuXHQgICAgICAgICAgICAweDE5ODAwOiAweDIxMDQwMDgwLFxuXHQgICAgICAgICAgICAweDFhODAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWI4MDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWM4MDA6IDB4MTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgxZTgwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDogMHgyMDAwMDA4MFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4MTAwMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTAwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwOiAweDEwMjAwMDAwLFxuXHQgICAgICAgICAgICAweDMwMDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHg0MDA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4NTAwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHg2MDA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDcwMDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg5MDA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4YTAwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhiMDA6IDB4OCxcblx0ICAgICAgICAgICAgMHhjMDA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4ZDAwOiAweDIwMjAwOCxcblx0ICAgICAgICAgICAgMHhlMDA6IDB4MjAwOCxcblx0ICAgICAgICAgICAgMHhmMDA6IDB4MTAyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4ODA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDI4MDogMHg4LFxuXHQgICAgICAgICAgICAweDM4MDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDgwOiAweDIwMjAwOCxcblx0ICAgICAgICAgICAgMHg1ODA6IDB4MTAwMDAwMDgsXG5cdCAgICAgICAgICAgIDB4NjgwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDc4MDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDg4MDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4OTgwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4YTgwOiAweDEwMDAyMDA4LFxuXHQgICAgICAgICAgICAweGI4MDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHhjODA6IDB4MCxcblx0ICAgICAgICAgICAgMHhkODA6IDB4MTAyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4ZTgwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhmODA6IDB4MTAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHgxMTAwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweDEyMDA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTMwMDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDE0MDA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDE1MDA6IDB4MTAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxNzAwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxODAwOiAweDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxOTAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDogMHg4LFxuXHQgICAgICAgICAgICAweDFiMDA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDFkMDA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MWUwMDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxZjAwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMDgwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MTE4MDogMHgyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTI4MDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxNDgwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDE1ODA6IDB4MjAwOCxcblx0ICAgICAgICAgICAgMHgxNjgwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDE3ODA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxOTgwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweDFhODA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgxYjgwOiAweDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxYzgwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHgxZDgwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwOiAweDEwMDAyMDA4XG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTA6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgyMDogMHg0MDAsXG5cdCAgICAgICAgICAgIDB4MzA6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDQwOiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4NTA6IDB4MCxcblx0ICAgICAgICAgICAgMHg2MDogMHgxLFxuXHQgICAgICAgICAgICAweDcwOiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4ODA6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHg5MDogMHgxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4YTA6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHhiMDogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweGMwOiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZDA6IDB4NDAxLFxuXHQgICAgICAgICAgICAweGUwOiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHhmMDogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDg6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxODogMHgwLFxuXHQgICAgICAgICAgICAweDI4OiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4Mzg6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHg0ODogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4NTg6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHg2ODogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDc4OiAweDQwMSxcblx0ICAgICAgICAgICAgMHg4ODogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4OTg6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHhhODogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweGI4OiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHhjODogMHg0MDAsXG5cdCAgICAgICAgICAgIDB4ZDg6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHhlODogMHgxLFxuXHQgICAgICAgICAgICAweGY4OiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxMDA6IDB4MjAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTA6IDB4MTAwMDAwLFxuXHQgICAgICAgICAgICAweDEyMDogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDEzMDogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDE0MDogMHgxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTUwOiAweDIwMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTYwOiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTcwOiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHgxODA6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDE5MDogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDFhMDogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MWIwOiAweDEsXG5cdCAgICAgICAgICAgIDB4MWMwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWQwOiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWUwOiAweDIwMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MWYwOiAweDQwMCxcblx0ICAgICAgICAgICAgMHgxMDg6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDExODogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDEyODogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDEzODogMHgxLFxuXHQgICAgICAgICAgICAweDE0ODogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE1ODogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTY4OiAweDQwMSxcblx0ICAgICAgICAgICAgMHgxNzg6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxODg6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHgxOTg6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYjg6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHgxYzg6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDFkODogMHg0MDAsXG5cdCAgICAgICAgICAgIDB4MWU4OiAweDIwMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MWY4OiAweDEwMDAwMVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHgxOiAweDIwMDAwLFxuXHQgICAgICAgICAgICAweDI6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHgzOiAweDIwLFxuXHQgICAgICAgICAgICAweDQ6IDB4MjAwMjAsXG5cdCAgICAgICAgICAgIDB4NTogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDY6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHg3OiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4OiAweDgwMjAwMDAsXG5cdCAgICAgICAgICAgIDB4OTogMHg4MDAwODAwLFxuXHQgICAgICAgICAgICAweGE6IDB4MjA4MDAsXG5cdCAgICAgICAgICAgIDB4YjogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweGM6IDB4ODIwLFxuXHQgICAgICAgICAgICAweGQ6IDB4MCxcblx0ICAgICAgICAgICAgMHhlOiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ZjogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMDogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMjogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAzOiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDQ6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNTogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNjogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNzogMHgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwODogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA5OiAweDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwYTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwYjogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBjOiAweDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGQ6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZTogMHg4MDAwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBmOiAweDIwMDAwLFxuXHQgICAgICAgICAgICAweDEwOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDExOiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4MTI6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4MTM6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDE0OiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4MTU6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHgxNjogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDE3OiAweDIwMDAwLFxuXHQgICAgICAgICAgICAweDE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4MTk6IDB4MjAwMjAsXG5cdCAgICAgICAgICAgIDB4MWE6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHgxYjogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDFjOiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4MWQ6IDB4MjA4MDAsXG5cdCAgICAgICAgICAgIDB4MWU6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDFmOiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTA6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTE6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDEyOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTM6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTQ6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTU6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE3OiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTg6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxOTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFhOiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWI6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYzogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZDogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWU6IDB4MjAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWY6IDB4ODAyMDgwMFxuXHQgICAgICAgIH1cblx0ICAgIF07XG5cblx0ICAgIC8vIE1hc2tzIHRoYXQgc2VsZWN0IHRoZSBTQk9YIGlucHV0XG5cdCAgICB2YXIgU0JPWF9NQVNLID0gW1xuXHQgICAgICAgIDB4ZjgwMDAwMDEsIDB4MWY4MDAwMDAsIDB4MDFmODAwMDAsIDB4MDAxZjgwMDAsXG5cdCAgICAgICAgMHgwMDAxZjgwMCwgMHgwMDAwMWY4MCwgMHgwMDAwMDFmOCwgMHg4MDAwMDAxZlxuXHQgICAgXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIERFUyA9IENfYWxnby5ERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU2VsZWN0IDU2IGJpdHMgYWNjb3JkaW5nIHRvIFBDMVxuXHQgICAgICAgICAgICB2YXIga2V5Qml0cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCaXRQb3MgPSBQQzFbaV0gLSAxO1xuXHQgICAgICAgICAgICAgICAga2V5Qml0c1tpXSA9IChrZXlXb3Jkc1trZXlCaXRQb3MgPj4+IDVdID4+PiAoMzEgLSBrZXlCaXRQb3MgJSAzMikpICYgMTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFzc2VtYmxlIDE2IHN1YmtleXNcblx0ICAgICAgICAgICAgdmFyIHN1YktleXMgPSB0aGlzLl9zdWJLZXlzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIG5TdWJLZXkgPSAwOyBuU3ViS2V5IDwgMTY7IG5TdWJLZXkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHN1YmtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YktleSA9IHN1YktleXNbblN1YktleV0gPSBbXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRTaGlmdCA9IEJJVF9TSElGVFNbblN1YktleV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNlbGVjdCA0OCBiaXRzIGFjY29yZGluZyB0byBQQzJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBmcm9tIHRoZSBsZWZ0IDI4IGtleSBiaXRzXG5cdCAgICAgICAgICAgICAgICAgICAgc3ViS2V5WyhpIC8gNikgfCAwXSB8PSBrZXlCaXRzWygoUEMyW2ldIC0gMSkgKyBiaXRTaGlmdCkgJSAyOF0gPDwgKDMxIC0gaSAlIDYpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIHJpZ2h0IDI4IGtleSBiaXRzXG5cdCAgICAgICAgICAgICAgICAgICAgc3ViS2V5WzQgKyAoKGkgLyA2KSB8IDApXSB8PSBrZXlCaXRzWzI4ICsgKCgoUEMyW2kgKyAyNF0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4KV0gPDwgKDMxIC0gaSAlIDYpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBTaW5jZSBlYWNoIHN1YmtleSBpcyBhcHBsaWVkIHRvIGFuIGV4cGFuZGVkIDMyLWJpdCBpbnB1dCxcblx0ICAgICAgICAgICAgICAgIC8vIHRoZSBzdWJrZXkgY2FuIGJlIGJyb2tlbiBpbnRvIDggdmFsdWVzIHNjYWxlZCB0byAzMi1iaXRzLFxuXHQgICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBrZXkgdG8gYmUgdXNlZCB3aXRob3V0IGV4cGFuc2lvblxuXHQgICAgICAgICAgICAgICAgc3ViS2V5WzBdID0gKHN1YktleVswXSA8PCAxKSB8IChzdWJLZXlbMF0gPj4+IDMxKTtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNzsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3ViS2V5W2ldID0gc3ViS2V5W2ldID4+PiAoKGkgLSAxKSAqIDQgKyAzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHN1YktleVs3XSA9IChzdWJLZXlbN10gPDwgNSkgfCAoc3ViS2V5WzddID4+PiAyNyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIGludmVyc2Ugc3Via2V5c1xuXHQgICAgICAgICAgICB2YXIgaW52U3ViS2V5cyA9IHRoaXMuX2ludlN1YktleXMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpbnZTdWJLZXlzW2ldID0gc3ViS2V5c1sxNSAtIGldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9zdWJLZXlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX2ludlN1YktleXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBzdWJLZXlzKSB7XG5cdCAgICAgICAgICAgIC8vIEdldCBpbnB1dFxuXHQgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSBNW29mZnNldF07XG5cdCAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IE1bb2Zmc2V0ICsgMV07XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCBwZXJtdXRhdGlvblxuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgNCwgIDB4MGYwZjBmMGYpO1xuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMTYsIDB4MDAwMGZmZmYpO1xuXHQgICAgICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgMiwgIDB4MzMzMzMzMzMpO1xuXHQgICAgICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgOCwgIDB4MDBmZjAwZmYpO1xuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMSwgIDB4NTU1NTU1NTUpO1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMTY7IHJvdW5kKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIHN1YktleSA9IHN1YktleXNbcm91bmRdO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxCbG9jayA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgICAgIHZhciByQmxvY2sgPSB0aGlzLl9yQmxvY2s7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEZlaXN0ZWwgZnVuY3Rpb25cblx0ICAgICAgICAgICAgICAgIHZhciBmID0gMDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZiB8PSBTQk9YX1BbaV1bKChyQmxvY2sgXiBzdWJLZXlbaV0pICYgU0JPWF9NQVNLW2ldKSA+Pj4gMF07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSByQmxvY2s7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSBsQmxvY2sgXiBmO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gVW5kbyBzd2FwIGZyb20gbGFzdCByb3VuZFxuXHQgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgdGhpcy5fbEJsb2NrID0gdGhpcy5fckJsb2NrO1xuXHQgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSB0O1xuXG5cdCAgICAgICAgICAgIC8vIEZpbmFsIHBlcm11dGF0aW9uXG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gPSB0aGlzLl9sQmxvY2s7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0aGlzLl9yQmxvY2s7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMixcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvLyBTd2FwIGJpdHMgYWNyb3NzIHRoZSBsZWZ0IGFuZCByaWdodCB3b3Jkc1xuXHQgICAgZnVuY3Rpb24gZXhjaGFuZ2VMUihvZmZzZXQsIG1hc2spIHtcblx0ICAgICAgICB2YXIgdCA9ICgodGhpcy5fbEJsb2NrID4+PiBvZmZzZXQpIF4gdGhpcy5fckJsb2NrKSAmIG1hc2s7XG5cdCAgICAgICAgdGhpcy5fckJsb2NrIF49IHQ7XG5cdCAgICAgICAgdGhpcy5fbEJsb2NrIF49IHQgPDwgb2Zmc2V0O1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBleGNoYW5nZVJMKG9mZnNldCwgbWFzaykge1xuXHQgICAgICAgIHZhciB0ID0gKCh0aGlzLl9yQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9sQmxvY2spICYgbWFzaztcblx0ICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdDtcblx0ICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdCA8PCBvZmZzZXQ7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuREVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuREVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkRFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoREVTKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBUcmlwbGUtREVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBUcmlwbGVERVMgPSBDX2FsZ28uVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGtleSBsZW5ndGggaXMgdmFsaWQgKDY0LCAxMjggb3IgPj0gMTkyIGJpdClcblx0ICAgICAgICAgICAgaWYgKGtleVdvcmRzLmxlbmd0aCAhPT0gMiAmJiBrZXlXb3Jkcy5sZW5ndGggIT09IDQgJiYga2V5V29yZHMubGVuZ3RoIDwgNikge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGtleSBsZW5ndGggLSAzREVTIHJlcXVpcmVzIHRoZSBrZXkgbGVuZ3RoIHRvIGJlIDY0LCAxMjgsIDE5MiBvciA+MTkyLicpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gRXh0ZW5kIHRoZSBrZXkgYWNjb3JkaW5nIHRvIHRoZSBrZXlpbmcgb3B0aW9ucyBkZWZpbmVkIGluIDNERVMgc3RhbmRhcmRcblx0ICAgICAgICAgICAgdmFyIGtleTEgPSBrZXlXb3Jkcy5zbGljZSgwLCAyKTtcblx0ICAgICAgICAgICAgdmFyIGtleTIgPSBrZXlXb3Jkcy5sZW5ndGggPCA0ID8ga2V5V29yZHMuc2xpY2UoMCwgMikgOiBrZXlXb3Jkcy5zbGljZSgyLCA0KTtcblx0ICAgICAgICAgICAgdmFyIGtleTMgPSBrZXlXb3Jkcy5sZW5ndGggPCA2ID8ga2V5V29yZHMuc2xpY2UoMCwgMikgOiBrZXlXb3Jkcy5zbGljZSg0LCA2KTtcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgREVTIGluc3RhbmNlc1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleTEpKTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMiA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXkyKSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5MykpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMS5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMi5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMy5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczIuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDE5Mi8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBibG9ja1NpemU6IDY0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihUcmlwbGVERVMpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlRyaXBsZURFUztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzQgPSBDX2FsZ28uUkM0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpZ0J5dGVzID0ga2V5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgc2JveFxuXHQgICAgICAgICAgICB2YXIgUyA9IHRoaXMuX1MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IGk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBLZXkgc2V0dXBcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlSW5kZXggPSBpICUga2V5U2lnQnl0ZXM7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5Qnl0ZSA9IChrZXlXb3Jkc1trZXlCeXRlSW5kZXggPj4+IDJdID4+PiAoMjQgLSAoa2V5Qnl0ZUluZGV4ICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICBqID0gKGogKyBTW2ldICsga2V5Qnl0ZSkgJSAyNTY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgICAgIFNbaV0gPSBTW2pdO1xuXHQgICAgICAgICAgICAgICAgU1tqXSA9IHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudGVyc1xuXHQgICAgICAgICAgICB0aGlzLl9pID0gdGhpcy5faiA9IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICBNW29mZnNldF0gXj0gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtV29yZCgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgUyA9IHRoaXMuX1M7XG5cdCAgICAgICAgdmFyIGkgPSB0aGlzLl9pO1xuXHQgICAgICAgIHZhciBqID0gdGhpcy5fajtcblxuXHQgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbSB3b3JkXG5cdCAgICAgICAgdmFyIGtleXN0cmVhbVdvcmQgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgNDsgbisrKSB7XG5cdCAgICAgICAgICAgIGkgPSAoaSArIDEpICUgMjU2O1xuXHQgICAgICAgICAgICBqID0gKGogKyBTW2ldKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgIFNbal0gPSB0O1xuXG5cdCAgICAgICAgICAgIGtleXN0cmVhbVdvcmQgfD0gU1soU1tpXSArIFNbal0pICUgMjU2XSA8PCAoMjQgLSBuICogOCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVXBkYXRlIGNvdW50ZXJzXG5cdCAgICAgICAgdGhpcy5faSA9IGk7XG5cdCAgICAgICAgdGhpcy5faiA9IGo7XG5cblx0ICAgICAgICByZXR1cm4ga2V5c3RyZWFtV29yZDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzQuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SQzQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNb2RpZmllZCBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzREcm9wID0gQ19hbGdvLlJDNERyb3AgPSBSQzQuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZHJvcCBUaGUgbnVtYmVyIG9mIGtleXN0cmVhbSB3b3JkcyB0byBkcm9wLiBEZWZhdWx0IDE5MlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogUkM0LmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBkcm9wOiAxOTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIFJDNC5fZG9SZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIERyb3Bcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2ZnLmRyb3A7IGkgPiAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtV29yZC5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0RHJvcC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNERyb3AuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0RHJvcCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNERyb3ApO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJDNDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0c1xuXHQgICAgdmFyIFMgID0gW107XG5cdCAgICB2YXIgQ18gPSBbXTtcblx0ICAgIHZhciBHICA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobVxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0ID0gQ19hbGdvLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIEtbaV0gPSAoKChLW2ldIDw8IDgpICB8IChLW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKEtbaV0gPDwgMjQpIHwgKEtbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWCA9IFtcblx0ICAgICAgICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1syXSwgKEtbMV0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFtcblx0ICAgICAgICAgICAgICAgIChLWzJdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksIChLWzBdICYgMHhmZmZmMDAwMCkgfCAoS1sxXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzFdIDw8IDE2KSB8IChLWzFdID4+PiAxNiksIChLWzNdICYgMHhmZmZmMDAwMCkgfCAoS1swXSAmIDB4MDAwMGZmZmYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gQ2FycnkgYml0XG5cdCAgICAgICAgICAgIHRoaXMuX2IgPSAwO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIENbaV0gXj0gWFsoaSArIDQpICYgN107XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJViBzZXR1cFxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBzdWJ2ZWN0b3JzXG5cdCAgICAgICAgICAgICAgICB2YXIgaTAgPSAoKChJVl8wIDw8IDgpIHwgKElWXzAgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzAgPDwgMjQpIHwgKElWXzAgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTMgPSAoaTIgPDwgMTYpICB8IChpMCAmIDB4MDAwMGZmZmYpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBNb2RpZnkgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgICAgIENbMF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzFdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1syXSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbM10gXj0gaTM7XG5cdCAgICAgICAgICAgICAgICBDWzRdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1s1XSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbNl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzddIF49IGkzO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbVxuXHQgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3Jkc1xuXHQgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSAgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBuZXh0U3RhdGUoKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXHQgICAgICAgIHZhciBDID0gdGhpcy5fQztcblxuXHQgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgQ19baV0gPSBDW2ldO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwO1xuXHQgICAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbMl0gPSAoQ1syXSArIDB4MzRkMzRkMzQgKyAoKENbMV0gPj4+IDApIDwgKENfWzFdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNV0gPSAoQ1s1XSArIDB4MzRkMzRkMzQgKyAoKENbNF0gPj4+IDApIDwgKENfWzRdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIHRoaXMuX2IgPSAoQ1s3XSA+Pj4gMCkgPCAoQ19bN10gPj4+IDApID8gMSA6IDA7XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV07XG5cblx0ICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7XG5cdCAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjtcblxuXHQgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSAoKCgoZ2EgKiBnYSkgPj4+IDE3KSArIGdhICogZ2IpID4+PiAxNSkgKyBnYiAqIGdiO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSAoKChneCAmIDB4ZmZmZjAwMDApICogZ3gpIHwgMCkgKyAoKChneCAmIDB4MDAwMGZmZmYpICogZ3gpIHwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSGlnaCBYT1IgbG93XG5cdCAgICAgICAgICAgIEdbaV0gPSBnaCBeIGdsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwO1xuXHQgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDtcblx0ICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7XG5cdCAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXQpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJhYmJpdDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0c1xuXHQgICAgdmFyIFMgID0gW107XG5cdCAgICB2YXIgQ18gPSBbXTtcblx0ICAgIHZhciBHICA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGlzIGlzIGEgbGVnYWN5IHZlcnNpb24gdGhhdCBuZWdsZWN0ZWQgdG8gY29udmVydCB0aGUga2V5IHRvIGxpdHRsZS1lbmRpYW4uXG5cdCAgICAgKiBUaGlzIGVycm9yIGRvZXNuJ3QgYWZmZWN0IHRoZSBjaXBoZXIncyBzZWN1cml0eSxcblx0ICAgICAqIGJ1dCBpdCBkb2VzIGFmZmVjdCBpdHMgY29tcGF0aWJpbGl0eSB3aXRoIG90aGVyIGltcGxlbWVudGF0aW9ucy5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJhYmJpdExlZ2FjeSA9IENfYWxnby5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWCA9IFtcblx0ICAgICAgICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1syXSwgKEtbMV0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFtcblx0ICAgICAgICAgICAgICAgIChLWzJdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksIChLWzBdICYgMHhmZmZmMDAwMCkgfCAoS1sxXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzFdIDw8IDE2KSB8IChLWzFdID4+PiAxNiksIChLWzNdICYgMHhmZmZmMDAwMCkgfCAoS1swXSAmIDB4MDAwMGZmZmYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gQ2FycnkgYml0XG5cdCAgICAgICAgICAgIHRoaXMuX2IgPSAwO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIENbaV0gXj0gWFsoaSArIDQpICYgN107XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJViBzZXR1cFxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBzdWJ2ZWN0b3JzXG5cdCAgICAgICAgICAgICAgICB2YXIgaTAgPSAoKChJVl8wIDw8IDgpIHwgKElWXzAgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzAgPDwgMjQpIHwgKElWXzAgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTMgPSAoaTIgPDwgMTYpICB8IChpMCAmIDB4MDAwMGZmZmYpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBNb2RpZnkgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgICAgIENbMF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzFdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1syXSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbM10gXj0gaTM7XG5cdCAgICAgICAgICAgICAgICBDWzRdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1s1XSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbNl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzddIF49IGkzO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbVxuXHQgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3Jkc1xuXHQgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSAgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBuZXh0U3RhdGUoKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXHQgICAgICAgIHZhciBDID0gdGhpcy5fQztcblxuXHQgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgQ19baV0gPSBDW2ldO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwO1xuXHQgICAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbMl0gPSAoQ1syXSArIDB4MzRkMzRkMzQgKyAoKENbMV0gPj4+IDApIDwgKENfWzFdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNV0gPSAoQ1s1XSArIDB4MzRkMzRkMzQgKyAoKENbNF0gPj4+IDApIDwgKENfWzRdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIHRoaXMuX2IgPSAoQ1s3XSA+Pj4gMCkgPCAoQ19bN10gPj4+IDApID8gMSA6IDA7XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV07XG5cblx0ICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7XG5cdCAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjtcblxuXHQgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSAoKCgoZ2EgKiBnYSkgPj4+IDE3KSArIGdhICogZ2IpID4+PiAxNSkgKyBnYiAqIGdiO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSAoKChneCAmIDB4ZmZmZjAwMDApICogZ3gpIHwgMCkgKyAoKChneCAmIDB4MDAwMGZmZmYpICogZ3gpIHwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSGlnaCBYT1IgbG93XG5cdCAgICAgICAgICAgIEdbaV0gPSBnaCBeIGdsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwO1xuXHQgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDtcblx0ICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7XG5cdCAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXRMZWdhY3kpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJhYmJpdExlZ2FjeTtcblxufSkpOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG5cbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ10gLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImNvbnN0IFN0b3JhZ2UgPSB7XG4gIEFDQ0VTU19UT0tFTjogJ2FjY2Vzc1Rva2VuJyxcbiAgUkVGUkVTSF9UT0tFTjogJ3JlZnJlc2hUb2tlbicsXG4gIFVTRVI6ICd1c2VyJyxcbiAgQUNDRVNTX1RPS0VOX1BBWUxPQUQ6ICdhY2Nlc3NUb2tlblBheWxvYWQnLFxuICBMQVNUX0NPTk5FQ1RJT046ICdsYXN0UHJvdmlkZXJDb25uZWN0aW9uJyxcbiAgU1RBVEVfS0VZOiAnc3RhdGVLZXknLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZTtcbiIsIi8qKlxuICogQGNvbnN0YW50IHtTdHJpbmdbXX0gU0NPUEVTX1BBRFJBTyBEZWZhdWx0IHNjb3BlcyBsaXN0IHRvIHJlcXVlc3QgZnJvbSBBdXRoMC5cbiAqL1xuY29uc3QgU0NPUEVTID0gW1xuICAnb3BlbmlkJyxcbiAgJ3Byb2ZpbGUnLFxuICAncGljdHVyZScsXG4gICduYW1lJyxcbiAgJ2VtYWlsJyxcbiAgJ29mZmxpbmVfYWNjZXNzJyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IFNDT1BFUztcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgU2ltcGxlQ3J5cHRvIGZyb20gJ3NpbXBsZS1jcnlwdG8tanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJ2p3dGlueSc7XG5pbXBvcnQge1xuICBhZGRNaW51dGVzLCBmcm9tVW5peFRpbWUsIHN1Yk1pbnV0ZXMsIGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcywgZm9ybWF0RGlzdGFuY2UsXG59IGZyb20gJ2RhdGUtZm5zJztcblxuaW1wb3J0IFNUT1JBR0VfS0VZUyBmcm9tICcuL3N0b3JhZ2Uta2V5cyc7XG5pbXBvcnQgREVGQVVMVF9TQ09QRVMgZnJvbSAnLi9zY29wZXMnO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIF9nZXRUb2tlbkJ5QXV0aENvZGUoY29kZSwgYXV0aENvZGVVcmwpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhdXRoQ29kZVVybCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgY29kZSB9KSxcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyByZXNwb25zZTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBfZ2V0VG9rZW5CeVJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4sIHJlZnJlc2hUb2tlblVybCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlZnJlc2hUb2tlblVybCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcmVmcmVzaFRva2VuIH0pLFxuICB9KTtcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IHJlc3BvbnNlO1xuICB9XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlYnVnKGZsYWcsIHRoaW5nLCB7XG4gIG1ldGhvZCA9ICdsb2cnLFxuICBkZWJ1Z2dnZXIgPSBjb25zb2xlLFxufSA9IHt9KSB7XG4gIGlmIChmbGFnKSB7XG4gICAgZGVidWdnZ2VyW21ldGhvZF0odGhpbmcpO1xuICB9XG59XG5cbmNsYXNzIEF1dGgwU2VydmljZSB7XG4gIC8qKlxuICAgKkNyaWEgdW1hIGluc3TDom5jaWEgZGEgQXV0aDBTZXJ2aWNlLlxuICAgKiBAcGFyYW0ge1N0b3JhZ2U/fSBzdG9yYWdlIFN0b3JhZ2UgYSBzZXIgdXRpbGl6YWRvIG5hcyBvcGVyYcOnw7VlcyBkZXNzZSBzZXJ2acOnbyAoY2FzbyBudWxvLCBzZXLDoSB1c2FkbyBvIGxvY2FsU3RvcmFnZSBjb21vIHBhZHLDo28pLlxuICAgKiBAcGFyYW0ge09iamVjdD99IG9wY29lcyB7XG4gICAqICAgICBhdXRoQ29kZVVybCxcbiAgICogICAgIHJlZnJlc2hUb2tlblVybCxcbiAgICogICAgIGNsaWVudElkLFxuICAgKiAgICAgYXV0aDB1cmwsXG4gICAqICAgfVxuICAgKiBAcGFyYW0ge3N0cmluZz99IG9wY29lcy5hdXRoQ29kZVVybCBVUkwgZGEgQVBJIGRlIGxvZ2luIChOT0FMVk8pIHBhcmEgb2J0ZXIgdW0gYWNjZXNzX3Rva2VuIGF0cmF2w6lzIGRlIHVtIGF1dGhvcml6YXRpb25fY29kZS4gQ2FzbyBudWxvLCBzZXLDoSB1dGlsaXphZGEgYSB2YXJpw6F2ZWwgZGUgYW1iaWVudGUgXCJWVUVfQVBQX0FVVEhfQ09ERV9VUkxcIi5cbiAgICogQHBhcmFtIHtzdHJpbmc/fSBvcGNvZXMucmVmcmVzaFRva2VuVXJsIFVSTCBkYSBBUEkgZGUgbG9naW4gKE5PQUxWTykgcGFyYSBvYnRlciB1bSBhY2Nlc3NfdG9rZW4gYXRyYXbDqXMgZGUgdW0gcmVmcmVzaF90b2tlbi4gQ2FzbyBudWxvLCBzZXLDoSB1dGlsaXphZGEgYSB2YXJpw6F2ZWwgZGUgYW1iaWVudGUgXCJWVUVfQVBQX0FVVEhfUkVGUkVTSF9VUkxcIi5cbiAgICogQHBhcmFtIHtzdHJpbmc/fSBvcGNvZXMuY2xpZW50SWQgQ2xpZW50SUQgZGEgYXBsaWNhw6fDo28gbm8gQXV0aDAuIENhc28gbnVsbywgc2Vyw6EgdXRpbGl6YWRhIGEgdmFyacOhdmVsIGRlIGFtYmllbnRlIFwiVlVFX0FQUF9BVVRIMF9DTElFTlRfSURcIi5cbiAgICogQHBhcmFtIHtzdHJpbmc/fSBvcGNvZXMuYXV0aDB1cmwgVVJMIGRhIEFQSSBkbyB0ZW5hbnQgZGEgTk9BTFZPIG5vIEF1dGgwLiBDYXNvIG51bG8sIHNlcsOhIHV0aWxpemFkYSBhIHZhcmnDoXZlbCBkZSBhbWJpZW50ZSBcIlZVRV9BUFBfQVVUSDBfVVJMXCIuXG4gICAqIEBtZW1iZXJvZiBBdXRoMFNlcnZpY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZSxcbiAgICBhdXRoQ29kZVVybCxcbiAgICByZWZyZXNoVG9rZW5VcmwsXG4gICAgY2xpZW50SWQsXG4gICAgYXV0aDB1cmwsXG4gICAgYXVkaWVuY2UsXG4gICAgcmVuZXdUaW1lciA9IDUwMDAsXG4gICAgc3RvcmFnZUtleXMgPSBTVE9SQUdFX0tFWVMsXG4gICAgZGVidWcsXG4gIH0gPSB7fSkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgdGhpcy5hdXRoQ29kZVVybCA9IGF1dGhDb2RlVXJsO1xuICAgIHRoaXMucmVmcmVzaFRva2VuVXJsID0gcmVmcmVzaFRva2VuVXJsO1xuICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICB0aGlzLmF1dGgwdXJsID0gYXV0aDB1cmw7XG4gICAgdGhpcy5hdWRpZW5jZSA9IGF1ZGllbmNlO1xuICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgICB0aGlzLnJlbmV3VGltZXIgPSByZW5ld1RpbWVyO1xuICAgIHRoaXMuc3RvcmFnZUtleXMgPSBzdG9yYWdlS2V5cztcbiAgfVxuXG4gIC8vI3JlZ2lvbiBTVE9SQUdFIFBST1BFUlRJRVNcbiAgLyoqXG4gICAqIEFjY2VzcyB0b2tlbiBncmF2YWRvIG5vIHN0b3JhZ2UuXG4gICAqIEByZWFkb25seVxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBnZXQgYWNjZXNzVG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZVt0aGlzLnN0b3JhZ2VLZXlzLkFDQ0VTU19UT0tFTl07XG4gIH1cblxuICAvKipcbiAgICogUGF5bG9hZCBkbyBhY2Nlc3MgdG9rZW4gKEpXVCkgZ3JhdmFkbyBubyBzdG9yYWdlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgZ2V0IGFjY2Vzc1Rva2VuUGF5bG9hZCgpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnN0b3JhZ2VbdGhpcy5zdG9yYWdlS2V5cy5BQ0NFU1NfVE9LRU5fUEFZTE9BRF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZm9ybWHDp8O1ZXMgZGUgaWRlbnRpZGFkZSBkbyB1c3XDoXJpbyBncmF2YWRhcyBubyBzdG9yYWdlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgZ2V0IHVzZXIoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5zdG9yYWdlW3RoaXMuc3RvcmFnZUtleXMuVVNFUl0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggdG9rZW4gZ3JhdmFkbyBubyBzdG9yYWdlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgZ2V0IHJlZnJlc2hUb2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlW3RoaXMuc3RvcmFnZUtleXMuUkVGUkVTSF9UT0tFTl07XG4gIH1cblxuICAvKipcbiAgICogQ2hhdmUgY3JpcHRvZ3LDoWZpY2EgcGFyYSBvIG9iamV0byBkZSBzdGF0ZSwgZ3JhdmFkYSBubyBzdG9yYWdlIG91IHVtYSBub3ZhIGNhc28gbsOjbyB0ZW5oYSBzaWRvIGdyYXZhZGEuXG4gICAqIEByZWFkb25seVxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBnZXQgc3RhdGVLZXkoKSB7XG4gICAgLy8gbWFudGl2ZSBvIGdldEl0ZW0gZSBvIHNldEl0ZW0gdW1hIHZleiBxdWUgZXNzYSBwcm9wcmllZGFkZSBmb2kgY3JpYWFkYSBwYXJhIHNlciB1c2FkYVxuICAgIC8vIGFwZW5hcyBwYXJhIG8gc3RvcmFnZSBxdWUgaW5pY2lhbGl6YSBvIGZsdXhvIGRlIGNhcnJlZ2FtZW50byBkbyBBdXRoMFxuICAgIGxldCBzdGF0ZUtleSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmFnZUtleXMuU1RBVEVfS0VZKTtcbiAgICBpZiAoIXN0YXRlS2V5KSB7XG4gICAgICBzdGF0ZUtleSA9IGJ0b2EoRGF0ZS5ub3coKSk7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXlzLlNUQVRFX0tFWSwgc3RhdGVLZXkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGVLZXk7XG4gIH1cblxuICAvKipcbiAgICogw5psdGltbyBwcm92aWRlciAoSURQKSBxdWUgbyB1c3XDo3JpbyB1c291IHBhcmEgc2UgYXV0ZW50aWNhci5cbiAgICogQHJlYWRvbmx5XG4gICAqIEBtZW1iZXJvZiBBdXRoMFNlcnZpY2VcbiAgICovXG4gIGdldCBsYXN0UHJvdmlkZXJDb25uZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VbdGhpcy5zdG9yYWdlS2V5cy5MQVNUX0NPTk5FQ1RJT05dO1xuICB9XG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBTVE9SQUdFIE1FVEhPRFNcbiAgLyoqXG4gICAqIExpbXBhIGFzIGNoYXZlcyByZWxhY2lvbmFkYXMgYSBlc3NlIHNlcnZpw6dvIG5vIHN0b3JhZ2UgY29uZmlndXJhZG8uXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBjbGVhclN0b3JhZ2UoKSB7XG4gICAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5zdG9yYWdlS2V5cy5BQ0NFU1NfVE9LRU4pO1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuc3RvcmFnZUtleXMuQUNDRVNTX1RPS0VOX1BBWUxPQUQpO1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuc3RvcmFnZUtleXMuVVNFUik7XG4gICAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5zdG9yYWdlS2V5cy5MQVNUX0NPTk5FQ1RJT04pO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbHZhIGFzIGluZm9ybWHDp8O1ZXMgYXDDs3MgdW0gbG9nb24gbm8gc3RvcmFnZSBjb25maWd1cmFkby5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGluZm9zIHtcbiAgICogICAgIGFjY2Vzc1Rva2VuLFxuICAgKiAgICAgdXN1YXJpbyxcbiAgICogICAgIHJlZnJlc2hUb2tlbixcbiAgICogICB9XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpbmZvcy5hY2Nlc3NUb2tlbiBBY2Nlc3MgdG9rZW4gZW1pdGlkbyBwYXJhIG8gdXN1w6FyaW8gbG9nYWRvIG5vIHByb3RvY29sbyBKV1QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvcy51c3VhcmlvIE9iamV0byBjb20gYXMgaW5mb3JtYcOnw7VlcyBkZSBpZGVudGlkYWRlIGRvIHVzdcOhcmlvIGxvZ2FkbyByZXRvcm5hZGFzIHBlbGEgQVBJLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gaW5mb3MucmVmcmVzaFRva2VuIFJlZnJlc2ggdG9rZW4gZW1pdGlkbyBwYXJhIG8gdXN1w6FyaW8gbG9nYWRvIChvcGFxdWUpLlxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBzYXZlU3RvcmFnZSh7XG4gICAgYWNjZXNzVG9rZW4sXG4gICAgdXNlcixcbiAgICByZWZyZXNoVG9rZW4sXG4gIH0pIHtcbiAgICB0aGlzLmNsZWFyU3RvcmFnZSgpO1xuXG4gICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXlzLkFDQ0VTU19UT0tFTiwgYWNjZXNzVG9rZW4pO1xuICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIHRoaXMuc3RvcmFnZUtleXMuQUNDRVNTX1RPS0VOX1BBWUxPQUQsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHV0aWxzLnBhcnNlSnd0KGFjY2Vzc1Rva2VuKSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh1c2VyKSB7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXlzLlVTRVIsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMuc3RvcmFnZUtleXMuTEFTVF9DT05ORUNUSU9OLCB1c2VyLnByb3ZpZGVyKTtcbiAgICB9XG5cbiAgICBpZiAocmVmcmVzaFRva2VuKSB7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXlzLlJFRlJFU0hfVE9LRU4sIHJlZnJlc2hUb2tlbik7XG4gICAgfVxuICB9XG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBUT0tFTiBNRVRIT0RTXG4gIC8qKlxuICAgKiBPYnTDqW0gdW0gbm92byB0b2tlbiBuYSBBUEkgZGUgbG9naW4gKE5PQUxWTyksIGF0cmF2w6lzIGRlIHVtIGF1dGhvcml6YXRpb25fY29kZSBvdSB1bSByZWZyZXNoX3Rva2VuLlxuICAgKlxuICAgKiBAYXN5bmNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wY29lcyB7IGNvZGUsIHJlZnJlc2hUb2tlbiB9XG4gICAqIEBwYXJhbSB7U3RyaW5nP30gb3Bjb2VzLmNvZGUgQXV0aG9yaXphdGlvbiBDb2RlIGVtaXRpZG8gcGFyYSBvIHVzdcOhcmlvLlxuICAgKiBAcGFyYW0ge1N0cmluZz99IG9wY29lcy5yZWZyZXNoVG9rZW4gUmVmcmVzaCBUb2tlbiAob3BhcXVlKSBlbWl0aWRvIHBhcmEgbyB1c3XDoXJpby5cbiAgICogQHJldHVybnMge1Byb21pc2U8e1xuICAgKiAgYWNjZXNzVG9rZW46IFN0cmluZyxcbiAgICogIGV4cGlyYWNhbzogTnVtYmVyLFxuICAgKiAgcmVmcmVzaFRva2VuOiBTdHJpbmcsXG4gICAqICB1c3VhcmlvOiB7XG4gICAqICAgIG5vbWU6IFN0cmluZyxcbiAgICogICAgZW1haWw6IFN0cmluZyxcbiAgICogICAgaW1hZ2VtOiBTdHJpbmc/LFxuICAgKiAgICBwcm92aWRlcjogU3RyaW5nXG4gICAqICB9P1xuICAgKiB9Pn0gTm92byBhY2Nlc3NfdG9rZW4gZW1pdGlkbyBwYXJhIG8gdXN1w6FyaW8sIGp1bnRhbWVudGUgY29tIHN1YXMgaW5mb3JtYcOnw7VlcyBkZSBpZGVudGlkYWRlLlxuICAgKiBAdGhyb3dzIHtSZXNwb25zZX0gT2JqZXRvIGRlIHJlc3Bvc3RhIEhUVFAgY2FzbyBvIGFjY2Vzc190b2tlbiBuw6NvIHRlbmhhIHNpZG8gZW1pdGlkby5cbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgYXN5bmMgZ2V0TmV3VG9rZW4oeyBjb2RlLCByZWZyZXNoVG9rZW4gfSkge1xuICAgIGlmIChjb2RlKSB7XG4gICAgICByZXR1cm4gX2dldFRva2VuQnlBdXRoQ29kZShjb2RlLCB0aGlzLmF1dGhDb2RlVXJsKTtcbiAgICB9XG4gICAgaWYgKHJlZnJlc2hUb2tlbikge1xuICAgICAgcmV0dXJuIF9nZXRUb2tlbkJ5UmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbiwgdGhpcy5yZWZyZXNoVG9rZW5VcmwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5vdmEgbyBhY2Nlc3NfdG9rZW4gZG8gdXN1w6FyaW8gYXRyYXbDqXMgZG8gcmVmcmVzaF90b2tlbiBncmF2YWRvIG5vIHN0b3JhZ2UuXG4gICAqXG4gICAqIEBhc3luY1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbm8gaW5kaWNhbmRvIHNlIGZvaSBlbWl0aWRvIHVtIG5vdm8gdG9rZW4gY29tIHN1Y2Vzc28uXG4gICAqIEBtZW1iZXJvZiBBdXRoMFNlcnZpY2VcbiAgICovXG4gIGFzeW5jIHJlbmV3VG9rZW4oKSB7XG4gICAgbGV0IHdvcmtlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IHRoaXMucmVmcmVzaFRva2VuO1xuICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0TmV3VG9rZW4oeyByZWZyZXNoVG9rZW4gfSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgdGhpcy5zYXZlU3RvcmFnZShyZXN1bHQpO1xuICAgICAgICAgIHdvcmtlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy9cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdvcmtlZDtcbiAgfVxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gU1RBVEUgTUVUSE9EU1xuICAvKipcbiAgICogR2VyYSB1bSBwYXLDom1ldHJvIGRlIHN0YXRlIGNyaXB0b2dyYWZhZG8gcGFyYSB1c28gbmEgVVJMIGRlIGF1dG9yaXphw6fDo28gZG8gQXV0aDAsIHV0aWxpemFuZG8gY29tbyBjaGF2ZSBjcmlwdG9ncsOhZmljYSBhIHByb3ByaWVkYWRlIGBzdGF0ZUtleWAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpldG8gT2JqZXRvIGEgc2VyIGNyaXB0b2dyYWZhZG8uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IE9iamV0byBjcmlwdG9ncmFmYWRvLlxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBnZW5lcmF0ZVN0YXRlKG9iamV0bykge1xuICAgIGNvbnN0IHNpbXBsZUNyeXB0byA9IG5ldyBTaW1wbGVDcnlwdG8odGhpcy5zdGF0ZUtleSk7XG4gICAgcmV0dXJuIHNpbXBsZUNyeXB0by5lbmNyeXB0KG9iamV0byk7XG4gIH1cblxuICAvKipcbiAgICogRGVjcmlwdGEgdW0gb2JqZXRvIGRlIHN0YXRlIHV0aWxpemFkbyBubyBmbHV4byBkZSBhdXRvcml6YcOnw6NvIGRvIEF1dGgwLCB1dGlsaXphbmRvIGNvbW8gY2hhdmUgY3JpcHRvZ3LDoWZpY2EgYSBwcm9wcmllZGFkZSBgc3RhdGVLZXlgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZW5jcnlwdGVkIE9iamV0byBjcmlwdG9ncmFmYWRvIHBvciBlc3NlIHNlcnZpw6dvLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBPYmpldG8gZGUgc3RhdGUgZGVjcmlwdGFkby5cbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgcGFyc2VTdGF0ZShlbmNyeXB0ZWQpIHtcbiAgICBjb25zdCBzaW1wbGVDcnlwdG8gPSBuZXcgU2ltcGxlQ3J5cHRvKHRoaXMuc3RhdGVLZXkpO1xuICAgIGNvbnN0IHN0YXRlID0gc2ltcGxlQ3J5cHRvLmRlY3J5cHQoZW5jcnlwdGVkLCB0cnVlKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbiAgLy8jZW5kcmVnaW9uXG5cbiAgLyoqXG4gICAqIEdlcmEgdW0gbGluayBkZSBsb2dpbiBubyBlbmRwb2ludCAvYXV0aG9yaXplIGRvIEF1dGgwLCBiYXNlYWRvIGVtIGFsZ3VucyBwYXLDom1ldHJvcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wY29lcyBbe1xuICAgKiAgICAgcmVkaXJlY3QsXG4gICAqICAgICBwcm92aWRlcixcbiAgICogICAgIGF1ZGllbmNlID0gJ25vYWx2bzphcGknLFxuICAgKiAgICAgc2NvcGVzID0gU0NPUEVTX1BBRFJBTyxcbiAgICogICAgIGFjY2Vzc1R5cGUgPSAnb2ZmbGluZScsXG4gICAqICAgfT17fV1cbiAgICogQHBhcmFtIHtTdHJpbmc/fSBvcGNvZXMucmVkaXJlY3QgVVJMIGRlIHJlZGlyZWNpb25hbWVudG8gYXDDs3MgbyBmbHV4byBkZSBsb2dpbi5cbiAgICogQHBhcmFtIHtTdHJpbmc/fSBvcGNvZXMucHJvdmlkZXIgUHJvdmlkZXIgKElEUCkgYSBzZXIgdXRpbGl6YWRvIHBhcmEgYXV0ZW50aWNhw6fDo28uIENhc28gbsOjbyBlc3BlY2lmaWNhZG8sIHNlcsOhIHV0aWl6YWRvIG8gw7p0bGltbyBwcm92aWRlciB1c2FkbyBwZWxvIHVzdcOhcmlvIHF1ZSBlc3TDoSBncmF2YWRvIG5vIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nPz0nbm9hbHZvOmFwaSd9IG9wY29lcy5hdWRpZW5jZSBBdWRpZW5jZSBhIHNlciBhdXRlbnRpY2FkYSBubyBBdXRoMC5cbiAgICogQHBhcmFtIHtTdHJpbmdbXT99IG9wY29lcy5zY29wZXMgU2NvcGVzIHBhZHLDo28gYSBhdXRlbnRpY2FyIHBhcmEgbyB1c3XDoXJpby4gQ2FzbyBuw6NvIGVzcGVjaWZpY2Fkbywgc2Vyw6EgdXRpbGl6YWRhIGEgY29uc3RhbnRlIGBzY29wZXNgIGRvIHBhY290ZSBgQG5vYWx2by1saWJzL2F1dGgwLWNvcmVgLlxuICAgKiBAcGFyYW0ge1N0cmluZz89J29mZmxpbmUnfSBvcGNvZXMuYWNjZXNzVHlwZSBBY2Nlc3MgdHlwZSBhIHNlciBwYXNzYWRvIHBhcmEgbyBBdXRoMC5cbiAgICogQHJldHVybnMge1N0cmluZ30gTGluayBkZSBsb2dpbiBkbyBlbmRwb2ludCAvYXV0aG9yaXplIGRvIEF1dGgwLlxuICAgKiBAbWVtYmVyb2YgQXV0aDBTZXJ2aWNlXG4gICAqL1xuICBnZXRMb2dpbkxpbmsoe1xuICAgIHJlZGlyZWN0LFxuICAgIHByb3ZpZGVyLFxuICAgIGF1ZGllbmNlLFxuICAgIHNjb3BlcyA9IERFRkFVTFRfU0NPUEVTLFxuICAgIGFjY2Vzc1R5cGUgPSAnb2ZmbGluZScsXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IHsgY2xpZW50SWQsIGF1dGgwdXJsIH0gPSB0aGlzO1xuXG4gICAgaWYgKCFhdWRpZW5jZSkgYXVkaWVuY2UgPSB0aGlzLmF1ZGllbmNlO1xuXG4gICAgY29uc3QgcmVkaXJlY3RVcmkgPSBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fS9sb2dpbmA7XG4gICAgY29uc3QgY29kZVVybCA9ICcvYXV0aG9yaXplP3Jlc3BvbnNlX3R5cGU9Y29kZSc7XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2VuZXJhdGVTdGF0ZShyZWRpcmVjdCA/IHsgcmVkaXJlY3QgfSA6IHsgdHM6IGJ0b2EoRGF0ZS5ub3coKSkgfSk7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHByb3ZpZGVyIHx8IHRoaXMubGFzdFByb3ZpZGVyQ29ubmVjdGlvbjtcblxuICAgIGNvbnN0IGxpbmtQYXJhbXMgPSBgJmNsaWVudF9pZD0ke2NsaWVudElkfSZyZWRpcmVjdF91cmk9JHtyZWRpcmVjdFVyaX0mc3RhdGU9JHtzdGF0ZX1gO1xuICAgIGxldCBsaW5rID0gYCR7YXV0aDB1cmx9JHtjb2RlVXJsfSR7bGlua1BhcmFtc31gO1xuXG4gICAgaWYgKHNjb3Blcykge1xuICAgICAgbGluayArPSBgJnNjb3BlPSR7QXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzLmpvaW4oJyUyMCcpIDogc2NvcGVzfWA7XG4gICAgfVxuXG4gICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgIGxpbmsgKz0gYCZjb25uZWN0aW9uPSR7Y29ubmVjdGlvbn1gO1xuICAgIH1cblxuICAgIGlmIChhdWRpZW5jZSkge1xuICAgICAgbGluayArPSBgJmF1ZGllbmNlPSR7YXVkaWVuY2V9YDtcbiAgICB9XG5cbiAgICBpZiAoYWNjZXNzVHlwZSkge1xuICAgICAgbGluayArPSBgJmFjY2Vzc190eXBlPSR7YWNjZXNzVHlwZX0mYXBwcm92YWxfcHJvbXB0PWZvcmNlYDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmEgZSBpbmljaWFsaXphIHVtIHRpbWVyIGRlIHJlbm92YcOnw6NvIGRlIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlByb2dyZXNzIENhbGxiYWNrIGRlIHByb2dyZXNzbyBkdXJhbnRlIGEgcmVub3Zhw6fDo28gZG8gdG9rZW4uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiU3VjY2VzcyBDYWxsYmFjayBkZSBzdWNlc3NvIGFww7NzIG8gdG9rZW4gcmVub3ZhZG8uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiRXJyb3IgQ2FsbGJhY2sgZGUgZXJybyBjYXNvIG8gdG9rZW4gbsOjbyB0ZW5oYSBzaWRvIHJlbm92YWRvLlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBQb250ZWlybyBkZSB0aW1lb3V0XG4gICAqIEBtZW1iZXJvZiBBdXRoMFNlcnZpY2VcbiAgICovXG4gIHNldFJlbmV3VGltZXIoY2JQcm9ncmVzcywgY2JTdWNjZXNzLCBjYkVycm9yKSB7XG4gICAgY29uc3QgZml2ZU1pbiA9IGFkZE1pbnV0ZXMobmV3IERhdGUoKSwgNSk7XG4gICAgY29uc3QgZXhwID0gZnJvbVVuaXhUaW1lKHRoaXMuYWNjZXNzVG9rZW5QYXlsb2FkLmV4cCk7XG5cbiAgICBkZWJ1Zyh0aGlzLmRlYnVnLCBgZXhwOiAke2V4cH1gKTtcblxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGRlbGF5O1xuXG4gICAgaWYgKGV4cCA8IG5vdykge1xuICAgICAgZGVidWcodGhpcy5kZWJ1ZywgJ0RlbGF5ID0gYWdvcmEnKTtcbiAgICAgIGRlbGF5ID0gbm93O1xuICAgIH0gZWxzZSBpZiAoZXhwIDwgZml2ZU1pbikge1xuICAgICAgZGVidWcodGhpcy5kZWJ1ZywgJ0RlbGF5ID0gZXhwIC0gMSBtaW4nKTtcbiAgICAgIGRlbGF5ID0gc3ViTWludXRlcyhleHAsIDEpO1xuICAgICAgaWYgKGRlbGF5IDw9IG5vdykge1xuICAgICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnRXhwLTEgbWluIDwgYWdvcmEsIGRlbGF5ID0gYWdvcmEnKTtcbiAgICAgICAgZGVsYXkgPSBub3c7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKHRoaXMuZGVidWcsICdEZWxheSA9IDUgbWluJyk7XG4gICAgICBkZWxheSA9IGZpdmVNaW47XG4gICAgfVxuXG4gICAgZGVidWcodGhpcy5kZWJ1ZywgYFRpbWVyIGRlIHJlZnJlc2ggc2V0YWRvIHBhcmEgJHtkZWxheX0gKCR7Zm9ybWF0RGlzdGFuY2UoZGVsYXksIG5vdyl9KWApO1xuICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnVGVudGFuZG8gcmVub3ZhciBvIHRva2VuJyk7XG4gICAgICBhd2FpdCAoYXN5bmMgKCkgPT4gY2JQcm9ncmVzcygpKTtcbiAgICAgIGNvbnN0IHdvcmtlZCA9IGF3YWl0IHRoaXMucmVuZXdUb2tlbigpO1xuICAgICAgaWYgKHdvcmtlZCkge1xuICAgICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnQ2hhbWFuZG8gY2FsbGJhY2sgZGUgc3VjZXNzbycpO1xuICAgICAgICBhd2FpdCAoYXN5bmMgKCkgPT4gY2JTdWNjZXNzKCkpKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnQ2hhbWFuZG8gY2FsbGJhY2sgZGUgZXJybycpO1xuICAgICAgICBhd2FpdCAoYXN5bmMgKCkgPT4gY2JFcnJvcigpKSgpO1xuICAgICAgfVxuICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgfSwgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGRlbGF5LCBub3cpKTtcbiAgICByZXR1cm4gdGltZXI7XG4gIH1cblxuICAvKipcbiAgICogSW5pY2lhIG8gZmx1eG8gZGUgcmVub3Zhw6fDo28gYXV0b23DoXRpY2EgZGUgdG9rZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiUHJvZ3Jlc3MgQ2FsbGJhY2sgZGUgcHJvZ3Jlc3NvIGR1cmFudGUgYSByZW5vdmHDp8OjbyBkbyB0b2tlbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JTdWNjZXNzIENhbGxiYWNrIGRlIHN1Y2Vzc28gYXDDs3MgbyB0b2tlbiByZW5vdmFkby5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JFcnJvciBDYWxsYmFjayBkZSBlcnJvIGNhc28gbyB0b2tlbiBuw6NvIHRlbmhhIHNpZG8gcmVub3ZhZG8uXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIGluZGljYW5kbyBzZSBob3V2ZSBzdWNlc3NvIG91IGZhbGhhIGFvIGF1dGVudGljYXIgbyB1c3XDoXJpby5cbiAgICogQG1lbWJlcm9mIEF1dGgwU2VydmljZVxuICAgKi9cbiAgYXN5bmMgbG9hZGluZ0Zsb3coY2JQcm9ncmVzcywgY2JTdWNjZXNzLCBjYkVycm9yKSB7XG4gICAgLy8gc2UgdGVtIHRva2VuXG4gICAgaWYgKHRoaXMuYWNjZXNzVG9rZW5QYXlsb2FkKSB7XG4gICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnVXN1YXJpbyBsb2dhZG8sIHRlbSB0b2tlbicpO1xuICAgICAgLy8gc2UgbyB0b2tlbiBlc3RpdmVyIGV4cGlyYWRvLCB0ZW50YSByZW5vdmFyXG4gICAgICBpZiAodXRpbHMuaXNFeHBpcmVkKHRoaXMuYWNjZXNzVG9rZW5QYXlsb2FkKSkge1xuICAgICAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAndG9rZW4gZXhwaXJhZG8sIHRlbnRhbmRvIHJlbm92YXInKTtcbiAgICAgICAgY29uc3QgbmV3VG9rZW4gPSBhd2FpdCB0aGlzLnJlbmV3VG9rZW4oKTtcbiAgICAgICAgLy8gc2UgY29uc2VndWl1IHJlbm92YXIsIGFwbGljYSBvIGZsdXhvIHRlbXBvcml6YWRvIGRlIHJlZnJlc2hcbiAgICAgICAgaWYgKG5ld1Rva2VuKSB7XG4gICAgICAgICAgZGVidWcodGhpcy5kZWJ1ZywgJ3Rva2VuIHJlbm92YWRvLCBpbmljaWFuZG8gdGltZXInKTtcbiAgICAgICAgICB0aGlzLnNldFJlbmV3VGltZXIoY2JQcm9ncmVzcywgY2JTdWNjZXNzLCBjYkVycm9yKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZSBuw6NvIGNvbnNlZ3VpdSByZW5vdmFyLCBub3RpZmljYSBlcnJvXG4gICAgICAgIGRlYnVnKHRoaXMuZGVidWcsICduw6NvIGNvbnNlZ3VpdSByZW5vdmFyLCBub3RpZmljYXIgZXJybycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBzZSBuw6NvIGVzdGl2ZXIgZXhwaXJhZG8sIGFwbGljYSBvIGZsdXhvIHRlbXBvcml6YWRvIGRlIHJlZnJlc2hcbiAgICAgIGRlYnVnKHRoaXMuZGVidWcsICduw6NvIGV4cGlyb3UsIGluaWNpYW5kbyB0aW1lcicpO1xuICAgICAgdGhpcy5zZXRSZW5ld1RpbWVyKGNiUHJvZ3Jlc3MsIGNiU3VjY2VzcywgY2JFcnJvcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gc2UgbsOjbyB0ZW0gdG9rZW5cbiAgICBkZWJ1Zyh0aGlzLmRlYnVnLCAnbsOjbyB0ZW0gdG9rZW4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXV0aDBTZXJ2aWNlO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBBdXRoMFNlcnZpY2UgfSBmcm9tICcuL3NyYy9BdXRoMFNlcnZpY2UnO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNjb3BlcyB9IGZyb20gJy4vc3JjL3Njb3Blcyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFN0b3JhZ2VLZXlzIH0gZnJvbSAnLi9zcmMvc3RvcmFnZS1rZXlzJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRzIH0gZnJvbSAnLi9zcmMvZXZlbnRzJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ3Jvc3NTdG9yYWdlQ29tbWFuZHMgfSBmcm9tICcuL3NyYy9jcm9zcy1zdG9yYWdlLWNvbW1hbmRzJztcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRzID0geyBTY29wZXMsIFN0b3JhZ2VLZXlzLCBFdmVudHMsIENyb3NzU3RvcmFnZUNvbW1hbmRzIH07XG4iLCJjb25zdCBFdmVudHMgPSB7XG4gIEFDQ0VTU19SRU5FV0VEOiAnQVVUSF9BQ0NFU1NfUkVORVdFRCcsXG4gIEFDQ0VTU19SRU5FV0lORzogJ0FVVEhfQUNDRVNTX1JFTkVXSU5HJyxcbiAgQUNDRVNTX0RFTklFRDogJ0FVVEhfQUNDRVNTX0RFTklFRCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iLCJjb25zdCBDb21tYW5kcyA9IHtcbiAgQUNDRVNTX1RPS0VOOiAnQUNDRVNTX1RPS0VOJyxcbiAgQUNDRVNTX1RPS0VOX1BBWUxPQUQ6ICdBQ0NFU1NfVE9LRU5fUEFZTE9BRCcsXG4gIFVTRVI6ICdVU0VSJyxcbiAgUkVGUkVTSF9UT0tFTjogJ1JFRlJFU0hfVE9LRU4nLFxuICBTVEFURV9LRVk6ICdTVEFURV9LRVknLFxuICBMQVNUX0NPTk5FQ1RJT046ICdMQVNUX0NPTk5FQ1RJT04nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tbWFuZHM7XG4iLCJpbXBvcnQgeyBEZWZhdWx0cyB9IGZyb20gJ0BhdXRoMC1raXRzL2NsaWVudCc7XG5jb25zdCB7IENyb3NzU3RvcmFnZUNvbW1hbmRzIH0gPSBEZWZhdWx0cztcblxuY2xhc3MgQXV0aDBDbGllbnQge1xuICBjb25zdHJ1Y3RvcihzZW5kQ29tbWFuZEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5zZW5kQ29tbWFuZCA9IHNlbmRDb21tYW5kRnVuY3Rpb247XG4gIH1cblxuICBzdGF0aWMgZ2V0IFBST1ZJREVSKCkge1xuICAgIHJldHVybiAnQXV0aDAnO1xuICB9XG5cbiAgZ2V0IGFjY2Vzc1Rva2VuKCkge1xuICAgIHJldHVybiB0aGlzLnNlbmRDb21tYW5kKENyb3NzU3RvcmFnZUNvbW1hbmRzLkFDQ0VTU19UT0tFTik7XG4gIH1cblxuICBnZXQgYWNjZXNzVG9rZW5QYXlsb2FkKCkge1xuICAgIHJldHVybiB0aGlzLnNlbmRDb21tYW5kKENyb3NzU3RvcmFnZUNvbW1hbmRzLkFDQ0VTU19UT0tFTl9QQVlMT0FEKTtcbiAgfVxuXG4gIGdldCB1c2VyKCkge1xuICAgIHJldHVybiB0aGlzLnNlbmRDb21tYW5kKENyb3NzU3RvcmFnZUNvbW1hbmRzLlVTRVIpO1xuICB9XG5cbiAgZ2V0IHJlZnJlc2hUb2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kQ29tbWFuZChDcm9zc1N0b3JhZ2VDb21tYW5kcy5SRUZSRVNIX1RPS0VOKTtcbiAgfVxuXG4gIGdldCBzdGF0ZUtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kQ29tbWFuZChDcm9zc1N0b3JhZ2VDb21tYW5kcy5TVEFURV9LRVkpO1xuICB9XG5cbiAgZ2V0IGxhc3RQcm92aWRlckNvbm5lY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZENvbW1hbmQoQ3Jvc3NTdG9yYWdlQ29tbWFuZHMuTEFTVF9DT05ORUNUSU9OKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGgwQ2xpZW50O1xuIiwiaW1wb3J0IENyb3NzU3RvcmFnZSBmcm9tICdjcm9zcy1zdG9yYWdlLXBsdXMnO1xuaW1wb3J0IHsgRGVmYXVsdHMgfSBmcm9tICdAYXV0aDAta2l0cy9jbGllbnQnO1xuaW1wb3J0IEF1dGgwU3RvcmFnZVByb3ZpZGVyIGZyb20gJy4vQXV0aDBTdG9yYWdlUHJvdmlkZXInO1xuXG5jb25zdCB7IEV2ZW50cywgU3RvcmFnZUtleXMgfSA9IERlZmF1bHRzO1xuXG5leHBvcnQgY2xhc3MgWEF1dGhTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGxvZ2luQXBwVXJsLFxuICAgIG9uQXV0aFN1Y2Nlc3MsXG4gICAgb25BdXRoUHJvZ3Jlc3MsXG4gICAgb25BdXRoRXJyb3IsXG4gICAgeGF1dGhSb3V0ZSA9ICcveGF1dGgnLFxuICAgIGluamVjdFdpbmRvdyA9IHRydWUsXG4gICAgaXNJbml0aWFsaXplZCA9IGZhbHNlLFxuICAgIGluaXRpYWxpemVkU3RvcmFnZSA9IG51bGwsXG4gICAgY29weVRvU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UsXG4gICAgc3RvcmFnZUtleXMgPSBTdG9yYWdlS2V5c1xuICB9ID0ge30pIHtcbiAgICBpZiAoaXNJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5zdG9yYWdlID0gaW5pdGlhbGl6ZWRTdG9yYWdlIHx8IHdpbmRvdy54YXV0aDtcbiAgICB9XG5cbiAgICB0aGlzLnhhdXRoVXJsID0gYCR7bG9naW5BcHBVcmx9JHt4YXV0aFJvdXRlfWA7XG4gICAgdGhpcy5zdG9yYWdlID0gbnVsbDtcbiAgICB0aGlzLmluamVjdFdpbmRvdyA9IGluamVjdFdpbmRvdztcbiAgICB0aGlzLnN0b3JhZ2VLZXlzID0gc3RvcmFnZUtleXM7XG4gICAgdGhpcy5jb3B5VG9TdG9yYWdlID0gY29weVRvU3RvcmFnZTtcblxuICAgIHRoaXMub25BdXRoU3VjY2VzcyA9IG9uQXV0aFN1Y2Nlc3M7XG4gICAgdGhpcy5vbkF1dGhQcm9ncmVzcyA9IG9uQXV0aFByb2dyZXNzO1xuICAgIHRoaXMub25BdXRoRXJyb3IgPSBvbkF1dGhFcnJvcjtcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5zdG9yYWdlID0gYXdhaXQgQ3Jvc3NTdG9yYWdlLmluaXRpYWxpemVDbGllbnQodGhpcy54YXV0aFVybCwge1xuICAgICAgaWZyYW1lSWQ6ICd4YXV0aC1pZnJhbWUnLFxuICAgICAgaW5pdGlhbFByb3ZpZGVyOiBBdXRoMFN0b3JhZ2VQcm92aWRlclxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaW5qZWN0V2luZG93KSB3aW5kb3cueGF1dGggPSB0aGlzLnN0b3JhZ2U7XG4gICAgYXdhaXQgdGhpcy5jb3B5QWxsVG9TdG9yYWdlKCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKEV2ZW50cykuaW5jbHVkZXMoZXZlbnQpKSB7XG4gICAgICAgIHRoaXMuY29weUFsbFRvU3RvcmFnZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5ldmVudCkge1xuICAgICAgICAgICAgY2FzZSBFdmVudHMuQUNDRVNTX1JFTkVXRUQ6XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uQXV0aFN1Y2Nlc3MoKTtcbiAgICAgICAgICAgIGNhc2UgRXZlbnRzLkFDQ0VTU19SRU5FV0lORzpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub25BdXRoUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIGNhc2UgRXZlbnRzLkFDQ0VTU19ERU5JRUQ6XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uQXV0aEVycm9yKGV2ZW50LmRhdGEuZGF0YSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFzeW5jIGNvcHlBbGxUb1N0b3JhZ2UoKSB7XG4gICAgaWYgKHRoaXMuY29weVRvU3RvcmFnZSkge1xuICAgICAgZm9yIChjb25zdCBlbnVtSXRlbSBpbiB0aGlzLnN0b3JhZ2VLZXlzKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuc3RvcmFnZUtleXNbZW51bUl0ZW1dO1xuXG4gICAgICAgIHRoaXMuY29weVRvU3RvcmFnZVtrZXldID0gYXdhaXQgdGhpcy5zdG9yYWdlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9ww6fDtWVzIGRlIGluaWNpYWxpemHDp8Ojb1xuICogQHBhcmFtIHtzdHJpbmd9IG9wY29lcy5sb2dpbkFwcFVybCBVUkwgZGEgYXBsaWNhw6fDo28gZGUgbG9naW4gYSBzZXIgY29uZWN0YWRhXG4gKiBAcGFyYW0ge3N0cmluZz99IG9wY29lcy54YXV0aFJvdXRlIFJvdGEgZGUgY3Jvc3MgbG9naW4gZGEgYXBsaWNhw6fDo28gZGUgbG9naW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wY29lcy5vbkFjZXNzb1Jlbm92YWRvIENhbGxiYWNrIGEgc2VyIGNoYW1hZG8gcXVhbmRvIG8gYWNlc3NvIGZvciByZW5vdmFkbyBjb20gc3VjZXNzb1xuICogQHBhcmFtIHtmdW5jdGlvbn0gb3Bjb2VzLm9uQWNlc3NvTmVnYWRvIENhbGxiYWNrIGEgc2VyIGNoYW1hZG8gcXVhbmRvIG8gYWNlc3NvIGZvciBuZWdhZG9cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wY29lcy5vblJlbm92YW5kb0FjZXNzbyBDYWxsYmFjayBhIHNlciBjaGFtYWRvIHF1YW5kbyBvIGFjZXNzbyBlc3RpdmVyIHNlbmRvIHJlbm92YWRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxYQXV0aFNlcnZpY2U+fSBJbnN0w6JuY2lhIGRhIGNsYXNzZSBkZSBzZXJ2acOnbyBOb2Fsdm9BdXRoXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplWEF1dGgob3B0aW9ucykge1xuICBjb25zdCBpbnRhbmNlID0gbmV3IFhBdXRoU2VydmljZShvcHRpb25zKTtcblxuICByZXR1cm4gaW50YW5jZS5pbml0aWFsaXplKCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9